/*jscrambler
 {
 "ignore_transformations_@": {
 "*": {
 "*": false
 },
 "ignorewm": {
 "*": false,
 "string_splitting": true
 }
 }
 }
 */

//"use strict";
var DLReport = (function ($) {
	var _win = $ || window;
	var _doc = ($ && $.document) || document;
	var _ver = "0.8.3.4201";
	var _getVersion = function () {
		return _ver;
	};

function _enum(name, domain) {
    if (domain) {
        var d = domain.$DOMAIN = {};
        for (var p in domain) {
            var v = domain[p];
            if (typeof v === 'string') {
                d[v] = p;
            }
        }
        domain.$ENUM = name;
        return Object.freeze ? Object.freeze(domain) : domain;
    }
}
function _forceFloat(v) {
    v = parseFloat(v);
    return isNaN(v) ? 0 : v;
}
function _forceInt(v) {
    v = parseInt(v);
    return isNaN(v) ? 0 : v;
}
function _equalTexts(s1, s2, ignoreCase) {
    if (s1 && s2) {
        return ignoreCase ? s1.toLowerCase() == s2.toLowerCase() : s1 == s2;
    } else {
        return !s1 && !s2;
    }
}
function _borderCss(border) {
    return border ? border.css() : null;
}
function _pick() {
    var args = arguments;
    var len = args.length;
    for (var i = 0; i < len; i++) {
        var arg = arguments[i];
        if (arg !== null && arg !== undefined) {
            return arg;
        }
    }
}
function _pickValue() {
    var args = arguments;
    var len = args.length;
    for (var i = 0; i < len; i++) {
        var arg = arguments[i];
        if (!isNaN(arg)) {
            return arg;
        }
    }
}
var UNDEFINED;
var _floor = Math.floor;
var _int = Math.floor;
var _round = Math.round;
var _ceil = Math.ceil;
var _abs = Math.abs;
var _spaceReg = /\s/gi;
var _spaceReg2 = /[\x20\t]/gi;
function _nop() {}
function _isString (v) {
    return typeof v === "string";
}
function _isNumber(v) {
    return typeof v === "number";
}
function _defined(v) {
    return v !== undefined && v !== null;
}
function _cssBounds(style, x, y, w, h) {
    style.left = x + 'px';
    style.top = y + 'px';
    style.width = w + 'px';
    style.height = h + 'px';
}
function _cssRect(style, r) {
    style.left = r.x + 'px';
    style.top = r.y + 'px';
    style.width = r.width + 'px';
    style.height = r.height + 'px';
}
var $$_debugPrint = false;
var $$_debugBorder = new DataLudi.SolidPen(0x60ff0000).css();
var $$_debugBorder2 = new DataLudi.SolidPen(0x400000ff).css();
var UNDEFINED;
var MAX_INT = Math.pow(2, 53) - 1;
var MIN_INT = -MAX_INT;
var _log = DataLudi._log;
var _dlog = DataLudi._dlog;
var _assert = DataLudi._assert;
var _isChrome = DataLudi.isChrome;
var _getTimer = DataLudi.getTimer;
var _toStr = DataLudi.toStr;
var trim = DataLudi.trim;
var _isObject = DataLudi.isObject;
var _isDate = DataLudi.isDate;
var _isEmpty = DataLudi.isEmpty;
var _isArray = DataLudi.isArray;
var _asArray = function (obj) {
    return _isArray(obj) ? obj : null;
};
var getTimer = DataLudi.getTimer;
var IntProp = DataLudi.IntProp;
var EnumProp = DataLudi.EnumProp;
var defineClass = DataLudi.defineClass;
var _craeteFill = DataLudi.createFill;
var _createStroke = DataLudi.createStroke;
var _craeteFont = DataLudi.createFont;
var _invalidFieldIndex = DataLudi.invalidFieldIndex;
var DateTimeWriter = DataLudi.DateTimeWriter;
var Dom = DataLudi.Dom;
var EventAware = DataLudi.EventAware;
var DLCallback = DataLudi.DLCallback;
var ExpressionParser = DataLudi.ExpressionParser;
var ColumnSummaryRuntime = DataLudi.ColumnSummaryRuntime;
var ExpressionRuntime = DataLudi.ExpressionRuntime;
var DataRowExpressionRuntime = DataLudi.DataRowExpressionRuntime;
var FieldSummary = DataLudi.FieldSummary;
var UIComponent = DataLudi.UIComponent;
var UIElement = DataLudi.UIElement;
var SolidPen = DataLudi.SolidPen;
var FillGradient = DataLudi.FillGradient;
var SolidBrush = DataLudi.SolidBrush;
var IconLocation = DataLudi.IconLocation;
var GridComponent = DataLudi.GridComponent;
var LayerElement = DataLudi.LayerElement;
var ValueType = DataLudi.ValueType;
var RowFilterRuntime = DataLudi.RowFilterRuntime;
var RowProvider = DataLudi.RowProvider;
var GridBase = DataLudi.GridBase;
var GridView = DataLudi.GridView;
var TreeView = DataLudi.TreeView;
var VisualTool = DataLudi.VisualTool;
var GridStyles = DataLudi.GridStyles;
var Rectangle = DataLudi.Rectangle;
var Size = DataLudi.Size;
var PercentSize = DataLudi.PercentSize;
var Alignment = DataLudi.Alignment;
var GridFitStyle = DataLudi.GridFitStyle;
var RowGroup = DataLudi.RowGroup;
var HeaderElement = DataLudi.HeaderElement;
var FooterElement = DataLudi.FooterElement;
var DataRow = DataLudi.DataRow;
var GridLayoutManager = DataLudi.GridLayoutManager;
var ShapeDrawing = DataLudi.ShapeDrawing;
var EllipseShape = DataLudi.EllipseShape;
var PolygonShape = DataLudi.PolygonShape;
var SvgSprite = DataLudi.SvgSprite;
var DecimalFormatter = DataLudi.DecimalFormatter;
var GridDataSet = DataLudi.GridDataSet;
var GridChart = DataLudi.GridChart;
var GridChartView = DataLudi.GridChartView;
var ChartSeries = DataLudi.ChartSeries;
var DynamicStyleCollection = DataLudi.DynamicStyleCollection;
var GaugeValueLocation = DataLudi.GaugeValueLocation;
var GaugeLabelLocation = DataLudi.GaugeLabelLocation;
var GaugeBodyShape = DataLudi.GaugeBodyShape;
var GaugeRangeCollection = DataLudi.GaugeRangeCollection;
var GaugeScale = DataLudi.GaugeScale;
var LinearGauge = DataLudi.LinearGauge;
var CircleGauge = DataLudi.CircleGauge;
var BulletGraph = DataLudi.BulletGraph;
var CategorizedAxis = DataLudi.CategorizedAxis;
var print_extension = (function () {
    var $_rowprovider_init = RowProvider.prototype.init;
    RowProvider.prototype.init = function (indexing) {
        $_rowprovider_init.call(this, indexing);
        this._rowFilterRuntime = new (defineClass('PrintRowFilterRuntime', RowFilterRuntime, {
            isIdentifier: function(token) {
                if (token == "checked") return 99;
                return this._super(token);
            },
            evaluateIdentifier: function(idKey) {
                if (idKey == 99) return RowFilterRuntime.$_isChecked(this._row);
                return this._super(idKey);
            }
        }))();
    }
    var $_org_sort_rows = GridBase.prototype._sortRows;
    GridBase.prototype._sortRows = function (fields, directions, textCases) {
        this.$_sortRows = {
            fields: fields,
            directions: directions,
            textCases: textCases
        };
        $_org_sort_rows.call(this, fields, directions, textCases);
    }
    var $_org_group_by = GridView.prototype.groupBy;
    GridView.prototype.groupBy = function (fields, sorting, direction) {
        this.$_groupBy = {
            fields: fields,
            sorting: sorting,
            direction: direction
        };
        $_org_group_by.call(this, fields, sorting, direction);
    }
    var $_set_footer_items = RowGroup.prototype.setFooterItems;
    RowGroup.prototype.setFooterItems = function (value) {
        this.$_footerItemsSource = value;
        $_set_footer_items.call(this, value);
    }
    HeaderElement.prototype.$p_setIndent = function (indent) {
        if (indent == 0) return;
        var grid = this.grid();
        var lm = grid.layoutManager();
        var fixed = lm.fixedColCount();
        var start = this.fixed() ? 0 : lm.firstCol();
        var end = this.fixed() ? fixed - 1 : lm.lastCol();
        var view = this._cells[lm.getColumn(start).$_hash];
        view.setWidth(view.width() + indent);
        view.layoutContent(lm);
        for (var i = start + 1; i <= end; i++) {
            var view = this._cells[lm.getColumn(i).$_hash];
            view.setX(view.x() + indent);
            view.layoutContent(lm);
        }
        this.setWidth(this.width() + indent);
    };
    FooterElement.prototype.$p_setIndent = function (indent) {
    };
    var $_measure = GridLayoutManager.prototype._doMeasure;
    GridLayoutManager.prototype._doMeasure = function () {
        $_measure.apply(this, arguments);
        var grid = this._grid;
        if (grid.$_footerItemsHeight) {
            this._footerItemsBounds.height = grid.$_footerItemsHeight;
        }
        if (grid.$_headerItemsHeight) {
            this._headerItemsBounds.height = grid.$_headerItemsHeight;
        }
    }
    var proto = DynamicStyleCollection.prototype;
    proto.applyInternal = proto.applyInternalNormal;
})();
var PaperOrientation = _enum('PaperOrientation', {
    PORTRAIT: "portrait",
    LANDSCAPE: "landscape"
});
var PageColumnLayout = _enum('PageColumnLayout', {
    DOWN_THEN_ACROSS: "downThenAcross",
    ACROSS_THEN_DOWN: "acrossThenDown"
});
var ItemAnchorAlign = _enum('ItemAnchorAlign', {
    CENTER: "center",
    LEFT: "left",
    RIGHT: "right",
    TOP: "top",
    BOTTOM: "bottom"
});
var GridPageLayout = _enum('', {
    DEFAULT: 'default',
    CARD: 'card'
});
var GroupFillMode = _enum('GroupFillMode', {
    NONE: "none",
    NORMAL: "normal",
    ALL: "all"
});
var BoxDiagonal = _enum("BoxDiagonal", {
    DEFAULT: "default",
    OPPOSITE: "opposite",
    BOTH: "both"
});
var FieldGroupLayout = _enum('FieldGroupLayout', {
    HORIZONTAL: "horizontal",
    VERTICAL: "vertical"
});
var PrintDimension = function (value, fixed) {
    this._size = value;
    this._fixed = fixed;
};
PrintDimension.prototype = {
    constructor: PrintDimension,
    clone: function () {
        return new PrintDimension(this._size, this._fixed);
    },
    fixed: function () {
        return this._fixed;
    },
    size: function () {
        return this._size;
    },
    getSize: function (orgSize, denominator) {
        return this._fixed ? this._size : orgSize * this._size / (denominator || 100.0);
    },
    getSizeI: function (orgSize, denominator) {
        return Math.floor(this._fixed ? this._size : orgSize * this._size / (denominator || 100.0));
    }
};
PrintDimension.HTMLDPI = 96;
PrintDimension.MMTOIN = 0.0393701;
PrintDimension.CMTOIN = 0.393701;
PrintDimension.Empty = new PrintDimension(0, true);
PrintDimension.$_cmap = {
    "in": function (v) {
        return v * PrintDimension.HTMLDPI;
    },
    "cm": function (v) {
        return v * PrintDimension.CMTOIN * PrintDimension.HTMLDPI;
    },
    "mm": function (v) {
        return v * PrintDimension.MMTOIN * PrintDimension.HTMLDPI;
    },
    "px": function (v) {
        return v;
    }
};
PrintDimension.createFrom = function (value) {
    if (value === null || value === undefined) {
        return value;
    } else if (value instanceof PrintDimension) {
        return new PrintDimension(value._size, value._fixed);
    } else if (typeof value === "number") {
        return new PrintDimension(value, true);
    } else if (typeof value === "string") {
        var v, f, d,
            s = value.trim(),
            len = s.length;
        if (len > 0) {
            if (!isNaN(s)) {
                return new PrintDimension(Number(s), true);
            }
            v = 0;
            f = true;
            if (len > 1) {
                d = s[len - 1];
                if (d == "%") {
                    f = false;
                    s = s.substr(0, len - 1).trim();
                    if (s) {
                        v = parseFloat(s);
                    }
                } else if (len > 2) {
                    d = s.substr(len - 2, 2);
                    s = s.substr(0, len - 2).trim();
                    if (s) {
                        v = PrintDimension.$_cmap[d](s);
                    }
                }
            }
            if (!isNaN(v)) {
                return new PrintDimension(v, f);
            }
        }
    } else if (!isNaN(value)) {
        return new PrintDimension(Number(value), true);
    }
    return null;
};
PrintDimension.createArray = function (values) {
    var i, v, p, arr, s, s2, j,
        list = null;
    if (_isString(values)) {
        values = values.split(',');
    }
    if (_isArray(values)) {
        list = new Array(values.length);
        for (i = list.length; i--;) {
            v = values[i];
            list[i] = PrintDimension.createFrom(v);
        }
    } else if (_isObject(values)) {
        list = [];
        for (p in values) {
            arr = p.split(',');
            for (i = 0; i < arr.length; i++) {
                s = arr[i];
                if ((v = s.indexOf('-')) > 0) {
                    s2 = s.substr(v + 1);
                    s = s.substr(0, v);
                    s = parseInt(s);
                    s2 = parseInt(s2);
                    if (!isNaN(s) && !isNaN(s2)) {
                        v = s;
                        s = Math.min(s, s2);
                        s2 = Math.max(v, s2);
                        v = PrintDimension.createFrom(values[p]);
                        for (j = s; j <= s2; j++) {
                            list[j] = v;
                        }
                    }
                } else {
                    s = parseInt(s);
                    if (!isNaN(s)) {
                        list[s] = PrintDimension.createFrom(values[p]);
                    }
                }
            }
        }
        if (list.length < 1) {
            list = null;
        }
    }
    return list;
};
PrintDimension.equals = function (v1, v2) {
    return v1 instanceof PrintDimension && v2 instanceof PrintDimension && v1._size === v2.size && v1._fixed === v2._fixed;
};
PrintDimension.getFixed = function (dim) {
    return (dim && dim._fixed) ? dim._size : 0;
};
PrintDimension.getFixedI = function (dim) {
    return (dim && dim._fixed) ? Math.floor(dim._size) : 0;
};
PrintDimension.getSize = function (dim, orgSize, denominator) {
    if (dim) {
        return dim._fixed ? dim._size : orgSize * dim._size / (denominator || 100.0);
    }
    return 0;
};
PrintDimension.getSizeI = function (orgSize, denominator) {
    if (dim) {
        return Math.floor(dim._fixed ? dim._size : orgSize * dim._size / (denominator || 100.0));
    }
    return 0;
};
var PrintLinesMap = defineClass("PrintLinesMap", null, {
    init: function (source) {
        this._super();
    }
});
var $_STYLE_START = GridStyles.STYLE_LAST;
var PrintStyles = defineClass("PrintStyles", GridStyles, {
    init: function (owner, name, source) {
        this._super(owner, name, source, false);
    },
    shapeScaleX: UNDEFINED,
    shapeScaleX_: function () {
        return this.searchStyles(PrintStyles.SHAPE_SCALE_X)._shapeScaleX;
    },
    setShapeScaleX: function (value) {
        if (value !== UNDEFINED) {
            if (!this._values[PrintStyles.SHAPE_SCALE_X] || value !== this._shapeScaleX) {
                this._shapeScaleX = parseFloat(value);
                this._values[PrintStyles.SHAPE_SCALE_X] = true;
                if (this._fireEvents) this.changed(PrintStyles.SHAPE_SCALE_X);
            }
        } else if (this._values[PrintStyles.SHAPE_SCALE_X]) {
            delete this._shapeScaleX;
            this._values[PrintStyles.SHAPE_SCALE_X] = false;
            if (this._fireEvents) this.changed(PrintStyles.SHAPE_SCALE_X);
        }
    },
    shapeScaleY: UNDEFINED,
    setShapeScaleY: function (value) {
        if (value !== UNDEFINED) {
            if (!this._values[PrintStyles.SHAPE_SCALE_Y] || value !== this._shapeScaleY) {
                this._shapeScaleY = parseFloat(value);
                this._values[PrintStyles.SHAPE_SCALE_Y] = true;
                if (this._fireEvents) this.changed(PrintStyles.SHAPE_SCALE_Y);
            }
        } else if (this._values[PrintStyles.SHAPE_SCALE_Y]) {
            delete this._shapeScaleY;
            this._values[PrintStyles.SHAPE_SCALE_Y] = false;
            if (this._fireEvents) this.changed(PrintStyles.SHAPE_SCALE_Y);
        }
    },
    backgroundImage: UNDEFINED,
    setBackgroundImage: function (value) {
        if (value !== UNDEFINED) {
            if (!this._values[PrintStyles.BACKGROUND_IMAGE] || value !== this._backgroundImage) {
                this._backgroundImage = value;
                this._values[PrintStyles.BACKGROUND_IMAGE] = true;
                if (this._fireEvents) this.changed(PrintStyles.BACKGROUND_IMAGE);
            }
        } else if (this._values[PrintStyles.BACKGROUND_IMAGE]) {
            delete this._backgroundImage;
            this._values[PrintStyles.BACKGROUND_IMAGE] = false;
            if (this._fireEvents) this.changed(PrintStyles.BACKGROUND_IMAGE);
        }
    },
    backgroundAlpha: UNDEFINED,
    setBackgroundAlpha: function (value) {
        if (value !== UNDEFINED) {
            if (!this._values[PrintStyles.BACKGROUND_ALPHA] || value !== this._backgroundAlpha) {
                this._backgroundAlpha = parseFloat(value);
                this._values[PrintStyles.BACKGROUND_ALPHA] = true;
                if (this._fireEvents) this.changed(PrintStyles.BACKGROUND_ALPHA);
            }
        } else if (this._values[PrintStyles.BACKGROUND_ALPHA]) {
            delete this._backgroundAlpha;
            this._values[PrintStyles.BACKGROUND_ALPHA] = false;
            if (this._fireEvents) this.changed(PrintStyles.BACKGROUND_ALPHA);
        }
    },
    keepSpaces: UNDEFINED,
    setKeepSpaces: function (value) {
        if (value !== UNDEFINED) {
            if (!this._values[PrintStyles.KEEP_SPACES] || value !== this._keepSpaces) {
                this._keepSpaces = !!value;
                this._values[PrintStyles.KEEP_SPACES] = true;
                if (this._fireEvents) this.changed(PrintStyles.KEEP_SPACES);
            }
        } else if (this._values[PrintStyles.KEEP_SPACES]) {
            delete this._keepSpaces;
            this._values[PrintStyles.KEEP_SPACES] = false;
            if (this._fireEvents) this.changed(PrintStyles.KEEP_SPACES);
        }
    },
    setRef: function (styles) {
        this._ref = styles;
    },
    getBackgroundAlpha: function () {
        var a = this.backgroundAlpha();
        return isNaN(a) ? 1 : a;
    },
    searchStyles: function (entry) {
        if (this._values[entry]) {
            return this;
        }
        var p = this._ref;
        if (p) {
            if (p._values[entry]) {
                return p;
            }
        }
        p = this._parent;
        while (p) {
            if (p._values[entry]) {
                return p;
            }
            p = p._parent;
        }
        if (this._sysDefault && this._sysDefault._values[entry]) {
            return this._sysDefault;
        }
        p = this._parent;
        while (p) {
            if (p._sysDefault && p._sysDefault._values[entry]) {
                return p._sysDefault;
            }
            p = p._parent;
        }
        return GridStyles.Default;
    },
    extend: function (source, fireEvent) {
        fireEvent = arguments.length > 1 ? fireEvent : true;
        this._super(source, fireEvent);
        this.beginUpdate();
        try {
            if (source instanceof PrintStyles) {
                var values = source._values;
                if (values[PrintStyles.SHAPE_SCALE_X]) {
                    this.setShapeScaleX(source._shapeScaleX);
                }
                if (values[PrintStyles.SHAPE_SCALE_Y]) {
                    this.setShapeScaleX(source._shapeScaleY);
                }
                if (values[PrintStyles.BACKGROUND_IMAGE]) {
                    this.setBackgroundImage(source._backgroundImage);
                }
                if (values[PrintStyles.BACKGROUND_ALPHA]) {
                    this.setBackgroundAlpha(source._backgroundAlpha);
                }
                if (values[PrintStyles.KEEP_SPACES]) {
                    this.setKeepSpaces(source._keepSpaces);
                }
            } else if (_isObject(source)) {
            } else if (_isString(source)) {
            }
        } finally {
            this.endUpdate(fireEvent);
        }
    }
}, {
    SHAPE_SCALE_X: $_STYLE_START + 1,
    SHAPE_SCALE_Y: $_STYLE_START + 2,
    BACKGROUND_IMAGE: $_STYLE_START + 3,
    BACKGROUND_ALPHA: $_STYLE_START + 4,
    KEEP_SPACES: $_STYLE_START + 5
}, function (f) {
    GridStyles.$_extendPropMap({
        shapeScaleX: "setShapeScaleX",
        shapeScaleY: "setShapeScaleY",
        backgroundImage: "setBackgroundImage",
        backgroundAlpha: "setBackgroundAlpha",
        keepSpaces: "setKeepSpaces"
    });
    GridStyles.$_extendNameMap({
        shapeScaleX: f.SHAPE_SCALE_X,
        shapeScaleY: f.SHAPE_SCALE_Y,
        backgroundImage: f.BACKGROUND_IMAGE,
        backgroundAlpha: f.BACKGROUND_ALPHA,
        keepSpaces: f.KEEP_SPACES
    });
    f.DefaultStyleSheet = {
        body: {
            cell: {
            }
        }
    }
});
var PrintStyleSheet = defineClass("PrintStyleSheet", EventAware, {
    init: function (name, source) {
        this._super();
        this._name = name;
        this._report = new PrintStyles(this, "report");
        this._printHeader = new PrintStyles(this, "printHeader");
        this._printFooter = new PrintStyles(this, "printFooter");
        this._reportHeader = new PrintStyles(this, "reportHeader");
        this._reportFooter = new PrintStyles(this, "reportFooter");
        this._label = new PrintStyles(this, "label");
        this._table = new PrintStyles(this, "table");
        this._tableItem = new PrintStyles(this, "tableItem");
        this._list = new PrintStyles(this, "list");
        this._listItem = new PrintStyles(this, "listItem");
        this._vbox = new PrintStyles(this, "vbox");
        this._vboxItem = new PrintStyles(this, "vboxItem");
        this._hbox = new PrintStyles(this, "hbox");
        this._hboxItem = new PrintStyles(this, "hboxItem");
        source && this.load(source);
    },
    name: null,
    report: null,
    printHeader: null,
    printFooter: null,
    reportHeader: null,
    reportFooter: null,
    label: null,
    table: null,
    tableItem: null,
    list: null,
    listItem: null,
    vbox: null,
    vboxItem: null,
    hbox: null,
    hboxItem: null,
    setReport: function (value) {
        if (value !== this._report) {
            this._report.extend(value);
        }
    },
    setPrintHeader: function (value) {
        if (value !== this._printHeader) {
            this._printHeader.extend(value);
        }
    },
    setPrintFooter: function (value) {
        if (value !== this._printFooter) {
            this._printFooter.extend(value);
        }
    },
    setReportHeader: function (value) {
        if (value !== this._reportHeader) {
            this._reportHeader.extend(value);
        }
    },
    setReportFooter: function (value) {
        if (value !== this._reportFooter) {
            this._reportFooter.extend(value);
        }
    },
    setLabel: function (value) {
        if (value !== this._label) {
            this._label.extend(value);
        }
    },
    setTable: function (value) {
        if (value !== this._table) {
            this._table.extend(value);
        }
    },
    setTableItem: function (value) {
        if (value !== this._tableItems) {
            this._tableItem.extend(value);
        }
    },
    setList: function (value) {
        if (value !== this._list) {
            this._list.extend(value);
        }
    },
    setListItem: function (value) {
        if (value !== this._listItems) {
            this._listItem.extend(value);
        }
    },
    setVbox: function (value) {
        if (value !== this._vbox) {
            this._vbox.extend(value);
        }
    },
    setHbox: function (value) {
        if (value !== this._hbox) {
            this._hbox.extend(value);
        }
    },
    load: function (source) {
        var s;
        (s = source.report) && this.setReport(s);
        (s = source.printHeader) && this.setPrintHeader(s);
        (s = source.printFooter) && this.setPrintFooter(s);
        (s = source.reportHeader) && this.setReportHeader(s);
        (s = source.reportFooter) && this.setReportFooter(s);
        (s = source.label) && this.setLabel(s);
        if (s = source.table) {
            this.setReport(s);
            s.item && this.setTableItem(s.item);
        }
        if (s = source.list) {
            this.setList(s);
            s.item && this.setListItem(s.item);
        }
        if (s = source.vbox) {
            this.setVbox(s);
            s.item && this.setVboxItem(s.item);
        }
        if (s = source.hbox) {
            this.setHbox(s);
            s.item && this.setHboxItem(s.item);
        }
    }
}, {
}, function (f) {
    f.Default = new f("DefaultStyles", {
        report: {
            fontName: "Tahoma",
            line: null,
            datetimeFormat: "yyyy.MM.dd",
            textWrap: "explicit",
            shapeLocation: "left",
            shapeSize: "100%",
            shapeScaleX: 1,
            shapeScaleY: 1,
            shapeRotate: 0,
            backgroundAlpha: 1
        },
        printHeader: {
        },
        printFooter: {
        },
        reportHeader: {
        },
        reportFooter: {
        },
        label: {
        },
        table: {
            item: {
            }
        },
        list: {
            item: {
            }
        },
        vbox: {
        },
        hbox: {
        }
    });
});
var PrintStylesMap = defineClass("PrintStylesMap", null, {
    init: function (owner) {
        this._super(owner);
        this._owner = owner;
        this._map = {};
    },
    load: function (source, clear) {
        if (clear) {
            this._map = {};
        }
        for (var p in source) {
            this._map[p] = new PrintStyles(this._owner, p, source[p]);
        }
    },
    getStyles: function (name) {
        return this._map[name];
    }
});
var ReportData = defineClass("ReportData", null, {
	init: function (source, data) {
		this._super();
        this._id = source && source.id;
        this._load(source, data);
	},
    id: function () {
        return this._id;
    },
    isList: function () {
        return false;
    },
    count: function () {
        return 1;
    },
    initialize: function () {
    },
    dispose: function () {
    },
    setGrid: function (value) {
        this._grid = value;
    },
    setPage: function (value) {
    },
    setRow: function (rowView) {
    },
    getValue: function (path) {
        return undefined;
    },
    getValueAt: function (row, path) {
        return this.getValue(path);
    },
    _load: function (source, data) {
        this.assign(source);
    }
}, {
    parsePath: function (path) {
        var p, r,
            s = _toStr(path);
        if (s) {
            s = s.trim();
        }
        p = s.split('.');
        if (p && p.length > 1) {
            r = {};
            r.id = p[0];
            r.path = p;
            p.splice(0, 1);
            return r;
        }
        return null;
    },
    parseValue: function (value, path) {
        var i, v = value[path[0]];
        for (i = 1; i < path.length; i++) {
            v = v[path[i]];
        }
        return v;
    }
});
var ReportDataProvider = defineClass("ReportDataProvider", null, {
    init: function (designMode) {
        this._super();
        this._designMode = designMode;
        this.$_init();
    },
    load: function (source, all) {
        this.$_init();
        if (_isArray(source)) {
            for (var i = 0; i < source.length; i++) {
                this.addData(this.$_loadData(source[i], all));
            }
        } else if (source) {
            this.addData(this.$_loadData(source, all));
        }
    },
    getData: function (id) {
        return this._dataMap[id];
    },
    addData: function (data) {
        if (data instanceof ReportData && data.id()) {
            this._dataMap[data.id()] = data;
        }
    },
    removeData: function (id) {
        var data = this._dataMap[id];
        if (data) {
            delete this._dataMap[id];
            data.dispose();
        }
    },
    initialzie: function () {
        var map = this._dataMap;
        for (var d in map) {
            map[d].initialzie();
        }
    },
    dispose: function () {
        var map = this._dataMap;
        for (var d in map) {
            map[d].dispose();
        }
    },
    setGrid: function (value) {
        var map = this._dataMap;
        for (var d in map) {
            map[d].setGrid(value);
        }
    },
    setPage: function (value) {
        var map = this._dataMap;
        for (var d in map) {
            map[d].setPage(value);
        }
    },
    setRow: function (rowView) {
        var map = this._dataMap;
        for (var d in map) {
            map[d].setRow(rowView);
        }
    },
    getValue: function (id, path) {
        var data = this._dataMap[id];
        return data && data.getValue(path);
    },
    $_init: function () {
        this._dataMap = {
            "$report": new ReportPageData(),
            "$grid": new ReportGridData(),
            "$row": new ReportGridRowData()
        };
    },
    $_loadData: function (source, all) {
        if (source && source.id /*&& all || source.live*/) {
            if (source.fields) {
                    return new ReportDataSet(source, source.values, this._designMode);
            } else if (_isArray(source.value)) {
                return new ReportJsonArrayData(source, source.value);
            } else if (_isArray(source.values)) {
                return new ReportJsonArrayData(source, source.values);
            } else if (_isObject(source.value)) {
                return new ReportJsonData(source, source.value);
            } else if (_isObject(source.values)) {
                return new ReportJsonData(source, source.values);
            }
        }
        return null;
    }
});
var ReportGridData = defineClass("ReportGridData", ReportData, {
    init: function () {
        this._super();
    },
    initialize: function () {
    },
    dispose: function () {
    },
    _load: function (source, data) {
        this._super(source, data);
    },
    getValue: function (path) {
        var s = path[0];
        if (s) {
            switch (s) {
                case "sum":
                    return 0;
                case "min":
                    return 0;
            }
        }
        return undefined;
    }
});
var ReportPageData = defineClass("ReportPageData", ReportData, {
    init: function () {
        this._super();
        this._page = -1;
    },
    initialize: function () {
    },
    setPage: function (value) {
        this._page = value;
    },
    dispose: function () {
    },
    _load: function (source, data) {
        this._super(source, data);
    },
    getValue: function (path) {
        var s = path[0];
        if (s) {
            switch (s) {
                case "date":
                    return new Date();
                case "pageno":
                    return this._page + 1;
            }
        }
        return undefined;
    }
});
var ReportJsonData = defineClass("ReportJsonData", ReportData, {
    init: function (source, data) {
        this._super(source, data);
    },
    initialize: function () {
    },
    setPage: function (value) {
    },
    dispose: function () {
    },
    _load: function (source, data) {
        this._super(source, data);
        this._value = data;
    },
    getValue: function (path) {
        return ReportData.parseValue(this._value, path);
    }
});
var ReportJsonArrayData = defineClass("ReportJsonArrayData", ReportData, {
    init: function (source, data) {
        this._super(source, data);
    },
    count: function () {
        return this._values.length;
    },
    isList: function () {
        return true;
    },
    initialize: function () {
    },
    setPage: function (value) {
    },
    dispose: function () {
    },
    _load: function (source, data) {
        this._super(source, data);
        this._values = data;
    },
    getValue: function (path) {
        if (this._values && this._values.length > 0) {
            if (path) {
                var i, row = 0;
                if (path.charAt(0) == '[') {
                    i = path.indexOf(']');
                    if (i >= 1) {
                        row = parsInt(path.substring(1, i));
                        if (isNaN(row)) {
                            row = 0;
                        } else {
                            path = path.substr(i);
                        }
                    }
                }
                return ReportData.parseValue(this._values[row], path);
            } else {
                return this._values.slice();
            }
        }
        return undefined;
    },
    getValueAt: function (row, path) {
        var vals = this._values;
            cnt = vals ? vals.length : 0;
        if (cnt > row) {
            return ReportData.parseValue(vals[row], path);
        }
    }
});
var ReportGridRowData = defineClass("ReportGridRowData", ReportData, {
    init: function () {
        this._super();
    },
    initialize: function () {
    },
    dispose: function () {
    },
    _load: function (source, data) {
        this._super(source, data);
    },
    setRow: function (rowView) {
        this._rowView = rowView;
        this._row = rowView.item();
    },
    getValue: function (path) {
        var row = this._row;
        if (row) {
            var s = path[0];
            if (s == "column") {
                s = path[1];
                if (s) {
                    var col = this._grid.columnByName(s);
                    if (col) {
                        var cell = this._rowView.getCell(col);
                        var s = cell.text();
                        if (s) {
                            var t;
                            if (t = cell.prefix()) {
                                s = t + s;
                            }
                            if (t = cell.suffix()) {
                                s += t;
                            }
                        }
                        return s;
                    }
                }
            } else if (s) {
                return row.getValue(s);
            }
        }
        return undefined;
    }
});
var ReportDataField = defineClass("ReportDataField", null, {
    init: function (source) {
        this._super();
        source && this.assign(source);
    },
    fieldName: null,
    dataType: "text",
    sample: null,
    assignSimple: function (value) {
        if (_isString(value)) {
            this._fieldName = value;
        }
    }
});
var ReportDataSet = defineClass("ReportDataSet", ReportData, {
    init: function (source, data, designMode) {
        this._super(source, data);
        this._designMode = designMode;
        this._row = 0;
    },
    fields: null,
    sampleCount: 10,
    setFields: function (value) {
        var i, fld;
        if (value !== this._fields) {
            this._fields = [];
            if (_isArray(value)) {
                for (i = 0; i < value.length; i++) {
                    fld = new ReportDataField(value[i]);
                    this._fields.push(fld);
                }
            }
        }
    },
    setDataSource: function (value) {
        this._ds = value;
    },
    getFieldIndex: function (fldName) {
        var i, flds = this._fields;
        if (flds) {
            for (i = flds.length; i--;) {
                if (_equalTexts(flds[i]._fieldName, fldName, true)) {
                    return i;
                }
            }
        }
        return -1;
    },
    isList: function () {
        return true;
    },
    initialize: function () {
    },
    dispose: function () {
    },
    _load: function (source, data) {
        this._super(source, data);
        this._values = data;
    },
    setPage: function (value) {
    },
    setRow: function (row) {
        this._row = row;
    },
    getValue: function (path) {
        var i, fld, ds, vals, flds,
            row = this._row;
        if (path && path.length >= 2) {
            row = _forceInt(path[0], 0);
            fld = path[1];
            if (isNaN(fld)) fld = this.getFieldIndex(fld);
            ds = this._ds;
            vals = this._values;
            flds = this._fields;
            if (ds) {
                return ds.rowCount() > row ? ds.getValue(row, fld) : undefined;
            } else if (vals && vals.length > 0) {
                if (_isString(fld)) {
                    fld = Math.max(0, this.getFieldIndex(fld));
                } else {
                    fld = _forceInt(fld, fld);
                }
                return vals[row % vals.length][fld];
            } else if (flds[fld] && (vals = flds[fld].sample()) && vals.length > 0) {
                return vals[row % vals.length];
            }
        }
        return undefined;
    },
    getValueAt: function (row, path) {
        return this._ds.getValue(row, path);
    },
    getRows: function () {
        if (this._ds) {
            return this._ds.getRowObjects();
        }
        return [];
    }
});
var PrintDataSummarizer = defineClass("PrintDataSummarizer", null, {
    init: function (data, rows) {
        this._super();
        this._data = data;
        this._rows = rows;
        this._summaryMap = {};
    },
    getCount: function (field) {
        var fs = this.$_getSummary(field);
        return fs ? fs.count : this._rows.length;
    },
    getSum: function (field) {
        var fs = this.$_getSummary(field);
        return fs ? fs.sum : NaN;
    },
    getMax: function (field) {
        var fs = this.$_getSummary(field);
        return fs ? fs.max : NaN;
    },
    getMin: function (field) {
        var fs = this.$_getSummary(field);
        return fs ? fs.min : NaN;
    },
    getAvg: function (field) {
        var fs = this.$_getSummary(field);
        return fs ? fs.avg : NaN;
    },
    getVar: function (field) {
        var fs = this.$_getSummary(field);
        return fs ? fs.vars : NaN;
    },
    getVarp: function (field) {
        var fs = this.$_getSummary(field);
        return fs ? fs.varsp : NaN;
    },
    getStdev: function (field) {
        var fs = this.$_getSummary(field);
        return fs ? Math.sqrt(fs.vars) : NaN;
    },
    getStdevp: function (field) {
        var fs = this.$_getSummary(field);
        return fs ? Math.sqrt(fs.varsp) : NaN;
    },
    summarize: function (scope, callback) {
        return this;
    },
    summarizeGroup: function (scope, group, callback) {
        return this;
    },
    $_getSummary: function (field) {
        var ds = this._data,
            fs = this._summaryMap[field];
        if (!fs) {
            if (ds) {   // && ds.canSummarize(field)) {
                fs = new FieldSummary(field);
                this._summaryMap[field] = fs;
            }
        }
        if (fs && fs.count == 0 && ds.count() > 0) {
            this.$_summarize(fs);
        }
        return fs;
    },
    $_summarize: function (fs) {
        if (this._data instanceof ReportDataSet) {
            this._data._ds.aggregateRange(fs, this._rows, true);
            return true;
        }
    }
});
var PrintItem = defineClass("PrintItem", null, {
    init: function () {
        this._super();
        this._parent = null;
        this._index = -1;
        this._styles = new PrintStyles(this, "printItem", false);
    },
    stylesChanged: function (/*styleProp*/) {
        this._changed();
    },
    id: null,
    data: null,     // global data.
    field: null,    // parent의 data에 포함된 값을 지정.
    anchor: null,   // anchor item's id. anchor에 붙어 다니지만 anchor 위치에는 영향을 주지 않는다.
    align: EnumProp(ItemAnchorAlign, ItemAnchorAlign.CENTER),
    offsetX: 0,
    offsetY: 0,
    floating: false,// true면 페이지의 자식, false면 anchor와 형제.
    left: undefined,
    top: undefined,
    right: undefined,
    bottom: undefined,
    width: undefined,
    height: undefined,
    minWidth: undefined,
    maxWidth: undefined,
    minHeight: undefined,
    maxHeight: undefined,
    col: 0,
    row: 0,
    colSpan: 1,
    rowSpan: 1,
    zindex: IntProp(0),
    pageBreak: false,
    header: null,
    footer: null,
    styles: null,
    styleName: null,
    headerCollapsible: false,
    footerCollapsible: false,
    setData: function (value) {
        if (value != this._data) {
            this._data = value;
            this.$_parseDataPath(value);
        }
    },
    setStyles: function (value) {
        if (value !== this._styles) {
            this._styles.extend(value);
        }
    },
    setLeft: function (value) {
        this._left = PrintDimension.createFrom(value);
    },
    setTop: function (value) {
        this._top = PrintDimension.createFrom(value);
    },
    setRight: function (value) {
        this._right = PrintDimension.createFrom(value);
    },
    setBottom: function (value) {
        this._bottom = PrintDimension.createFrom(value);
    },
    setWidth: function (value) {
        this._width = PrintDimension.createFrom(value);
    },
    setHeight: function (value) {
        this._height = PrintDimension.createFrom(value);
    },
    setMinWidth: function (value) {
        this._minWidth = PrintDimension.createFrom(value);
    },
    setMaxWidth: function (value) {
        this._maxWidth = PrintDimension.createFrom(value);
    },
    setMinHeight: function (value) {
        this._minHeight = PrintDimension.createFrom(value);
    },
    setMaxHeight: function (value) {
        this._maxHeight = PrintDimension.createFrom(value);
    },
    setCol: function (value) {
        value = parseInt(value);
        this._col = isNaN(value) ? 1 : Math.max(0, value);
    },
    setRow: function (value) {
        value = parseInt(value);
        this._row = isNaN(value) ? 1 : Math.max(0, value);
    },
    setColSpan: function (value) {
        value = parseInt(value);
        this._colSpan = isNaN(value) ? 1 : Math.max(1, value);
    },
    setRowSpan: function (value) {
        value = parseInt(value);
        this._rowSpan = isNaN(value) ? 1 : Math.max(1, value);
    },
    designMode: function () {
        var owner = this.owner();
        return owner && owner._designMode;
    },
    parent: function () {
        return this._parent;
    },
    itemContainer: function () {
        return this._parent instanceof PrintItemContainer ? this._parent : this._parent ? this._parent.itemContainer() : null;
    },
    owner: function () {
        var c = this._parent instanceof PrintItemContainer ? this._parent : this._parent ? this._parent.itemContainer() : null;
        return c && c._owner;
    },
    dataProvider: function () {
        var owner = this.owner();
        return owner ? owner.dataProvider() : null;
    },
    dataBand: function () {
        return this._dataBand;
    },
    index: function () {
        return this._index;
    },
    isLinker: function () {
        return false;//this._leftItem || this._rightItem || this._topItem || this._bottomItem;
    },
    col_: function () {
        var v = parseInt(this._col);
        return isNaN(v) ? -1 : v;
    },
    row_: function () {
        var v = parseInt(this._row);
        return isNaN(v) ? -1 : v;
    },
    setHeader: function (value) {
        if (value !== this._header) {
            if (value) {
                this._header = new PrintLabelItem();
                this._header.assign(value);
                this._header._parent = this;// this._parent;
            } else {
                this._header = null;
            }
        }
    },
    setFooter: function (value) {
        if (value !== this._footer) {
            if (value) {
                this._footer = new PrintLabelItem();
                this._footer.assign(value);
                this._footer._parent = this;//this._parent;
            } else {
                this._footer = null;
            }
        }
    },
    dispose: function () {
    },
    prepareStyles: function () {
        var st2,
            st = this._styles,
            n = this.styleName();
        if (n) {
            st2 = this.owner().getStyles(n);
            if (st2) {
                st.setRef(st2);
            }
        }
        return st;
    },
    displayText: function () {
        return null;
    },
    getAncestors: function () {
        var items = [];
        var p = this._parent;
        while (p) {
            items.push(p);
            p = p._parent;
        }
        return items.reverse();
    },
    hasPageValue: function () {
        return this._pageNo || this._pageTotal;
    },
    getValue: function () {
        if (this._dataId || this._dataBand) {
            var id, path,
                provider = this._dataProvider || this.dataProvider();
            if (provider) {
                if (this._dataBand instanceof PrintCrosstabBand) {
                    path = this._dataId || this.$_bandField;
                    return this._dataBand.getValue(path);
                } else {
                    if (this._dataBand) {
                        id = this._dataBand.data();
                        path = this._dataId || this.$_bandField;
                    } else if (this._dataId) {
                        id = this._dataId;
                        path = this._dataPath;
                    }
                        return provider.getValue(id, path);
                }
            }
        }  else if (this._parent.getItemData) {
            return this._parent.getItemData(this);
        }
        return undefined;
    },
    getValueIterator: function () {
        var iter = this.getValue();
        return iter && iter.hasNext && iter.getValue && iter;
    },
    copy: function () {
        var obj = this.proxy();
        obj.$_dl_class = this.className();
        delete obj.id;
        return obj;
    },
    canClone: function () {
        return true;
    },
    canAccept: function (item) {
        return false;
    },
    propertyChanged: function (/*prop, oldValue, newValue*/) {
        this._changed();
    },
    _styleRegion: function () {
        return null;
    },
    $_attached: function () {
    },
    $_addItem: function (source) {
        var item,
            owner = this.owner();
        if (owner && source) {
            item = owner.delegate().getItem(source);
            if (item) {
                item._parent = this;
                item.assign(source);
                this._pageTotal = this._pageTotal || item.hasPageValue();
            }
            return item;
        }
        return null;
    },
    $_parseDataPath: function (value) {
        value = _toStr(value);
        if (value) {
            value = value.trim();
        }
        var path = value ? value.split('.') : null;
        if (path && path[0]) {
            this._dataId = path[0];
            if (path.length > 1) {
                path.splice(0, 1);
                if (this._dataId == "$report") {
                    this._pageNo = path[0] == "pageno";
                    this._pageTotal = path[0] == "pages" || path[0] == "pagetotal";
                }
                this._dataPath = path;
            } else {
                this._dataPath = undefined;
            }
        } else {
            this._dataId = this._pageNo = this._pageTotal = undefined;
        }
    },
    _changed: function () {
        var container = this.itemContainer();
        container && container._changed(this);
    },
    $_prepareBand: function (band) {
        this._dataProvider = band.owner().dataProvider();
        this._dataBand = band;
    }
});
var PrintDummyItem = defineClass("PrintDummyItem", PrintItem, {
    init: function () {
        this._super();
    }
});
var PrintTextItem = defineClass("PrintTextItem", PrintItem, {
    init: function () {
        this._super();
    }//,
    /*
    leftSpace: undefined,
    rightSpace: undefined,
    topSpace: undefined,
    bottomSpace: undefined,
    setLeftSpace: function (value) {
        this._leftSpace = PrintDimension.createFrom(value);
    },
    setTopSpace: function (value) {
        this._topSpace = PrintDimension.createFrom(value);
    },
    setRightSpace: function (value) {
        this._rightSpace = PrintDimension.createFrom(value);
    },
    setBottomSpace: function (value) {
        this._bottomSpace = PrintDimension.createFrom(value);
    }
    */
});
var PrintLabelItem = defineClass("PrintLabelItem", PrintTextItem, {
    init: function () {
        this._super();
        this.setStyles({
            keepSpaces: true
        });
    },
    text: null,
    value: undefined,
    assignSimple: function (value) {
        this.setText(value);
    },
    getValue: function () {
        if (_defined(this._value)) return this._value;
        return this._super();
    },
    displayText: function () {
        if (this.designMode()) {
            return this._text || (this._data ? ('=' + this._data) : "") || "";
        } else {
            return this._text || "";
        }
    }
});
var PrintValueItem = defineClass("PrintValueItem", PrintItem, {
    init: function () {
        this._super();
        this._datetimeFormat = DateTimeWriter.Default.format();
        this._datetimeWriter = DateTimeWriter.Default;
    },
    value: null,
    designValue: null,
    setValue: function (value) {
        if (value != this._value) {
            this._value = value;
            this._pageTotal = _equalTexts(value, "pages") || _equalTexts(value, "pagetotal");
            this._pageNo = _equalTexts(value, "pageno");
        }
    },
    setDateTimeFormat: function (value) {
        if (value != this._datetimeFormat) {
            this._datetimeFormat = value;
            if (value) {
                this._datetimeWriter = new DateTimeWriter(value);
            } {
                this._datetimeWriter = DateTimeWriter.Default;
            }
        }
    },
    hasPageValue: function () {
        return this._pageTotal || this._pageNo;
    },
    resetPageValue: function (total, page) {
    },
    displayText: function (runtime, printing) {
        var styles = this._styles,
            value = this._value && this._value.toLowerCase(),
            s = "";
        if (printing) {
            var v = runtime.getValue(value);
            if (v !== undefined && v !== null) {
                switch (value) {
                    case "date":
                        this.setDateTimeFormat(styles.datetimeFormat());
                        s += this._datetimeWriter.getText(v);
                        break;
                    case "pages":
                    case "pagetotal":
                    case "pageno":
                    default:
                        s += _toStr(v);
                        break;
                }
            }
        } else {
            s += this._designValue || ("#" + value);
        }
        return s;
    }
});
var PrintSummaryItem = defineClass("PrintSummaryItem", PrintTextItem, {
    init: function () {
        this._super();
        this._datetimeFormat = DateTimeWriter.Default.format();
        this._datetimeWriter = DateTimeWriter.Default;
        this._exprNode = null;
        this._value = NaN;
    },
    expression: "",
    valueTarget: null,
    designValue: "",
    setExpression: function (value) {
        value = trim(value);
        if (value != this._expression) {
            this._expression = value;
            if (value) {
                this._exprNode = ExpressionParser.Default.parse(value);
            } else {
                this._exprNode = undefined;
            }
            this._changed();
        }
        return this;
    },
    setValueTarget: function (value) {
        if (value !== this._valueTarget) {
            this._valueTarget = value;
            this._changed();
        }
        return this;
    },
    getSummary: function (runtime, printing) {
        if (!printing && !_isEmpty(this._designValue) && !isNaN(this._designValue)) {
            this._value = this._designValue;
        } else if (this._exprNode) {
            this._value = this._exprNode.evaluate(runtime);
        } else {
            this._value = this.getValue();
        }
        return this._value;
    }
});
var PrintImageItem = defineClass("PrintImageItem", PrintItem, {
    init: function () {
        this._super();
    },
    imageWidth: IntProp(32),
    imageHeight: IntProp(32),
    url: null,
    setImageWidth: function (value) {
        value = Math.max(0, _forceInt(value));
        if (value != this._imageWidth) {
            this._imageWidth = value;
        }
    },
    setImageHeight: function (value) {
        value = Math.max(0, _forceInt(value));
        if (value != this._imageHeight) {
            this._imageHeight = value;
        }
    }
});
/** @abstract */
var PrintLineItem = defineClass("PrintLineItem", PrintItem, {
    init: function () {
        this._super();
        this.setHeaderCollapsible(true);
        this.setFooterCollapsible(true);
        this._styles.setSysDefault(new PrintStyles(null, "lineDefault", {
            line: "#555"
        }), false);
    }
});
var PrintHLineItem = defineClass("PrintHLineItem", PrintLineItem, {
    init: function () {
        this._super();
        this.setLeft(0);
        this.setRight(0);
    }
});
var PrintVLineItem = defineClass("PrintVLineItem", PrintLineItem, {
    init: function () {
        this._super();
        this.setTop(0);
        this.setBottom(0);
    }
});
var PrintShapeItem = defineClass("PrintShapeItem", PrintItem, {
    init: function () {
        this._super();
    },
    imageUrl: null,
    shapeName: undefined
});
/** @abstract */
var PrintGroupItem = defineClass("PrintGroupItem", PrintItem, {
    init: function () {
        this._super();
        this._itemStyles = new PrintStyles(this, "groupItem");
        this._items = [];
        this._pageTotal = false;
    },
    fillWidth: EnumProp(GroupFillMode, GroupFillMode.NORMAL),
    fillHeight: EnumProp(GroupFillMode, GroupFillMode.NORMAL),
    items: null,
    itemStyles: null,
    itemLeft: undefined,
    itemRight: undefined,
    itemTop: undefined,
    itemBottom: undefined,
    setItems: function (value) {
        if (value !== this._items) {
            var item, i, cnt, v,
                delegate = this._delegate();
            this._items = [];
            this._pageTotal = false;
            if (_isArray(value)) {
                for (i = 0, cnt = value.length; i < cnt; i++) {
                    v = value[i];
                    item = this._createItem(delegate, v);
                    if (item) {
                        this.$_internalAddItem(item);
                        item.assign(v);
                        item._index = i;
                        this._pageTotal = this._pageTotal || item.hasPageValue();
                    }
                }
            } else if (value) {
                item = this._createItem(delegate, value);
                if (item) {
                    this.$_internalAddItem(item);
                    item.assign(value);
                    item._index = 0;
                    this._pageTotal = item.hasPageValue();
                }
            }
            this._changed();
        }
    },
    setItemStyles: function (value) {
        if (value !== this._itemStyles) {
            this._itemStyles.extend(value);
        }
    },
    setItemLeft: function (value) {
        this._itemLeft = PrintDimension.createFrom(value);
    },
    setItemTop: function (value) {
        this._itemTop = PrintDimension.createFrom(value);
    },
    setItemRight: function (value) {
        this._itemRight = PrintDimension.createFrom(value);
    },
    setItemBottom: function (value) {
        this._itemBottom = PrintDimension.createFrom(value);
    },
    count: function () {
        return this._items.length;
    },
    empty: function () {
        return this._items.length == 0;
    },
    isFillWidth: function () {
        return this._fillWidth == GroupFillMode.NORMAL || this._fillWidth == GroupFillMode.ALL;
    },
    isFillHeight: function () {
        return this._fillHeight == GroupFillMode.NORMAL || this._fillHeight == GroupFillMode.ALL;
    },
    ordered: function () {
        return false;
    },
    indexOf: function (item) {
        return this._items.indexOf(item);
    },
    getItem: function (index) {
        return this._items[index];
    },
    getOrderedItems: function () {
        var i, j, items = this._items.slice();
        items.sort(function (a, b) {
            i = a.zindex();
            j = b.zindex();
            if (isNaN(i)) return -1;
            if (isNaN(i)) return 1;
            return i - j;
        });
        return items;
    },
    addItem: function (item) {
        if (item && this._items.indexOf(item) < 0) {
            this.$_internalAddItem(item);
            this._changed();
        }
    },
    removeItem: function (item) {
        var idx = this._items.indexOf(item);
        if (idx >= 0) {
            this._items.splice(idx, 1);
            this._parent = null;
            this._changed();
        }
    },
    $_attached: function () {
        this._itemStyles.setParent(this._styles._root, false);
    },
    hasPageValue: function () {
        return this._pageTotal;
    },
    _delegate: function () {
        return this.owner().delegate();
    },
    _createItem: function (delegate, source) {
        return delegate.getItem(source);
    },
    $_internalAddItem: function (item, parentStyles) {
        this._items.push(item);
        item._parent = this;
        item.styles().setParent(parentStyles || this._itemStyles, false);
        item.styles()._root = this._styles._root;
        item.$_attached();
        return item;
    },
    $_prepareBand: function (band) {
        this._dataBand = band;
        for (var i = this._items.length; i--;) {
            this._items[i].$_prepareBand(band);
        }
    }
});
var PrintItemContainer = defineClass("PrintItemContainer", EventAware, {
    init: function (name, owner) {
        this._super();
        this._name = name;
        this._owner = owner;
        this._items = [];
        this._styles = new PrintStyles(this, "itemContainer");
        this._styles.setParent(owner.styles(), false);
    },
    stylesChanged: function (/*styleProp*/) {
        this._changed();
    },
    visible: true,
    items: null,
    styles: null,
    setItems: function (value) {
        if (value !== this._items) {
            var i, v, item,
                delegate = this._owner.delegate();
            this._items = [];
            this._pageTotal = false;
            if (_isArray(value)) {
                for (i = 0, cnt = value.length; i < cnt; i++) {
                    v = value[i];
                    if (v) {
                        item = delegate.getItem(v);
                        if (item) {
                            this.$_internalAddItem(item);
                            item.assign(v);
                            this._doItemAdded(item);
                        }
                    }
                }
            } else if (value) {
                item = delegate.getItem(value);
                if (item) {
                    this.$_internalAddItem(item);
                    item.assign(value);
                    this._doItemAdded(item);
                }
            }
            this._changed();
        }
    },
    setStyles: function (value) {
        if (value !== this._styles) {
            this._styles.extend(value);
        }
    },
    name: function () {
        return this._name;
    },
    owner: function () {
        return this._owner;
    },
    parent: function () {
        return this._owner;
    },
    count: function () {
        return this._items.length;
    },
    empty: function () {
        return this._items.length == 0;
    },
    dirty: function () {
        return this._dirty;
    },
    dispose: function () {
    },
    clear: function () {
        if (this._dirty) {
            this._doClear();
            this._dirty = false;
        }
    },
    indexOf: function (item) {
        return this._items.indexOf(item);
    },
    getItem: function (index) {
        return this._items[index];
    },
    addItem: function (item) {
        if (item && this._items.indexOf(item) < 0) {
            this.$_internalAddItem(item);
            this._changed();
        }
    },
    removeItem: function (item) {
        var idx = this._items.indexOf(item);
        if (idx >= 0) {
            this._items.splice(idx, 1);
            this._parent = null;
            this._changed();
        }
    },
    getAncestors: function () {
        var items = [],
            p = this._parent;
        while (p) {
            items.push(p);
            p = p._parent;
        }
        return items.reverse();
    },
    canClone: function () {
        return false;
    },
    canAccept: function (item) {
        return true;
    },
    _styleRegion: function () {
        return null;
    },
    $_internalAddItem: function (item) {
        this._items.push(item);
        item._parent = this;
        item._styles.setParent(item._styles._root = this._styles._parent, false);
        item.$_attached();
    },
    _doItemAdded: function (item) {
    },
    _changed: function (item) {
        this._dirty = true;
        this.fireEvent(PrintItemContainer.CHANGED);
    },
    _doClear: function () {
        this._items = [];
        this._styles.clearValues();
    },
    $_prepareBand: function (band) {
        this._dataBand = band;
        for (var i = this._items.length; i--;) {
            this._items[i].$_prepareBand(band);
        }
    }
}, {
    CHANGED: "onPrintItemContainerChanged"
});
var PrintItemContainerImpl = defineClass("PrintItemContainerImpl", PrintItemContainer, {
    init: function (name, owner) {
        this._super(name, owner);
        this._pageTotal = false;
    },
    stylesChanged: function (/*styleProp*/) {
        this._changed();
    },
    width: undefined,
    height: undefined,
    minWidth: undefined,
    maxWidth: undefined,
    minHeight: undefined,
    maxHeight: undefined,
    setWidth: function (value) {
        this._width = PrintDimension.createFrom(value);
    },
    setHeight: function (value) {
        this._height = PrintDimension.createFrom(value);
    },
    setMinWidth: function (value) {
        this._minWidth = PrintDimension.createFrom(value);
    },
    setMaxWidth: function (value) {
        this._maxWidth = PrintDimension.createFrom(value);
    },
    setMinHeight: function (value) {
        this._minHeight = PrintDimension.createFrom(value);
    },
    setMaxHeight: function (value) {
        this._maxHeight = PrintDimension.createFrom(value);
    },
    propertyChanged: function (/*prop, oldValue, newValue*/) {
        this._changed();
    },
    hasPageValue: function () {
        return this._pageTotal;
    },
    _doItemAdded: function (item) {
        this._pageTotal = this._pageTotal || item.hasPageValue();
    },
    _doClear: function () {
        this._super();
        this._width = this._height = this._minWidth = this._minHeight = this._maxWidth = this._maxHeight = undefined;
        this._pageTotal = false;
    }
});
var PrintSection = defineClass("PrintSection", PrintItemContainerImpl, {
    init: function (name, owner) {
        this._super(name, owner);
    }
});
var PrintSectionHeader = defineClass("PrintSectionHeader", PrintSection, {
    init: function (section) {
        this._super('sectionHeader', section.owner());
        this._section = section;
    },
    section: function () {
        return this._section;
    }
});
var PrintSectionFooter = defineClass("PrintSectionFooter", PrintSection, {
    init: function (section) {
        this._super('sectionFooter', section.owner());
        this._section = section;
    },
    band: function () {
        return this._band;
    }
});
var PrintReportHeader = defineClass("PrintReportHeader", PrintSection, {
    init: function (owner) {
        this._super("reportHeader", owner);
        this.addItem(new PrintLabelItem({
            text: "Report Title"//,
        }));
    }
});
var PrintPageTitle = defineClass("PrintPageTitle", PrintSection, {
    init: function (owner) {
        this._super("pageHeader", owner);
    }
});
var PrintPageHeader = defineClass("PrintPageHeader", PrintSection, {
    init: function (owner) {
        this._super("pageHeader", owner);
    }
});
var PrintPageFooter = defineClass("PrintPageFooter", PrintSection, {
    init: function (owner) {
        this._super("pageFooter", owner);
    }
});
var PrintReportFooter = defineClass("PrintReportFooter", PrintSection, {
    init: function (owner) {
        this._super("reportFooter", owner);
    }
});
var PrintPage = defineClass("PrintPage", null, {
    init: function (owner) {
        this._super();
        this._styles = new PrintStyles(this, "page");
        this._styles.setParent(owner && owner.styles(), false);
    },
    stylesChanged: function (/*styleProp*/) {
    },
    styles: null,
    setStyles: function (value) {
        if (value !== this._styles) {
            this._styles.extend(value);
        }
    },
    clear: function () {
        this._styles.clearValues();
    }
});
var PrintGrid = defineClass("PrintGrid", null, {
    init: function (owner) {
        this._super();
        this._card = new PrintCard(owner);
    },
    visible: true,
    pageLayout: EnumProp(GridPageLayout, GridPageLayout.DEFAULT),
    pageColumns: 1,
    columnLayout: EnumProp(PageColumnLayout, PageColumnLayout.DOWN_THEN_ACROSS),
    columnGap: 10,
    startRow: 0,
    rowCount: 0,
    rowFilter: null,
    columns: null, // 출력할 컬럼들의 이름을 배열로 지정한다.
    ignoreFixedStyles: false,
    pageFill: false,
    card: null,
    setPageColumns: function (value) {
        value = parseInt(value);
        if (!isNaN(value) && value != this._pageColumns) {
            this._pageColumns = Math.max(1, Math.min(2, value));
        }
    },
    setCard: function (value) {
        if (value !== this._card) {
            this._card.clear();
            this._card.assign(value);
        }
    },
    clear: function () {
        this._layout = GridPageLayout.DEFAULT;
        this._pagecolumns = 1;
        this._columnLayout = PageColumnLayout.DOWN_THEN_ACROSS;
        this._card.clear();
    }
});
var GridReport = defineClass("GridReport", EventAware, {
    init: function (owner, designMode) {
        this._super();
        this._owner = owner;
        this._designMode = designMode;
        this._styles = new PrintStyles(this, "report");
        this._stylesMap = new PrintStylesMap(this);
        this._page = new PrintPage(this);
        this._reportHeader = new PrintReportHeader(this);
        this._reportFooter = new PrintReportFooter(this);
        this._pageHeader = new PrintPageHeader(this);
        this._pageFooter = new PrintPageFooter(this);
        this._pageTitle = new PrintPageTitle(this);
        this._printGrid = new PrintGrid(this);
        this._grid = null;
        this._bands = new PrintBandCollection(this);
        this.setTheme(PrintStyleSheet.Default);
    },
    styleMap: null,
    styles: null,
    page: null,
    reportHeader: null,
    reportFooter: null,
    pageHeader: null,
    pageFooter: null,
    pageTitle: null,
    printGrid: null,
    grid: null,
    bands: null,
    desginMode: function () {
        return this._designMode;
    },
    styleMap_: function () {
        return this._stylesMap;
    },
    setStyleMap: function (value) {
        this._stylesMap.load(value);
    },
    setStyles: function (value) {
        if (value !== this._styles) {
            this._styles.extend(value);
        }
        return this;
    },
    setTheme: function (value) {
        if (value !== this._theme) {
            this._theme = value;
            this._styles.setSysDefault(value.report(), false);
        }
    },
    setPage: function (value) {
        if (value != this._page) {
            this._page.clear();
            value && this._page.assign(value);
        }
        return this;
    },
    setReportHeader: function (value) {
        if (value !== this._reportHeader) {
            this._reportHeader.clear();
            this._reportHeader.setVisible(!!value);
            value && this._reportHeader.assign(value);
        }
        return this;
    },
    setReportFooter: function (value) {
        if (value != this._reportFooter) {
            this._reportFooter.clear();
            this._reportFooter.setVisible(!!value);
            value && this._reportFooter.assign(value);
        }
        return this;
    },
    setPageHeader: function (value) {
        if (value != this._pageHeader) {
            this._pageHeader.clear();
            this._pageHeader.setVisible(!!value);
            value && this._pageHeader.assign(value);
        }
        return this;
    },
    setPageFooter: function (value) {
        if (value != this._pageFooter) {
            this._pageFooter.clear();
            this._pageFooter.setVisible(!!value);
            value && this._pageFooter.assign(value);
        }
        return this;
    },
    setPageTitle: function (value) {
        if (value != this._pageTitle) {
            this._pageTitle.clear();
            this._pageTitle.setVisible(!!value);
            value && this._pageTitle.assign(value);
        }
        return this;
    },
    setPrintGrid: function (value) {
        if (value !== this._printGrid) {
            this._printGrid.clear();
            this._printGrid.setVisible(!!value);
            value && this._printGrid.assign(value);
        }
        return this;
    },
    setGrid: function (value) {
        if (value != this._grid) {
            this._grid = JSON.parse(JSON.stringify(value));
            if (this._grid && this._grid.print) {
                this.setPrintGrid(this._grid.print);
            }
        }
        return this;
    },
    setBands: function (value) {
        if (value != this._bands) {
            this._bands.clear();
            _isArray(value) && this._bands.assign(value);
        }
    },
    delegate: function () {
        return this._owner && this._owner.delegate();
    },
    dataProvider: function () {
        return this._owner && this._owner.dataProvider();
    },
    ownerGrid: function () {
        return this._owner && this._owner.gridView();
    },
    load: function (config) {
        config.styleMap && this._stylesMap.load(config.styleMap);
        config.styles && this.setStyles(config.styles);
        config.page && this.setPage(config.page);
        config.reportHeader && this.setReportHeader(config.reportHeader);
        config.reportFooter && this.setReportFooter(config.reportFooter);
        config.pageHeader && this.setPageHeader(config.pageHeader);
        config.pageFooter && this.setPageFooter(config.pageFooter);
        config.pageTitle && this.setPageTitle(config.pageTitle);
        config.bands && this.setBands(config.bands);
        config.grid && this.setGrid(config.grid);
    },
    getStyles: function (styleName) {
        return this._stylesMap.getStyles(styleName);
    }
});
var PrintOptions = defineClass("PrintOptions", null, {
    init: function () {
        this._super();
        this.$_resetSize();
    },
    debugPrint: false,
    htmlDpi: 96,
    paperOrientation: EnumProp(PaperOrientation, PaperOrientation.PORTRAIT),
    paperWidth: PrintDimension.createFrom("210mm"),        // A4(21.0cm)
    paperHeight: PrintDimension.createFrom("297mm"),       // A4(29.7cm)
    paperMarginLeft: PrintDimension.createFrom("12mm"),
    paperMarginRight: PrintDimension.createFrom("12mm"),
    paperMarginTop: PrintDimension.createFrom("15mm"),
    paperMarginBottom: PrintDimension.createFrom("15mm"),
    previewUrl: "./previewer.html",
    previewWidth: 1000,
    previewHeight: 640,
    previewTitle: "Print Previewer",
    imageLoadTime: 1000,    // preview를 호출하기 전, 이미지들이 모두 로드될 동안 기다리는 시간
    htmlDpi_: function () {
        return PrintDimension.HTMLDPI;
    },
    setHtmlDpi: function (value) {
        value = Math.max(1, value);
        if (value != PrintDimension.HTMLDPI) {
            PrintDimension.HTMLDPI = value;
            this.$_resetSize();
        }
    },
    setPaperOrientation: function (value) {
        if (value !== this._paperOrientation) {
            this._paperOrientation = value;
            this.$_resetSize();
        }
    },
    setPaperWidth: function (value) {
        if (value !== this._paperWidth) {
            this._paperWidth = PrintDimension.createFrom(value);
            this.$_resetSize();
        }
    },
    setPaperHeight: function (value) {
        if (value != this._paperHeight) {
            this._paperHeight = PrintDimension.createFrom(value);
            this.$_resetSize();
        }
    },
    setPaperMarginLeft: function (value) {
        if (value != this._paperMarginLeft) {
            this._paperMarginLeft = PrintDimension.createFrom(value);
            this.$_resetSize();
        }
    },
    setPaperMarginRight: function (value) {
        if (value != this._paperMarginRight) {
            this._paperMarginRight = PrintDimension.createFrom(value);
            this.$_resetSize();
        }
    },
    setPaperMarginTop: function (value) {
        if (value != this._paperMarginTop) {
            this._paperMarginTop = PrintDimension.createFrom(value);
            this.$_resetSize();
        }
    },
    setPaperMarginBottom: function (value) {
        if (value != this._paperMarginBottom) {
            this._paperMarginBottom = PrintDimension.createFrom(value);
            this.$_resetSize();
        }
    },
    pageWidth: function () {
        return this._pageWidth;
    },
    pageHeight: function () {
        return this._pageHeight;
    },
    paperScreenWidth: function () {
        return this._paperScreenWidth;
    },
    paperScreenHeight: function () {
        return this._paperScreenHeight;
    },
    paperHorzMargin: function () {
        return this._paperMarginLeft.getSize() + this._paperMarginRight.getSize();
    },
    paperVertMargin: function () {
        return this._paperMarginTop.getSize() + this._paperMarginBottom.getSize();
    },
    $_resetSize: function () {
        var w = this._paperWidth.getSize(),
            h = this._paperHeight.getSize(),
            left = this._paperMarginLeft.getSize(),
            right = this._paperMarginRight.getSize(),
            top = this._paperMarginTop.getSize(),
            bottom = this._paperMarginBottom.getSize();
        if (this._paperOrientation === PaperOrientation.LANDSCAPE) {
            this._pageWidth = (h - left - right);
            this._pageHeight = (w - top - bottom);
        } else {
            this._pageWidth = (w - left - right);
            this._pageHeight = (h - top - bottom);
        }
        this._pageWidth = Math.floor(Math.max(16, this._pageWidth));
        this._pageHeight = Math.floor(Math.max(16, this._pageHeight));
        this._paperScreenWidth = Math.floor(Math.max(16, w));
        this._paperScreenHeight = Math.floor(Math.max(16, h));
    }
});
var PrintDelegate = defineClass("PrintDelegate", null, {
    init: function (container) {
        this._super();
        this._container = container;
        this._modelMap = {
            "dummy": PrintDummyItem,
            "label": PrintLabelItem,
            "image": PrintImageItem,
            "hline": PrintHLineItem,
            "vline": PrintVLineItem,
            "shape": PrintShapeItem,
            "summary": PrintSummaryItem,
            "canvas": PrintCanvas,
            "list": PrintList,
            "hbox": PrintHBox,
            "vbox": PrintVBox,
            "dbox": PrintDBox,
            "tile": PrintTile,
            "linearGauge": PrintLinearGaugeItem,
            "circleGauge": PrintCircleGaugeItem,
            "chart": PrintChartItem
        };
        this._viewMap = {
            "PrintDummyItem": PrintDummyElement,
            "PrintLabelItem": PrintLabelElement,
            "PrintSummaryItem": PrintSummaryElement,
            "PrintShapeItem": PrintShapeElement,
            "PrintImageItem": PrintImageElement,
            "PrintHLineItem": PrintHLineElement,
            "PrintVLineItem": PrintVLineElement,
            "PrintCanvas": PrintCanvasElement,
            "PrintList": PrintListElement,
            "DefaultCardItem": PrintListElement,
            "PrintHBox": PrintHBoxElement,
            "PrintVBox": PrintVBoxElement,
            "PrintDBox": PrintDBoxElement,
            "PrintTile": PrintTileElement,
            "PrintLinearGaugeItem": PrintGaugeElement,
            "PrintCircleGaugeItem": PrintGaugeElement,
            "PrintChartItem": PrintChartElement
        }
    },
    getItem: function (source, defType) {
        var item = null;
        if (typeof source == 'string') {
            item = new PrintLabelItem().setText(source);
        } else if (_isObject(source)) {
            var cls, t = source.type;
            if (t === undefined || t === null || t === '') {
                t = defType || ('text' in source || 'data' in source ? 'label' : 'dummy');
            }
            cls = this._modelMap[t];
            if (cls) {
                item = new cls();
            } else {
                throw new Error('Unknown item type: ' + t);
            }
        }
        return item;
    },
    getItemView: function (item, printing) {
        if (item instanceof PrintItem) {
            var cls = this._viewMap[item.className()]
            if (cls) {
                return new cls(this._container.$_dom, item, printing);
            }
        }
        return null;
    }
});
var PrintDataBandItemLayout = defineClass("PrintDataBandItemLayout", null, {
    init: function () {
        this._super();
    },
    containerView: null,
    setContainerView: function (value) {
        this._containerView = value;
        return this;
    },
    measure: function (hintWidth, hintHeight) {
        var i, cnt, item, view, hview, t,
            cv = this._containerView,
            m = cv.model(),
            styles = m.styles(),
            w = hintWidth,
            h = 0;
        if (m instanceof PrintDataBandItem) {
            for (i = 0, cnt = m.count(); i < cnt; i++) {
                item = m.getItem(i);
                view = cv.getItemView(item);
                hview = view._measuredHeight;
                /*
                t = PrintDimension.getFixed(item.top());
                if (isNaN(t)) {
                    t = PrintDimension.getFixed(item.bottom());
                    if (!isNaN(t)) {
                        hview += t;
                    }
                } else if (isNaN(PrintDimension.getFixed(item.bottom()))) {
                    hview += t;
                }
                h = Math.max(hview, h);
                */
                hview += PrintDimension.getFixedI(item.top()) + PrintDimension.getFixedI(item.bottom());
                h = Math.max(hview, h);
            }
            h += styles.paddingVert();
        }
        return { width: w, height: h };
    },
    layout: function (bounds, forceChildren) {
        var i, view, m, x, y, w, h, left, right, top, bottom, t,
            styles = this._containerView.model().styles(),
            r = styles.deflatePaddings(bounds),
            cv = this._containerView,
            cnt = cv.childCount();
        for (i = 0; i < cnt; i++) {
            view =  cv.getChild(i);
            m = view.model();
            x = r.x;
            y = r.y;
            w = view.calcLayoutWidth(r.width);
            h = view.calcLayoutHeight(r.height);
            left = m.left();
            right = m.right();
            if (left && right) {
                x += (t = left.getSize(r.width));
                w = r.width - right.getSize(r.width) - t;
            } else if (left) {
                x += left.getSize(r.width);
            } else if (right) {
                x = r.right() - w - right.getSize(r.width);
            } else {
                x += (r.width - w) / 2;
            }
            top = m.top();
            bottom = m.bottom();
            if (top && bottom) {
                y += (t = top.getSize(r.height));
                h = r.height - bottom.getSize(r.height) - t;
            } else if (top) {
                y += top.getSize(r.height);
            } else if (bottom) {
                y = r.bottom() - h - bottom.getSize(r.height);
            } else {
                y += (r.height - h) / 2;
            }
            view.setBoundsI(x, y, Math.max(0, w), Math.max(0, h));
            view.layoutItems(forceChildren);
        }
    }
});
var PrintDataBandRowLayout = defineClass("PrintDataBandRowLayout", PrintDataBandItemLayout, {
    init: function (bandView) {
        this._super();
        this._bandView = bandView;
    },
});
var PrintSectionLayout = defineClass("PrintSectionLayout", null, {
    init: function (containerView) {
        this._super();
        this._containerView = containerView;
    },
    setContainerView: function (value) {
        this._containerView = value;
        return this;
    },
    measure: function (hintWidth, hintHeight) {
        var i, cnt, item, view, hview, t,
            cv = this._containerView,
            m = cv.model(),
            styles = m.styles(),
            w = hintWidth,
            h = 0;
        if (m instanceof PrintSection) {
            for (i = 0, cnt = m.count(); i < cnt; i++) {
                item = m.getItem(i);
                view = cv.getItemView(item);
                hview = view._measuredHeight;
                /*
                 t = PrintDimension.getFixed(item.top());
                 if (isNaN(t)) {
                 t = PrintDimension.getFixed(item.bottom());
                 if (!isNaN(t)) {
                 hview += t;
                 }
                 } else if (isNaN(PrintDimension.getFixed(item.bottom()))) {
                 hview += t;
                 }
                 h = Math.max(hview, h);
                 */
                hview += PrintDimension.getFixedI(item.top()) + PrintDimension.getFixedI(item.bottom());
                h = Math.max(hview, h);
            }
            h += styles.paddingVert();
        }
        return { width: w, height: h };
    },
    layout: function (bounds, forceChildren) {
        var i, view, m, x, y, w, h, left, right, top, bottom, t,
            cv = this._containerView,
            styles = cv.model().styles(),
            r = styles.deflatePaddings(bounds),
            cnt = cv instanceof PrintItemContainerElement ? cv.itemViewCount() : cv.childCount(),
            getItem = cv instanceof PrintItemContainerElement ? cv.getItemViewAt : cv.getChild;
        for (i = 0; i < cnt; i++) {
            view =  getItem.call(cv, i);
            m = view.model();
            x = r.x;
            y = r.y;
            w = view.calcLayoutWidth(r.width);
            h = view.calcLayoutHeight(r.height);
            left = m.left();
            right = m.right();
            if (left && right) {
                x += (t = left.getSize(r.width));
                w = r.width - right.getSize(r.width) - t;
            } else if (left) {
                x += left.getSize(r.width);
            } else if (right) {
                x = r.right() - w - right.getSize(r.width);
            } else {
                x += (r.width - w) / 2;
            }
            top = m.top();
            bottom = m.bottom();
            if (top && bottom) {
                y += (t = top.getSize(r.height));
                h = r.height - bottom.getSize(r.height) - t;
            } else if (top) {
                y += top.getSize(r.height);
            } else if (bottom) {
                y = r.bottom() - h - bottom.getSize(r.height);
            } else {
                y += (r.height - h) / 2;
            }
            view.setBoundsI(x, y, Math.max(0, w), Math.max(0, h));
            view.layoutItems(forceChildren);
        }
    }
});
var PrintCanvasLayout = defineClass("PrintCanvasLayout", PrintSectionLayout, {
    init: function (containerView) {
        this._super();
        this._containerView = containerView;
    },
    measure: function (hintWidth, hintHeight) {
        var i, cnt, item, view, hview, wview, t,
            cv = this._containerView,
            m = cv.model(),
            styles = m.styles(),
            h = 0,
            w = 0;
        if (m instanceof PrintCanvas) {
            for (i = 0, cnt = m.count(); i < cnt; i++) {
                item = m.getItem(i);
                view = cv.getItemView(item);
                hview = view._measuredHeight;
                wview = view._measuredWidth;
                /*
                 t = PrintDimension.getFixed(item.top());
                 if (isNaN(t)) {
                 t = PrintDimension.getFixed(item.bottom());
                 if (!isNaN(t)) {
                 hview += t;
                 }
                 } else if (isNaN(PrintDimension.getFixed(item.bottom()))) {
                 hview += t;
                 }
                 h = Math.max(hview, h);
                 */
                hview += PrintDimension.getFixedI(item.top()) + PrintDimension.getFixedI(item.bottom());
                h = Math.max(hview, h);
                wview += PrintDimension.getFixedI(item.left()) + PrintDimension.getFixedI(item.right());
                w = Math.max(wview, w);
            }
            h += styles.paddingVert();
            w += styles.paddingHorz();
        }
        return { width: w, height: h };
    }
});
var PrintTableBandLayout = defineClass("PrintTableBandLayout", null, {
    init: function (bandView) {
        this._super();
        this._bandView = bandView;
        this._relWidthSum = 0;
        this._relWidths = [];
        this._absCount = 0;
        this._points = [];
    },
    containerView: null,
    setContainerView: function (value) {
        this._containerView = value;
        return this;
    },
    getWidth: function (index) {
        return this._points[index + 1] - this._points[index];
    },
    measureColumns: function () {
        var i, cnt, col, cw, w, relWidthSum, absCount,
            band = this._bandView.model(),
            cols = band.getColumns(),
            relWidths = this._relWidths,
            pts = this._points;
        relWidths.length = 0;
        relWidthSum = 0;
        absCount = 0;
        pts.length = 0;
        pts.push(0);
        cnt = cols.length;
        w = 0;
        for (i = 0; i < cnt; i++) {
            col = cols[i];
            cw = col.width();
            if (cw) {
                if (cw.fixed()) {
                    w += cw.size();
                    absCount++;
                } else {
                    relWidths.push(i);
                    relWidthSum += cw.size();
                }
            } else {
                w += band.defaultWidth();
            }
            pts.push(w);
        }
        this._relWidthSum = relWidthSum;
        this._absCount = absCount;
    },
    layoutColumns: function (width) {
        var delta, len, widths, i, j, dw, w,
            band = this._bandView.model(),
            cols = band.getColumns(),
            cnt = cols.length,
            absCount = this._absCount,
            relWidths = this._relWidths,
            relWidthSum = this._relWidthSum,
            pts = this._points,
            delta = width - pts[cnt];
        if (delta > 0) {
            if (relWidthSum > 0) {
                len = relWidths.length;
                widths = [];
                for (i = 1; i <= cnt; i++) {
                    widths.push(pts[i] - pts[i - 1]);
                }
                if (band.isFillWidth()) {
                    dw = delta;
                    for (i = 0; i < len - 1; i++) {
                        j = relWidths[i];
                        w = cols[j].width();
                        widths[j] = w = delta * w.size() / relWidthSum;
                        dw -= w;
                    }
                    widths[relWidths[i]] = dw;
                } else {
                    for (i = 0; i < len; i++) {
                        j = relWidths[i];
                        w = cols[j].width();
                        widths[j] = w.getSize(delta);
                    }
                }
                for (i = 0; i < cnt; i++) {
                    pts[i + 1] = pts[i] + widths[i];
                }
            } else if (band.isFillWidth()) {
                if (absCount > 0 && band.fillWidth() !== GroupFillMode.ALL) {
                    if (absCount < cnt) {
                        widths = [];
                        for (i = 1; i <= cnt; i++) {
                            widths.push(pts[i] - pts[i - 1]);
                        }
                        dw = delta / (cnt - absCount);
                        for (i = 0; i < cnt; i++) {
                            cw = cols[i].width();
                            if (!cw) { // 명시적으로 지정하지 않은 셀인 경우에만
                                widths[i] += dw;
                            }
                        }
                        for (i = 0; i < cnt; i++) {
                            pts[i + 1] = pts[i] + widths[i];
                        }
                    }
                } else {
                    dw = delta / cnt;
                    for (i = 1; i < cnt; i++) {
                        pts[i] = pts[i] + dw * i;
                    }
                }
                if (band.isFillWidth()) {
                    pts[cnt] = width;
                }
            }
        }
    },
    measure: function (hintWidth, hintHeight) {
        var i, cnt, col, items, item, cnt2, j, view, h2, hview, t,
            cv = this._containerView,
            m = cv.model(),
            table = m.band(),
            cols = table.getColumns(),
            styles = cv.$_lastRow ? m.lastStyles() : m.styles(),
            w = hintWidth,
            h = 0;
        for (i = 0, cnt = cols.length; i < cnt; i++) {
            col = cols[i];
            items = m.getItems(i);
            cnt2 = items ? items.length : 0;
            h2 = 0;
            for (j = 0; j < cnt2; j++) {
                item = items[j];
                view = cv.getItemView(item);
                if (view) {
                    hview = view._measuredHeight;
                    /*
                     t = PrintDimension.getFixed(item.top());
                     if (isNaN(t)) {
                     t = PrintDimension.getFixed(item.bottom());
                     if (!isNaN(t)) {
                     hview += t;
                     }
                     } else if (isNaN(PrintDimension.getFixed(item.bottom()))) {
                     hview += t;
                     }
                     h = Math.max(hview, h);
                     */
                    hview += PrintDimension.getFixedI(item.top()) + PrintDimension.getFixedI(item.bottom());
                    h2 = Math.max(hview, h2);
                }
            }
            h = Math.max(h2, h);
        }
        h += styles.paddingVert();
        return { width: w, height: h };
    },
    layout: function (bounds, forceChildren) {
        var i, view, m, col, x, y, w, h, cnt2, j, cx, cy, cw, ch, left, right, top, bottom, t,
            styles = this._containerView.model().styles(),
            r = styles.deflatePaddings(bounds),
            pts = this._points,
            cv = this._containerView,
            cnt = cv.childCount();
        x = bounds.x;
        y = bounds.y;
        h = bounds.height;
        for (i = 0; i < cnt; i++) {
            cell = cv.getChild(i);
            w = this.getWidth(i);
            cell.setBoundsI(x, y, w, h);
            x += w;
            cnt2 = cell.childCount();
            for (j = 0; j < cnt2; j++) {
                view = cell.getChild(j);
                m = view.model();
                cx = cy = 0;
                cw = view.calcLayoutWidth(w);
                ch = view.calcLayoutHeight(h);
                left = m.left();
                right = m.right();
                if (left && right) {
                    cx += (t = left.getSize(w));
                    cw = w - right.getSize(w) - t;
                } else if (left) {
                    cx += left.getSize(w);
                } else if (right) {
                    cx = w - right.getSize(w);
                } else {
                    cx += (w - cw) / 2;
                }
                top = m.top();
                bottom = m.bottom();
                if (top && bottom) {
                    cy += (t = top.getSize(h));
                    ch = h - bottom.getSize(h) - t;
                } else if (top) {
                    cy += top.getSize(h);
                } else if (bottom) {
                    cy = h - bottom.getSize(h);
                } else {
                    cy += (h - ch) / 2;
                }
                view.setBoundsI(cx, cy, Math.max(0, cw), Math.max(0, ch));
                view.layoutItems(forceChildren);
            }
        }
    }
});
var PrintCrosstabBandLayout = defineClass("PrintCrosstabBandLayout", null, {
    init: function (bandView) {
        this._super();
        this._bandView = bandView;
        this._row_relWidthSum = 0;
        this._row_relWidths = [];
        this._row_absCount = 0;
        this._row_points = [];
        this._col_relWidthSum = 0;
        this._col_relWidths = [];
        this._col_absCount = 0;
        this._col_points = [];
        this._relWidthSum = 0;
        this._relWidths = [];
        this._absCount = 0;
        this._points = [];
    },
    containerView: null,
    setContainerView: function (value) {
        this._containerView = value;
        return this;
    },
    getWidth: function (index) {
        return this._points[index + 1] - this._points[index];
    },
    getRowWidth: function (index) {
        return this._row_points[index + 1] - this._row_points[index];
    },
    measureColumns: function () {
        var i, cnt, col, cw, w, relWidthSum, absCount,
            band = this._bandView.model(),
            relWidths = this._col_relWidths,
            pts = this._col_points;
        w = this.measureRowFields();
        relWidths.length = 0;
        relWidthSum = 0;
        absCount = 0;
        pts.length = 0;
        cnt = band.columnCount();
        for (i = 0; i < cnt; i++) {
            cw = null;
            if (cw) {
                if (cw.fixed()) {
                    w += cw.size();
                    absCount++;
                } else {
                    relWidths.push(i);
                    relWidthSum += cw.size();
                }
            } else {
                w += band.defaultColumnWidth();
            }
            pts.push(w);
        }
        this._col_relWidthSum = relWidthSum;
        this._col_absCount = absCount;
    },
    measureRowFields: function () {
        var i, cnt, col, cw, w, relWidthSum, absCount,
            band = this._bandView.model(),
            relWidths = this._row_relWidths,
            pts = this._row_points;
        relWidths.length = 0;
        relWidthSum = 0;
        absCount = 0;
        pts.length = 0;
        pts.push(0);
        cnt = band.rowFieldCount();
        w = 0;
        for (i = 0; i < cnt; i++) {
            cw = null;
            if (cw) {
                if (cw.fixed()) {
                    w += cw.size();
                    absCount++;
                } else {
                    relWidths.push(i);
                    relWidthSum += cw.size();
                }
            } else {
                w += band.defaultRowFieldWidth();
            }
            pts.push(w);
        }
        this._row_relWidthSum = relWidthSum;
        this._row_absCount = absCount;
        return w;
    },
    layoutColumns: function (width) {
        var delta, len, widths, i, j, dw, w,
            band = this._bandView.model(),
            cnt = band.rowFieldCount() + band.columnCount();
            absCount = this._absCount = this._col_absCount + this._row_absCount,
            relWidths = this._relWidths = this._row_relWidths.concat(this._col_relWidths),
            relWidthSum = this._relWidthSum = this._col_relWidthsum + this._row_relWidthSum,
            pts = this._points = this._row_points.concat(this._col_points);
            delta = width - pts[cnt];
        if (delta > 0) {
            if (relWidthSum > 0) {
                len = relWidths.length;
                widths = [];
                for (i = 1; i <= cnt; i++) {
                    widths.push(pts[i] - pts[i - 1]);
                }
                if (band.isFillWidth()) {
                    dw = delta;
                    for (i = 0; i < len - 1; i++) {
                        j = relWidths[i];
                        w = cols[j].width();
                        widths[j] = w = delta * w.size() / relWidthSum;
                        dw -= w;
                    }
                    widths[relWidths[i]] = dw;
                } else {
                    for (i = 0; i < len; i++) {
                        j = relWidths[i];
                        w = cols[j].width();
                        widths[j] = w.getSize(delta);
                    }
                }
                for (i = 0; i < cnt; i++) {
                    pts[i + 1] = pts[i] + widths[i];
                }
            } else if (band.isFillWidth()) {
                if (absCount > 0 && band.fillWidth() !== GroupFillMode.ALL) {
                    if (absCount < cnt) {
                        widths = [];
                        for (i = 1; i <= cnt; i++) {
                            widths.push(pts[i] - pts[i - 1]);
                        }
                        dw = delta / (cnt - absCount);
                        for (i = 0; i < cnt; i++) {
                            cw = cols[i].width();
                            if (!cw) { // 명시적으로 지정하지 않은 셀인 경우에만
                                widths[i] += dw;
                            }
                        }
                        for (i = 0; i < cnt; i++) {
                            pts[i + 1] = pts[i] + widths[i];
                        }
                    }
                } else {
                    dw = delta / cnt;
                    for (i = 1; i < cnt; i++) {
                        pts[i] = pts[i] + dw * i;
                    }
                }
                if (band.isFillWidth()) {
                    pts[cnt] = width;
                }
            }
        }
    },
    measure: function (hintWidth, hintHeight) {
        var i, cnt, col, items, item, cnt2, j, view, h2, hview, t,
            cv = this._containerView,
            m = cv.model(),
            band = m.band(),
            styles = cv.$_lastRow ? m.lastStyles() : m.styles(),
            w = hintWidth,
            h = 0;
        for (i = 0, cnt = band.rowFieldCount(); i < cnt; i++) {
            item = m.$_getRowFieldItem(i);
            view = cv.getItemView(item);
            if (view) {
                hview = view._measuredHeight;
                /*
                 t = PrintDimension.getFixed(item.top());
                 if (isNaN(t)) {
                 t = PrintDimension.getFixed(item.bottom());
                 if (!isNaN(t)) {
                 hview += t;
                 }
                 } else if (isNaN(PrintDimension.getFixed(item.bottom()))) {
                 hview += t;
                 }
                 h = Math.max(hview, h);
                 */
                hview += PrintDimension.getFixedI(item.top()) + PrintDimension.getFixedI(item.bottom());
                h = Math.max(hview, h);
            }
        }
        h += styles.paddingVert();
        return { width: w, height: h };
    },
    layout: function (bounds, forceChildren) {
        var i, view, m, col, x, y, w, h, cnt2, j, cx, cy, cw, ch, left, right, top, bottom, t,
            styles = this._containerView.model().styles(),
            r = styles.deflatePaddings(bounds),
            pts = this._points,
            cv = this._containerView,
            cnt = cv.childCount();
        x = bounds.x;
        y = bounds.y;
        h = bounds.height;
        for (i = 0; i < cnt; i++) {
            cell = cv.getChild(i);
            w = this.getWidth(i);
            cell.setBoundsI(x, y, w, h);
            x += w;
            cnt2 = cell.childCount();
            for (j = 0; j < cnt2; j++) {
                view = cell.getChild(j);
                m = view.model();
                cx = cy = 0;
                cw = view.calcLayoutWidth(w);
                ch = view.calcLayoutHeight(h);
                left = m.left();
                right = m.right();
                if (left && right) {
                    cx += (t = left.getSize(w));
                    cw = w - right.getSize(w) - t;
                } else if (left) {
                    cx += left.getSize(w);
                } else if (right) {
                    cx = w - right.getSize(w);
                } else {
                    cx += (w - cw) / 2;
                }
                top = m.top();
                bottom = m.bottom();
                if (top && bottom) {
                    cy += (t = top.getSize(h));
                    ch = h - bottom.getSize(h) - t;
                } else if (top) {
                    cy += top.getSize(h);
                } else if (bottom) {
                    cy = h - bottom.getSize(h);
                } else {
                    cy += (h - ch) / 2;
                }
                view.setBoundsI(cx, cy, Math.max(0, cw), Math.max(0, ch));
                view.layoutItems(forceChildren);
            }
        }
    }
});
var PrintValueRuntime = defineClass("PrintValueRuntime", null, {
    init: function (printContainer) {
        this._super();
        this._container = printContainer;
    },
    totalPage: 0,
    currPage: 0,
    getValue: function (symbol) {
        var s = symbol ? symbol.trim() : null;
        if (s) {
            switch (s.toLowerCase()) {
                case "date":
                    return new Date();
                case "pageno":
                    return this._currPage + 1;
                case "pagetotal":
                    return this._totalPage;
            }
        }
        return s;
    }
});
var PrintSummaryExpressionRuntime = defineClass("PrintSummaryExpressionRuntime", ExpressionRuntime, {
    init: function () {
        this._super();
        this._dataMap = {};
        this._dataList = [];
        this._paths = {};
    },
    setReportData: function (provider) {
        this._reportData = provider;
    },
    setDataSource: function (ds, summarizer) {
        this._dataSource = ds;
        this._fieldCount = ds ? ds.fieldCount() : 0;
        this._summarizer = ds && summarizer;
    },
    isIdentifier: function(token) {
        var t = token.toLowerCase();
        if (PrintSummaryExpressionRuntime.IDENTS.hasOwnProperty(t)) {
            return PrintSummaryExpressionRuntime.IDENTS[t];
        }
        if (!this._dataMap[token]) {
            this._dataMap[token] = true;
            this._dataList.push(token);
        }
        return PrintSummaryExpressionRuntime.ID_DATA + this._dataList.length - 1;
    },
    evaluateIndexerI: function (idkey, index) {
        if (this._summarizer) {
            if (index < 0 || index >= this._fieldCount) {
                _invalidFieldIndex(index);
            }
            switch(idkey) {
                case PrintSummaryExpressionRuntime.ID_SUM:
                    return this._summarizer.getSum(index);
                case PrintSummaryExpressionRuntime.ID_COUNT:
                    return this._summarizer.getCount(index);
                case PrintSummaryExpressionRuntime.ID_MAX:
                    return this._summarizer.getMax(index);
                case PrintSummaryExpressionRuntime.ID_MIN:
                    return this._summarizer.getMin(index);
                case PrintSummaryExpressionRuntime.ID_AVG:
                    return this._summarizer.getAvg(index);
                case PrintSummaryExpressionRuntime.ID_VAR:
                    return this._summarizer.getVar(index);
                case PrintSummaryExpressionRuntime.ID_VARP:
                    return this._summarizer.getVarp(index);
                case PrintSummaryExpressionRuntime.ID_STDEV:
                    return this._summarizer.getStdev(index);
                case PrintSummaryExpressionRuntime.ID_STDEVP:
                    return this._summarizer.getStdevp(index);
            }
            return this._super(idKey, index);
        } else {
            switch(idkey) {
                case PrintSummaryExpressionRuntime.ID_SUM:
                case PrintSummaryExpressionRuntime.ID_COUNT:
                    return 0;
                case PrintSummaryExpressionRuntime.ID_MAX:
                case PrintSummaryExpressionRuntime.ID_MIN:
                case PrintSummaryExpressionRuntime.ID_AVG:
                case PrintSummaryExpressionRuntime.ID_VAR:
                case PrintSummaryExpressionRuntime.ID_VARP:
                case PrintSummaryExpressionRuntime.ID_STDEV:
                case PrintSummaryExpressionRuntime.ID_STDEVP:
                    return NaN;
            }
            return undefined;
        }
    },
    evaluateIndexerS: function (idkey, index) {
        if (idkey >= PrintSummaryExpressionRuntime.ID_DATA) {
            var path = this._paths[index];
            if (!path) {
                path = this._paths[index] = index.split('.');
            }
            return this._reportData.getValue(this._dataList[PrintSummaryExpressionRuntime.ID_DATA - idkey], path);
        } else if (this._summarizer) {
            var idx = this._dataSource.getFieldIndex(index);
            if (idx < 0 || idx >= this._fieldCount) {
                _invalidFieldIndex(index);
            }
            switch(idkey) {
                case PrintSummaryExpressionRuntime.ID_SUM:
                    return this._summarizer.getSum(idx);
                case PrintSummaryExpressionRuntime.ID_COUNT:
                    return this._summarizer.getCount(idx);
                case PrintSummaryExpressionRuntime.ID_MAX:
                    return this._summarizer.getMax(idx);
                case PrintSummaryExpressionRuntime.ID_MIN:
                    return this._summarizer.getMin(idx);
                case PrintSummaryExpressionRuntime.ID_AVG:
                    return this._summarizer.getAvg(idx);
                case PrintSummaryExpressionRuntime.ID_VAR:
                    return this._summarizer.getVar(idx);
                case PrintSummaryExpressionRuntime.ID_VARP:
                    return this._summarizer.getVarp(idx);
                case PrintSummaryExpressionRuntime.ID_STDEV:
                    return this._summarizer.getStdev(idx);
                case PrintSummaryExpressionRuntime.ID_STDEVP:
                    return this._summarizer.getStdevp(idx);
            }
            return this._super(idKey, index);
        } else {
            switch(idkey) {
                case PrintSummaryExpressionRuntime.ID_SUM:
                case PrintSummaryExpressionRuntime.ID_COUNT:
                    return 0;
                case PrintSummaryExpressionRuntime.ID_MAX:
                case PrintSummaryExpressionRuntime.ID_MIN:
                case PrintSummaryExpressionRuntime.ID_AVG:
                case PrintSummaryExpressionRuntime.ID_VAR:
                case PrintSummaryExpressionRuntime.ID_VARP:
                case PrintSummaryExpressionRuntime.ID_STDEV:
                case PrintSummaryExpressionRuntime.ID_STDEVP:
                    return NaN;
            }
            return undefined;
        }
    }
}, {
    ID_COUNT: 0,
    ID_SUM: 1,
    ID_MAX: 2,
    ID_MIN: 3,
    ID_AVG: 4,
    ID_VAR: 5,
    ID_VARP: 6,
    ID_STDEV: 7,
    ID_STDEVP: 8,
    ID_DATA: 100
}, function(f) {
    f.IDENTS = {
        count: f.ID_COUNT,
        sum: f.ID_SUM,
        max: f.ID_MAX,
        min: f.ID_MIN,
        avg: f.ID_AVG,
        "var": f.ID_VAR,
        varp: f.ID_VARP,
        stdev: f.ID_STDEV,
        stdevp: f.ID_STDEVP
    };
});
/** @abstract */
var PrintElement = defineClass("PrintElement", UIElement, {
    init: function (dom, name, model, printing) {
        this._super(dom, name);
        if (dom) {
            this._dom.$name = (name || this.className());
            this._back = document.createElement("span");
            this._dom.appendChild(this._back);
            var css = this._back.style;
            css.boxSizing = "border-box";
            css.position = "absolute";
            css.padding = "0px";
            css.margin = "0px";
            css["-webkit-print-color-adjust"] = "exact"; // for chrome printing
            css.overflow = 'hidden';
        }
        this._drawRect = new Rectangle();
        this._model = model;
        this._printing = printing;
        this._measuredWidth = NaN;
        this._measuredHeight = NaN;
        this._explicitWidth = NaN;
        this._explicitHeight = NaN;
        this._borderLeftWidth = 0;
        this._borderTopWidth = 0;
        this._borderRightWidth = 0;
        this._borderBottomWidth = 0;
    },
    model: null,
    designVisible: false,
    border: null,
    borderLeft: null,
    borderTop: null,
    borderRight: null,
    borderBottom: null,
    borderHorz: function () {
        return this._borderLeftWidth + this._borderRightWidth;
    },
    borderVert: function () {
        return this._borderTopWidth + this._borderBottomWidth;
    },
    printing: function () {
        return this._printing;
    },
    designTime: function () {
        return !this._printing;
    },
    modeledParent: function () {
        var p = this.parent();
        if (p instanceof PrintPagePane || p instanceof PrintReportPane) {
            return p;
        }
        while (p && (!(p instanceof PrintElement) || !p.model())) {
            p = p.parent();
        }
        return p;
    },
    designModel: function () {
        return this._model;
    },
    designView: function () {
        return this;
    },
    designParent: function () {
        var p = this.parent();
        if (p instanceof PrintPagePane || p instanceof PrintReportPane) {
            return p;
        }
        while (p && (!(p instanceof PrintElement) || !p.designModel())) {
            p = p.parent();
        }
        return p;
    },
    itemContainer: function () {
        var p = this.parent();
        while (p && !(p instanceof PrintItemContainerElement)) {
            p = p.parent();
        }
        return p;
    },
    clickable: function () {
        return true;
    },
    getCellChild: function (index) {
        var cell = this.getChild(index);
        return cell && cell.getChild(0);
    },
    _getElementStyles: function (m) {
        return m.styles && m.styles();
    },
    prepareElement: function (m) {
        var styles = this._getElementStyles(m);
        if (styles && !this.isLayer()) {
            this.setBorder(styles.border());
            this.setBorderLeft(styles.borderLeft());
            this.setBorderTop(styles.borderTop());
            this.setBorderRight(styles.borderRight());
            this.setBorderBottom(styles.borderBottom());
            if (this._border) {
                this._borderLeftWidth =
                this._borderRightWidth =
                this._borderTopWidth =
                this._borderBottomWidth = this._border.width();
            } else {
                this._borderLeftWidth = this._borderLeft ? this._borderLeft.width() : 0;
                this._borderRightWidth = this._borderRight ? this._borderRight.width() : 0;
                this._borderTopWidth = this._borderTop ? this._borderTop.width() : 0;
                this._borderBottomWidth = this._borderBottom ? this._borderBottom.width() : 0;
            }
            this._doUpdateStyles(m, styles);
        }
        this._doPrepareElement(m);
    },
    _getHintSize: function (hint, max, size) {
        var f;
        if (size) {
            f = size.getSize(hint);
        } else {
            f = hint;
        }
        if (max) {
            f = Math.min(max.getSize(hint), f);
        }
        return f;
    },
    measure: function (hintWidth, hintHeight, force) {
        var w, h, wmax, hmax, sz,
            m = this.model(),
            styles = m.styles();
        this.prepareElement(m);
        w = m.width();
        h = m.height();
        wmax = m.maxWidth();
        hmax = m.maxHeight();
        sz = this._doMeasure(this._getHintSize(hintWidth, wmax, w), this._getHintSize(hintHeight, hmax, h), force) || {width: 0, height: 0};
        if (w && w.fixed()) {
            sz.width = this._explicitWidth = w.size();
        } else {
            this._explicitWidth = NaN;
            sz.width += this._borderLeftWidth + this._borderRightWidth + styles.marginHorz();
        }
        if (h && h.fixed()) {
            sz.height = this._explicitHeight = h.size();
        } else {
            this._explicitHeight = NaN;
            sz.height += this._borderTopWidth + this._borderBottomWidth + styles.marginVert();
        }
        if (w = m.maxWidth()) {
            if (w.fixed()) {
                sz.width = Math.min(sz.width, w.size());
            }
        }
        if (w = m.minWidth()) {
            if (w.fixed()) {
                sz.width = Math.max(sz.width, w.size());
            }
        }
        if (w = m.maxHeight()) {
            if (w.fixed()) {
                sz.height = Math.min(sz.height, w.size());
            }
        }
        if (w = m.minHeight()) {
            if (w.fixed()) {
                sz.height = Math.max(sz.height, w.size());
            }
        }
        this._measuredWidth = sz.width;
        this._measuredHeight = sz.height;
        return sz;
    },
    measure2: function (hintWidth, hintHeight, force) {
        var sz, m = this.model();
        this.prepareElement(m);
        sz = this._doMeasure(hintWidth, hintHeight, force) || {width: 0, height: 0};
        sz.width +=  this._borderLeftWidth + this._borderRightWidth + styles.marginHorz();
        sz.height += this._borderTopWidth + this._borderBottomWidth + styles.marginVert();
        this._measuredWidth = sz.width;
        this._measuredHeight = sz.height;
        return sz;
    },
    layoutItems: function (force) {
        var m = this.model(),
            styles = m.styles(),
            r = this.getClientRect();
        styles && styles.deflateMargins(r);
        r.x += this._borderLeftWidth;
        r.y += this._borderTopWidth;
        r.width -= this._borderLeftWidth + this._borderRightWidth;
        r.height -= this._borderTopWidth + this._borderBottomWidth;
        this._doLayoutItems(force, r);
    },
    refresh: function () {
        this._doRefresh();
    },
    clip: function (g) {
        this.getClientRect(this._drawRect);
        g.clipRect(this._drawRect);
    },
    canEdit: function () {
        return false;
    },
    getEditBounds: function () {
        var r = this.boundsByContainer();
        return r;
    },
    getEditText: function () {
        return "";
    },
    getEditProp: function () {
        return "";
    },
    calcLayoutWidth: function (bounds) {
        var width, w,
            m = this.model();
        width = m.width();
        if (width) {
            w = width.getSize(bounds);
        } else {
            w = this._measuredWidth;
        }
        if (width = m.maxWidth()) {
            w = Math.min(w, width.getSize(bounds));
        }
        if (width = m.minWidth()) {
            w = Math.max(w, width.getSize(bounds));
        }
        return w;
    },
    calcLayoutHeight: function (bounds) {
        var height, h,
            m = this.model();
        height = m.height();
        if (height) {
            h = height.getSize(bounds);
        } else {
            h = this._measuredHeight;
        }
        if (height = m.maxHeight()) {
            h = Math.min(h, height.getSize(bounds));
        }
        if (height = m.minHeight()) {
            h = Math.max(h, height.getSize(bounds));
        }
        return h;
    },
    _doDraw: function (g, needOpaque) {
        var r = this._drawRect.clone().shrink(1, 1);
        needOpaque && g.drawRectI(SolidBrush.WHITE, null, this._drawRect);
        this._doRender(g, this._drawRect);
        this._doDrawBorders(g, r, this._printing);
    },
    _doDrawHtml: function () {
        var r = this._drawRect;
        this.getClientRect(r);
        this._doDrawHtmlBack(this._back, r);
        this._doDrawHtmlBorders(r);
        this._doRenderHtml(r);
    },
    _createItemView: function (delegate, item, printing) {
        return delegate.getItemView(item, printing);
    },
    _getEmptyText: function () {
        return this._model ? this._model.className() : "";
    },
    $_getGraphics: function (clear, r, before) {
        var svg = this._svg;
        if (!svg) {
            svg = this._svg = new SvgSprite(null, this.container());
            if (before) {
                this._dom.insertBefore(svg._svg, before);
            } else {
                this._dom.appendChild(svg._svg);
            }
        }
        svg._svg.style.visibility = 'visible';
        return svg.getGraphics(clear, r);
    },
    $_getBackGraphics: function (clear, r) {
        var svg = this._backSvg;
        if (!svg) {
            svg = this._backSvg = new SvgSprite(null, this.container());
            this._back.appendChild(svg._svg);
        }
        svg._svg.style.visibility = 'visible';
        return svg.getGraphics(clear, r);
    },
    $_prepareSpan: function () {
        if (!this._span) {
            this._span = document.createElement("span");
            this._span.style.position = "absolute";
            this._span.style.display = 'inline-block';
            this._dom.appendChild(this._span);
        }
        this._span.style.visibility = 'visible';
        return this._span;
    },
    $_unprepareSpan: function () {
        if (this._span) {
            this._span.style.visibility = 'hidden';
        }
    },
    _getTextAlign: function (align) {
        switch (align) {
            case Alignment.FAR:
                return "right";
            case Alignment.NEAR:
                return "left";
            default:
                return "center";
        }
    },
    _getLineAlign: function (align) {
        switch (align) {
            case Alignment.FAR:
                return "bottom";
            case Alignment.NEAR:
                return "top";
            default:
                return "middle";
        }
    },
    _calcTextRect: function (g, font, text, x, y, w, h, align, valign, wrap) {
        if (this._dom) {
            var span = this.container().$_textMeasurer;
            return Dom.calcTextBounds(span, font, text, x, y, w, h, align, valign, wrap);
        } else {
            switch (wrap) {
                case TextWrap.EXPLICIT:
                    return g.getExplicitTextRect(font, text, x, y, w, h, align, valign);
                case TextWrap.NORMAL:
                    return g.getWrapTextRect(font, text, x, y, w, h, align, valign);
                default:
                    return g.getTextRect(font, text, x, y, w, h, align, valign);
            }
        }
    },
    _doUpdateStyles: function (model, styles) {
    },
    _doPrepareElement: function (model) {
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
        return new Size(hintWidth, hintHeight);
    },
    _doLayoutItems: function (force, r) {
    },
    _doDrawBorders: function (g, r, printing) {
    },
    _doRefresh: function () {
    },
    _doRender: function (g, r) {
    },
    _doDrawHtmlBack: function (back, r) {
        var m, styles, css, fill, url;
        if (this.model && (m = this.model()) && m.styles && (styles = m.styles())) {
            if ($$_debugPrint) {
                if (!this._debug) {
                    this._debug = document.createElement("div");
                    this._dom.appendChild(this._debug);
                    css = this._debug.style;
                    css.boxSizing = "border-box";
                    css.position = "absolute";
                    css.padding = "0px";
                    css.margin = "0px";
                    css["-webkit-print-color-adjust"] = "exact"; // for chrome printing
                }
                css = this._debug.style;
                _cssRect(css, r);
                css.border = $$_debugBorder;
            } else if (this._debug) {
                this._dom.removeChild(this._debug);
                this._debug = undefined;
            }
            fill = styles.background();
            styles.deflateMargins(r);
            css = this._back.style;
            _cssRect(css, r);
            css.background = fill ? fill.css() : 'transparent';
            css.opacity = styles.getBackgroundAlpha();
            url = styles.backgroundImage();
            if (url) {
                css.backgroundImage = "url(" + url + ")";
                css.backgroundRepeat = "no-repeat";
            }
            /*
            if (url) {
                var elt = this._backImage;
                if (!elt) {
                    elt = this._backImage = document.createElement("img");
                    this._dom.appendChild(elt);
                    css = elt.style;
                    css.boxSizing = "border-box";
                    css.position = "absolute";
                    css.padding = "0px";
                    css.margin = "0px";
                    css["-webkit-print-color-adjust"] = "exact"; // for chrome printing
                }
                css = this._backImage.style;
                css.position = "absolute";
                css.left = r.x + "px";
                css.top = r.y + "px";
                css.width = r.width + "px";
                css.height = r.height + "px";
                css.overflow = "hidden";
                elt.src = url;
            }
            */
        }
    },
    _doDrawHtmlBorders: function (r) {
        var css = this._back.style,
            b = this._border;
        if (b) {
            css.border = this._border.css();
            r.inflate(-b.width(), -b.width());
        } else {
            if (b = this._borderLeft) {
                css.borderLeft = b.css();
                r.leftBy(b.width());
            } else {
                css.borderLeft = "";
            }
            if (b = this._borderRight) {
                css.borderRight = b.css();
                r.width -= b.width();
            } else {
                css.borderRight = "";
            }
            if (b = this._borderTop) {
                css.borderTop = b.css();
                r.topBy(b.width());
            } else {
                css.borderTop = "";
            }
            if (b = this._borderBottom) {
                css.borderBottom = b.css();
                r.height -= b.width();
            } else {
                css.borderBottom = "";
            }
        }
        if (this.designTime()) {
            this._bordered = this._border || this._borderLeft || this._borderRight || this._borderTop || this._borderBottom;
            if (!this._bordered && this.isContainer()) {
                css.border = PrintElement.DESIGN_BORDER_GROUP.css();
            }
        }
    },
    _doRenderHtml: function (r) {
    },
    _getTextAlign: function (alignment) {
        switch (alignment) {
            case Alignment.FAR:
                return "right";
            case Alignment.NEAR:
                return "left";
            default:
                return "center";
        }
    },
    $_getTop: function () {
        return this.model().styles().marginTop();
    },
    $_getMiddle: function () {
        var s = this.model().styles();
        return s.marginTop() + (this._measuredHeight - s.marginVert()) / 2;
    },
    $_getBottom: function () {
        return this._measuredHeight - this.model().styles().marginBottom();
    },
    $_getLeft: function () {
        return this.model().styles().marginLeft();
    },
    $_getCenter: function () {
        var s = this.model().styles();
        return s.marginLeft() + (this._measuredWidth - s.marginHorz()) / 2;
    },
    $_getRight: function () {
        return this._measuredWidth - this.model().styles().marginRight();
    },
    $_topHeight: function () {
        var s = this.model().styles();
        return s.marginTop() + (this._measuredHeight - s.marginVert()) / 2;
    },
    $_bottomHeight: function () {
        var s = this.model().styles();
        return s.marginBottom() + (this._measuredHeight - s.marginVert()) / 2;
    },
    $_leftWidth: function () {
        var s = this.model().styles();
        return s.marginLeft() + (this._measuredWidth - s.marginHorz()) / 2;
    },
    $_rightWidth: function () {
        var s = this.model().styles();
        return s.marginRight() + (this._measuredWidth - s.marginHorz()) / 2;
    },
    _layoutChild: function (child, x, y, w, h) {
        var t,
            m = child.model(),
            p = m._parent && m._parent.itemLeft ? m._parent : null,
            left = this.$_getSize(m.left(), (p && p.itemLeft())),
            right = this.$_getSize(m.right(), (p && p.itemRight())),
            top = this.$_getSize(m.top(), (p && p.itemTop())),
            bottom = this.$_getSize(m.bottom(), (p && p.itemBottom())),
            width = m.width(),
            height = m.height(),
            wChild = child._measuredWidth,
            hChild = child._measuredHeight;
        if (width && !width.fixed()) {
            wChild = width.getSize(w);
        }
        if (height && !height.fixed()) {
            hChild = height.getSize(h);
        }
        if (t = m.maxWidth()) {
            wChild = Math.min(wChild, t.getSize(w));
        }
        if (t = m.minWidth()) {
            wChild = Math.max(wChild, t.getSize(w));
        }
        if (t = m.maxHeight()) {
            hChild = Math.min(hChild, t.getSize(h));
        }
        if (t = m.minHeight()) {
            hChild = Math.max(hChild, t.getSize(h));
        }
        if (left && right) {
            x += (t = left.getSize(w));
            wChild = w - right.getSize(w) - t;
        } else if (left) {
            x += left.getSize(w);
        } else if (right) {
            x = x + w - wChild - right.getSize(w);
        } else if (wChild != w) {
            x += (w - wChild) / 2;
        }
        if (top && bottom) {
            y += (t = top.getSize(h));
            hChild = h - bottom.getSize(h) - t;
        } else if (top) {
            y += top.getSize(h);
        } else if (bottom) {
            y = y + h - hChild - bottom.getSize(h);
        } else if (hChild != h) {
            y += (h - hChild) / 2;
        }
        child.setBoundsI(x, y, Math.max(0, wChild), Math.max(0, hChild));
        child.layoutItems();
        return child;
    },
    $_getSize: function (sz, psz) {
        if (sz === undefined) return psz;
        return sz;
    }
}, {
    DESIGN_BORDER: new SolidPen(0x10000000),
    DESIGN_BORDER_DARK: new SolidPen(0x20000000),
    DESIGN_BORDER_GROUP: new SolidPen(0x300044ff),
    EMPTY_BACKGROUND: new SolidBrush(0xfff8f8f8),
    EMPTY_BORDER: new SolidPen('#20000000', 1, 'dashed'),
    EMPTY_COLOR: new SolidBrush(0xffb0b0b0)
});
/** @abstract */
var PrintItemContainerElement = defineClass("PrintItemContainerElement", PrintElement, {
    init: function (dom, name, model, printing) {
        this._super(dom, name, model, printing);
        this.addElement(this._rootView = new LayerElement(dom, "rootView"));
        this.addElement(this._feedbackView = new LayerElement(dom, "feedbackView"))
    },
    itemViewCount: function () {
        return this._rootView.childCount();
    },
    getItemViewAt: function (index) {
        return this._rootView.getChild(index);
    },
    addFeedback: function (view) {
        if (view && !this._feedbackView.contains(view)) {
            this._feedbackView.addElement(view);
            return view;
        }
        return null;
    },
    removeFeedback: function (view) {
        return this._feedback.removeElement(view);
    },
    getLower: function (child) {
    },
    getUpper: function (child) {
    },
    getRight: function (child) {
    },
    getLeft: function (child) {
    },
    getFirst: function () {
    },
    getLast: function () {
    },
    isContainer: function () {
        return true;
    },
    layoutItems: function (force) {
        var w = this.width(),
            h = this.height();
        this._rootView.setBounds(0, 0, w, h);
        this._feedbackView.setBounds(0, 0, w, h);
        this._super(force);
    },
    _addItemView: function (view) {
        return this._rootView.addElement(view);
    },
    _clearItemViews: function () {
        this._rootView.clear();
    },
    _hideAllItems: function () {
        this._rootView.hideAll();
    }
});
var PrintItemElement = defineClass("PrintItemElement", PrintElement, {
    init: function (dom, name, model, printing) {
        this._super(dom, name, model, printing);
        this._numberFormatter = null;
        this._datetimeWriter = null;
        this._booleanFormatter = null;
    },
    numberFormat: null,
    datetimeFormat: null,
    booleanFormat: null,
    keepSpaces: false,
    setNumberFormat: function (value) {
        if (value != this._numberFormat) {
            this._numberFormat = value;
            if (value) {
                this._numberFormatter = new DecimalFormatter(value);
            } else {
                this._numberFormatter = null;
            }
            this.invalidate();
        }
    },
    setDatetimeFormat: function (value) {
        if (value != this._datetimeFormat) {
            this._datetimeFormat = value;
            if (value) {
                this._datetimeWriter = new DateTimeWriter(value);
            } else {
                this._datetimeWriter = null;
            }
            this.invalidate();
        }
    },
    setBooleanFormat: function (value) {
        if (value != this._booleanFormat) {
            this._booleanFormat = value;
            if (value) {
                this._boolFormatter = new BooleanFormatter(value);
            } else {
                this._boolFormatter = null;
            }
            this.invalidate();
        }
    },
    setKeepSpaces: function (value) {
        if (value != this._keepSpaces) {
            this._keepSpaces = value;
            this.invalidate();
        }
    },
    numberFormatter: function () {
        return this._numberFormatter;
    },
    booleanFormatter: function () {
        return this._boolFormatter;
    },
    datetimeWriter: function () {
        return this._datetimeWriter || DateTimeWriter.Default;
    },
    isContainer: function () {
        return false;
    },
    getItemView: function (item) {
        if (item === this._model.header()) {
            return this.$_headerView;
        }
        if (item === this._model.footer()) {
            return this.$_footerView;
        }
    },
    resetPageValue: function (total, page) {
    },
    designParent: function () {
        return this.$_designParent || this._super();
    },
    prepareElement: function (m) {
        m.prepareStyles();
        this._super(m);
    },
    _getElementStyles: function (model) {
        return model._styles;
    },
    _doUpdateStyles: function (model, styles) {
        this._super(model, styles);
        this.setNumberFormat(styles.numberFormat());
        this.setDatetimeFormat(styles.datetimeFormat());
        this.setBooleanFormat(styles.booleanFormat());
        this.setKeepSpaces(styles.keepSpaces());
    },
    _doDrawBorders: function (g, r, printing) {
        if (this._printing) {
        } else {
            g.drawRectI(null, PrintElement.DESIGN_BORDER, r);
        }
    },
    getEditProp: function () {
        return "text";
    },
    getEditDataProp: function () {
        return "data";
    },
    _getSpacedText: function (s) {
        if (s && this._keepSpaces) {
            return s.replace(_spaceReg2, '&nbsp;');
        }
        return s;
    }
});
var PrintDummyElement = defineClass("PrintDummyElement", PrintItemElement, {
    init: function (dom, model, printing) {
        this._super(dom, "printDummyView", model, printing);
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
        return new Size(0, 0);
    },
    _doRender: function (g, r) {
        var styles = this._model._styles,
            fill = styles.background();
        fill && g.drawRectI(fill, null, r);
    },
    _doRenderHtml: function (r) {
    }
});
var PrintLabelElement = defineClass("PrintLabelElement", PrintItemElement, {
    init: function (dom, model, printing) {
        this._super(dom, "printLabelView", model, printing);
        this._text = null;
        this._font = null;
    },
    canEdit: function () {
        return true;
    },
    getEditText: function () {
        return this._model.text();
    },
    _doUpdateStyles: function (model, styles) {
        this._super(model, styles);
        this._shape = ShapeDrawing.getShape(this, styles.shapeName());
        if (this._shape) {
            this._shapeLocation = styles.shapeLocation();
            this._shapeAlignment = styles.shapeAlignment();
            this._shapeOffset = styles.shapeOffset();
            this._shapePadding = styles.shapePadding();
            this._shapeSize = styles.shapeSize();
            this._shapeScaleX = styles.shapeScaleX();
            this._shapeScaleY = styles.shapeScaleY();
            this._shapeColor = styles.shapeColor();
            this._shapeBorder = styles.shapeBorder();
        }
    },
    _doMeasure: function (hintWidth, hintHeight) {
        var sz, szShape, t, b,
            m = this._model,
            styles = m._styles,
            s = this._text = this._getSpacedText(this._getText(m, styles)),
            shape = this._shape,
            loc = this._shapeLocation;
        if (s && (!shape || loc != IconLocation.CENTER)) {
            this._font = styles.font();
            sz = this._calcTextRect(null, this._font, s, 0, 0, hintWidth, hintHeight, "left", "top", styles.textWrap());
            sz.height++;
            /*
            if ((t = m.leftSpace()) && t.fixed()) {
                sz.width += t.getSize(hintWidth);
            }
            if ((t = m.rightSpace()) && t.fixed()) {
                sz.width += t.getSize(hintWidth);
            }
            if ((t = m.topSpace()) && t.fixed()) {
                sz.height += t.getSize(hintHeight);
            }
            if ((t = m.bottomSpace()) && t.fixed()) {
                sz.height += t.getSize(hintHeight);
            }
            */
        } else {
            sz = { width: 0, height: 0 };
        }
        if (shape) {
            this._shapeSize = szShape = this.$_getSize(this._shapeSize, _int(styles.fontSize() * 1));// Math.min(sz.width, sz.height));
            if (!isNaN(szShape.w)) {
                b = this._shapeBorder ? _int((this._shapeBorder.width() + 1) / 2) : 0;
                if (IconLocation.isCenter(loc)) {
                    sz.width = Math.max(sz.width, szShape.w + b);
                    sz.height = Math.max(sz.height, szShape.h + b);
                } else if (IconLocation.isVert(loc)) {
                    sz.height += szShape.h + b + this._shapePadding + this._shapeOffset;
                } else {
                    sz.width += szShape.w + b + this._shapePadding + this._shapeOffset;
                }
            }
        }
        sz.width += styles.paddingHorz();
        sz.height += styles.paddingVert();
        return sz;
    },
    _doRender: function (g, r) {
        var m = this._model,
            styles = m._styles,
            fill = styles.background();
        fill && g.drawRectI(fill, null, r);
        styles.deflatePaddings(r);
        g.drawTextRect(this._font, styles.color(), this._text, r, this._getTextAlign(styles.textAlignment()), this._getLineAlign(styles.lineAlignment()));
    },
    _doRenderHtml: function (r) {
        var cx, cy, cw, ch,
            x, y, w, h, shapeOff, shapeAlign, shapeGap, loc, tr, dx, dy,
            m = this._model,
            styles = m._styles,
            span = this.$_prepareSpan(),
            s = this._text,
            align = styles.textAlignment(),
            valign = styles.lineAlignment(),
            shape = this._shape;
        styles.deflatePaddings(r);
        /*
        if (s) {
            var t;
            if ((t = m.leftSpace()) && t.fixed()) {
                r.leftBy(t.size());
            }
            if ((t = m.rightSpace()) && t.fixed()) {
                r.width -= t.size();
            }
            if ((t = m.topSpace()) && t.fixed()) {
                r.topBy(t.size());
            }
            if ((t = m.bottomSpace()) && t.fixed()) {
                r.height -= t.size();
            }
        }
        */
        cx = r.x;
        cy = r.y;
        cw = r.width;
        ch = r.height;
        if (shape && !isNaN(this._shapeSize.w)) {
            x = cx;
            y = cy;
            w = this._shapeSize.w;
            h = this._shapeSize.h;
            shapeOff = this._shapeOffset;
            shapeAlign = this._shapeAlignment;
            shapeGap = this._shapePadding;
            loc = this._shapeLocation;
            switch (loc) {
                case IconLocation.RIGHT:
                case IconLocation.RIGHT_SIDE:
                    x = r.right() - w - shapeOff;
                    switch (shapeAlign) {
                        case Alignment.CENTER:
                            y += (ch - h) / 2;
                            break;
                        case Alignment.FAR:
                            y += ch - h;
                            break;
                    }
                    cw -= shapeOff + w + shapeGap;
                    if (loc === IconLocation.RIGHT && s) {
                        switch (align) {
                            case Alignment.NEAR:
                                tr = this._calcTextRect(null, this._font, s, 0, 0, cw, ch, "left", "top", styles.textWrap());
                                dx = cw - tr.width;
                                if (dx > 0) {
                                    x -= dx;
                                }
                                break;
                            case Alignment.FAR:
                                break;
                            case Alignment.CENTER:
                                tr = this._calcTextRect(null, this._font, s, 0, 0, cw, ch, "left", "top", styles.textWrap());
                                dx = _int((cw - tr.width) / 2);
                                if (dx > 0) {
                                    x -= dx;
                                    cx = x - shapeGap - tr.width;
                                    cw = tr.width;
                                }
                                break;
                        }
                    }
                    break;
                case IconLocation.TOP:
                case IconLocation.TOP_SIDE:
                    y += shapeOff;
                    switch (shapeAlign) {
                        case Alignment.CENTER:
                            x += (cw - w) / 2;
                            break;
                        case Alignment.FAR:
                            x += cw - w;
                            break;
                    }
                    dy = shapeOff + h + shapeGap;
                    cy += dy;
                    ch -= dy;
                    if (loc === IconLocation.TOP && s) {
                        switch (valign) {
                            case Alignment.NEAR:
                                break;
                            case Alignment.FAR:
                                tr = this._calcTextRect(null, this._font, s, 0, 0, cw, ch, "left", "top", styles.textWrap());
                                dy = ch - tr.height;
                                if (dy > 0) {
                                    y += dy;
                                }
                                break;
                            case Alignment.CENTER:
                                tr = this._calcTextRect(null, this._font, s, 0, 0, cw, ch, "left", "top", styles.textWrap());
                                dy = _int((ch - tr.height) / 2);
                                if (dy > 0) {
                                    y += dy;
                                    cy = y + h + shapeGap;
                                    ch = tr.height;
                                }
                                break;
                        }
                    }
                    break;
                case IconLocation.BOTTOM:
                case IconLocation.BOTTOM_SIDE:
                    y = r.bottom() - h - shapeOff;
                    switch (shapeAlign) {
                        case Alignment.CENTER:
                            x += (cw - w) / 2;
                            break;
                        case Alignment.FAR:
                            x += cw - w;
                            break;
                    }
                    ch -= shapeOff + h + shapeGap;
                    if (loc === IconLocation.BOTTOM && s) {
                        switch (valign) {
                            case Alignment.NEAR:
                                tr = this._calcTextRect(null, this._font, s, 0, 0, cw, ch, "left", "top", styles.textWrap());
                                dy = ch - tr.height;
                                if (dy > 0) {
                                    y -= dy;
                                }
                                break;
                            case Alignment.FAR:
                                break;
                            case Alignment.CENTER:
                                tr = this._calcTextRect(null, this._font, s, 0, 0, cw, ch, "left", "top", styles.textWrap());
                                dy = _int((ch - tr.height) / 2);
                                if (dy > 0) {
                                    y -= dy;
                                    cy = y - shapeGap - tr.height;
                                    ch = tr.height;
                                }
                                break;
                        }
                    }
                    break;
                case IconLocation.LEFT:
                case IconLocation.LEFT_SIDE:
                    x += shapeOff;
                    switch (shapeAlign) {
                        case Alignment.CENTER:
                            y += (ch - h) / 2;
                            break;
                        case Alignment.FAR:
                            y += ch - h;
                            break;
                    }
                    dx = shapeOff + w + shapeGap;
                    cx += dx;
                    cw -= dx;
                    if (loc === IconLocation.LEFT && s) {
                        switch (align) {
                            case Alignment.NEAR:
                                break;
                            case Alignment.FAR:
                                tr = this._calcTextRect(null, this._font, s, 0, 0, cw, ch, "left", "top", styles.textWrap());
                                dx = cw - tr.width;
                                if (dx > 0) {
                                    x += dx;
                                }
                                break;
                            case Alignment.CENTER:
                                tr = this._calcTextRect(null, this._font, s, 0, 0, cw, ch, "left", "top", styles.textWrap());
                                dx = _int((cw - tr.width) / 2);
                                if (dx > 0) {
                                    x += dx;
                                    cx = x + w + shapeGap;
                                    cw = tr.width;
                                }
                                break;
                        }
                    }
                    break;
                case IconLocation.CENTER:
                    x += (cw - w) / 2;
                    y += (ch - h) / 2;
                    s = null;
                    break;
                case IconLocation.CENTER_BACK:
                    x += (cw - w) / 2;
                    y += (ch - h) / 2;
                    break;
                default:
                    shape = null;
                    break;
            }
            if (shape) {
                tr = tr || new Rectangle();
                tr.set(_int(x), _int(y), _int(w), _int(h));
                var g = this.$_getGraphics(true);
                shape.draw(g, tr, this._shapeColor, this._shapeBorder, this._shapeRotate);
            }
        }
        if (s) {
            Dom.renderTextBounds(span, this._font, styles.color(), s, cx, cy, cw, ch,
                this._getTextAlign(align), this._getLineAlign(valign), styles.textWrap());
        }
    },
    resetPageValue: function (total, page) {
        var s,
            m = this.model();
        if (m.hasPageValue()) {
            s = _toStr(m._pageNo ? page + 1 : total);
            if (s != this._text) {
                this._resetText = s;
            }
        }
    },
    _getText: function (model, styles) {
        if (this._resetText) {
            return this._resetText;
        }
        var v = model.getValue(),
            s = '';
        if (v !== undefined) {
            if (typeof v === "number") {
                s += this._numberFormatter ? this._numberFormatter.format(v) : v;
            } else if (_isDate(v)) {
                s += this._datetimeWriter ? this._datetimeWriter.getText(v) : v;
            } else if (typeof v === "boolean") {
                s = this._booleanFormatter ? this._booleanFormatter.formatValue(v) : v;
            } else {
                s += v;
            }
        } else {
            s += model.displayText();
        }
            s = _toStr(styles.prefix()) + s + _toStr(styles.suffix());
        return s;
    },
    $_getSize: function (shapeSize, hintSize) {
        var sz = { w: 0, h: 0},
            fs = shapeSize;
        if (fs) {
            sw = fs.getDimension(hintSize);
            sh = fs.getDimension(hintSize);
        } else {
            sw = hintSize;// * this._sizeRate;
            sh = hintSize;// * this._sizeRate;
        }
        sz.w = sw * (isNaN(this._shapeScaleX) ? 1 : this._shapeScaleX);
        sz.h = sh * (isNaN(this._shapeScaleY) ? 1 : this._shapeScaleY);
        return sz;
    },
    $_prepareItemSpan: function (index) {
        if (!this._spans) {
            this._spans = [];
        }
        var span = this._spans[index];
        if (!span) {
            this._spans[index] = span = document.createElement("span");
            span.style.position = "absolute";
        }
        !span.parentNode && this._dom.appendChild(span);
        return span;
    },
    _renderTextBoundsEx: function (g/* span */, text, font, fill, x, y, width, height, align, valign, wrap) {
        if (this._dom) {
            g = g;
            Dom.renderTextBounds(g, font, fill, text, x, y, width, height, align, valign, wrap);
        } else {
            switch (wrap) {
                case TextWrap.EXPLICIT:
                    g.drawTextBoundsExplicit(font, fill, text, x, y, width, height, align, valign);
                    break;
                case TextWrap.NORMAL:
                    g.drawTextBoundsWrap(font, fill, text, x, y, width, height, align, valign);
                    break;
                default:
                    g.drawTextBounds(font, fill, text, x, y, width, height, align, valign);
                    break;
            }
        }
    },
    _renderTextBounds2: function (g, text, font, fill, x, y, width, height, align, valign, wrap) {
        if (this._dom) {
            var span = this.$_prepareSpan();
            Dom.renderTextBounds(span, font, fill, text, x, y, width, height, align, valign, wrap);
        } else {
            switch (wrap) {
                case TextWrap.EXPLICIT:
                    g.drawTextBoundsExplicit(font, fill, text, x, y, width, height, align, valign);
                    break;
                case TextWrap.NORMAL:
                    g.drawTextBoundsWrap(font, fill, text, x, y, width, height, align, valign);
                    break;
                default:
                    g.drawTextBounds(font, fill, text, x, y, width, height, align, valign);
                    break;
            }
        }
    }
});
var PrintValueElement = defineClass("PrintValueElement", PrintLabelElement, {
    init: function (dom, model, printing) {
        this._super(dom, model, printing);
        this._name = "printValueView";
    },
    _getText: function (model) {
        if (this._resetText) {
            return this._resetText;
        }
        var container = this.container();
        return model.displayText(container.valueRuntime(), container.printing());
    },
    resetPageValue: function (total, page) {
        var s,
            m = this.model();
        if (m.hasPageValue()) {
            s = _toStr(m._pageNo ? page + 1 : total);
            if (s != this._text) {
                this._resetText = s;
            }
        }
    },
});
var PrintSummaryElement = defineClass("PrintValueElement", PrintLabelElement, {
    init: function (dom, model, printing) {
        this._super(dom, model, printing);
        this._name = "printValueView";
    },
    setNumberFormat: function (value) {
        if (value != this._numberFormat) {
            this._numberFormat = value;
            if (value) {
                this._numberFormatter = new DecimalFormatter(value);
            } else {
                this._numberFormatter = null;
            }
            this.invalidate();
        }
    },
    _getText: function (model, styles) {
        var fmt,
            container = this.container(),
            v = model.getSummary(container.summaryRuntime(), container.printing()),
            s = _toStr(styles.prefix());
        if (isNaN(v)) {
            s += v;
        } else {
            if ((fmt = this._numberFormatter)) {
                s += fmt.format(v);
            } else {
                s += String(v);
            }
        }
        s += _toStr(styles.suffix());
        return s;
    }
});
var PrintImageElement = defineClass("PrintImageElement", PrintItemElement, {
    init: function (dom, model, printing) {
        this._super(dom, "printImageView", model, printing);
    },
    _doMeasure: function (hintWidth, hintHeight) {
        var m = this._model,
            styles = m._styles,
            sz = { width: styles.paddingHorz(), height: styles.paddingVert() };
        sz.width += m.imageWidth();
        sz.height += m.imageHeight();
        return sz;
    },
    _doRender: function (g, r) {
        var w, h,
            m = this._model,
            styles = m.styles(),
            img = this.container().getImage(m.imageUrl()),
            fill = styles.background();
        fill && g.drawRectI(fill, null, r);
        styles.deflatePaddings(r);
        if (img) {
            w = m.imageWidth() <= 0 ? img.width : m.imageWidth();
            h = m.imageHeight() <= 0 ? img.height : m.imageHeight();
            g.drawImage(img, r.x, r.y, w, h);
        }
    },
    _doRenderHtml: function (r) {
        var m = this._model;
        var url = m.url();
        if (url) {
            var styles = m.styles();
            var w, h;
            styles.deflatePaddings(r);
            var img = this._imageElt;
            if (!img) {
                img = this._imageElt = document.createElement('img');
                this._dom.appendChild(img);
            }
            img.src = url;
            img.width = w = m.imageWidth() <= 0 ? img.width : m.imageWidth();
            img.height = h = m.imageHeight() <= 0 ? img.height : m.imageHeight();
            var css = img.style;
            css.position = "absolute";
            css.padding = 0;
            css.margin = 0;
            css.border = "";
            css.left= (r.x + (r.width - w) / 2) + "px";
            css.top= (r.y + (r.height - h) / 2) + "px";
            this.container().$_pileImage(img);
        }
    }
});
var PrintHLineElement = defineClass("PrintHLineElement", PrintItemElement, {
    init: function (dom, model, printing) {
        this._super(dom, "hlineView", model, printing);
        this._dom.appendChild(this._lineElt = Dom.createElement("div", {
            position: "absolute",
            boxSizing: "border-box",
            padding: 0,
            margin: 0
        }));
    },
    _doMeasure: function (hintWidth, hintHeight) {
        var m = this._model,
            styles = m._styles,
            line = this._line = styles.line(),
            sz = { width: 0, height: line ? line.width() : 0 };
        sz.height += styles.paddingVert();
        return sz;
    },
    _doRender: function (g, r) {
    },
    _doRenderHtml: function (r) {
        var m = this._model,
            styles = m.styles(),
            elt = this._lineElt;
        elt.style.borderTop = this._line ? this._line.css() : "";
        r = styles.deflatePaddings(r.clone());
        Dom.setBounds(elt, r.x, r.y, r.width, r.height);
    }
});
var PrintVLineElement = defineClass("PrintVLineElement", PrintItemElement, {
    init: function (dom, model, printing) {
        this._super(dom, "vlineView", model, printing);
        this._dom.appendChild(this._lineElt = Dom.createElement("div", {
            position: "absolute",
            boxSizing: "border-box",
            padding: 0,
            margin: 0
        }));
    },
    _doMeasure: function (hintWidth, hintHeight) {
        var m = this._model;
            styles = m._styles;
            line = this._line = styles.line();
            sz = { width: line ? line.width() : 0, height: 0 };
        sz.width += styles.paddingHorz();
        return sz;
    },
    _doRender: function (g, r) {
    },
    _doRenderHtml: function (r) {
        var m = this._model,
            styles = m.styles(),
            elt = this._lineElt;
        elt.style.borderLeft = this._line ? this._line.css() : "";
        r = styles.deflatePaddings(r.clone());
        Dom.setBounds(elt, r.x, r.y, r.width, r.height);
    }
});
var PrintShapeElement = defineClass("PrintShapeElement", PrintItemElement, {
    init: function (dom, model, printing) {
        this._super(dom, "printShapeView", model, printing);
    },
    _doMeasure: function (hintWidth, hintHeight) {
        var m = this._model,
            styles = m._styles,
            sz = {};
        if (!isNaN(m.width())) {
            sz.width = m.width();
        } else {
            sz.width = 16;
        }
        if (!isNaN(m.height())) {
            sz.height = m.height();
        } else {
            sz.height = 16;
        }
        return sz;
    },
    _doRender: function (g, r) {
        var fs, cw, ch
            m = this._model,
            styles = m._styles,
            shape = ShapeDrawing.getShape(this, m.shapeName() || styles.shapeName());
        if (shape) {
            fs = styles.shapeSize();
            if (fs) {
                cw = fs.getDimension(r.width);
                ch = fs.getDimension(r.height);
                r.inflate(-(r.width - cw) / 2, -(r.height - ch) / 2);
            }
            shape.draw(g, r, styles.shapeColor(), styles.shapeBorder(), styles.shapeRotate());
        }
    },
    _doRenderHtml: function (r) {
        this._doRender(this.$_getGraphics(true, r), r);
    }
});
var PrintSvgElement = defineClass("PrintSvgElement", PrintItemElement, {
    init: function (dom, model, printing) {
        this._super(dom, "printSvgView", model, printing);
    },
    _doMeasure: function (hintWidth, hintHeight) {
        var m = this._model,
            styles = m._styles,
            img = this.container().getImage(m.imageUrl()),
            sz = {};
        if (!isNaN(m.width)) {
            sz.width = m.width;
        } else {
            sz.width = 16;
        }
        if (!isNaN(m.height)) {
            sz.height = m.height;
        } else {
            sz.height = 16;
        }
        return sz;
    },
    _doRender: function (g, r) {
    },
    _doRenderHtml: function (r) {
        this._doRender(this.$_getGraphics(true), r);
    }
});
var PrintCellView = defineClass("PrintCellView", UIElement, {
    init: function (dom, layer) {
        this._super(dom, "printCellView");
        this._layer = layer;
        if (this._css) {
        }
    },
    isLayer: function () {
        return this._layer;
    },
    _doRender: function (g, r) {
    },
    _doRenderHtml: function (r) {
    }
});
var PrintDesignCellView = defineClass("PrintDesignCellView", PrintCellView, {
    init: function (dom, layer) {
        this._super(dom, layer);
        this._dom.style.background = 'rgba(0, 0, 0, 0.03)';
    },
    designParent: function () {
        return this.parent();
    },
    designModel: function () {
        return this.parent().model();
    },
    isContainer: function () {
        return false;
    },
    getEditBounds: function () {
        var r = this.boundsByContainer();
        return r;
    },
    getEditProp: function () {
        return this.parent().getEditProp();
    },
    getEditDataProp: function () {
        return this.parent().getEditDataProp();
    }
});
/** @abstract */
var PrintGroupElement = defineClass("PrintGroupElement", PrintItemElement, {
    init: function (dom, name, model, printing) {
        this._super(dom, name || "printGroupView", model, printing);
        this._childMap = {};
        this._cellViews = [];
        this._childViews = [];
    },
    focusedCell: null,
    setFocusedCell: function (x, y) {
        var oldCell = this._focuedCell,
            cell = this._findCellAt(x, y);
        if (cell !== oldCell) {
            this._focusedCell = cell;
        }
    },
    getItemView: function (item) {
        return this._childMap[item.$_hash];
    },
    getLower: function (child) {
    },
    getUpper: function (child) {
    },
    getRight: function (child) {
    },
    getLeft: function (child) {
    },
    getFirst: function () {
        if (this.childCount() > 0) {
            return this.getChild(0).getChild(0);
        }
    },
    getLast: function () {
        var cnt = this.childCount();
        if (cnt > 0) {
            return this.getChild(cnt - 1).getChild(0);
        }
    },
    isContainer: function () {
        return true;
    },
    _doDrawHtmlBorders: function (r) {
        if (this.designTime() && !this._bordered && this.childCount() == 0) {
            this._back.style.border = '1px dashed #aaa';
        } else {
            this._super(r);
        }
    },
    _doDrawHtmlBack: function (back, r) {
        var s,
            m = this.model();
        if (!m) return;
        if (this.designTime() && m.empty()) {
            var css = this._back.style;
            _cssRect(css, r);
            css.background = PrintElement.EMPTY_BACKGROUND.css();
            s = this._getEmptyText();
            if (s) {
                span = this.$_prepareSpan();
                r.inflate(-4, -4);
                Dom.renderTextRect(span, this._font, PrintElement.EMPTY_COLOR, s, r, this._getTextAlign("near"), this._getLineAlign("top"));
                r.inflate(4, 4);
            }
        } else {
            this._super(back, r);
        }
    },
    resetPageValue: function (total, page) {
        if (this.model().hasPageValue()) {
            for (var i = 0, cnt = this.childCount(); i < cnt; i++) {
                this.getChild(i).getChild(0).resetPageValue(total, page);
            }
        }
    },
    _isValidItem: function (model, item) {
        return !!item;
    },
    _findCellAt: function (x, y) {
        var i, cell,
            cnt = this.count();
        for (i = 0; i < cnt; i++) {
            cell = this.getChild(i);
            if (cell.visible()) {
                if (cell.containsInBounds(x, y)) {
                    return cell;
                }
            }
        }
        return null;
    },
    _indexOfChild: function (child) {
        var i, cell,
            cnt = this.count();
        for (i = 0; i < cnt; i++) {
            cell = this.getChild(i);
            if (cell.getChild(0) === child) {
                return i;
            }
        }
        return -1;
    },
    _childAt: function (index) {
        return this.getChild(index).getChild(0);
    },
    _doUpdateStyles: function (model, styles) {
        this._super(model, styles);
        this._line = styles.line();
    },
    _updateChildStyles: function (model, child) {
    },
    _measureChild: function (index, view, model, hintWidth, hintHeight, force) {
        view.measure(hintWidth, hintHeight, force);
    },
    _measureChildren: function (hintWidth, hintHeight, force, simple) {
        var delegate, cnt, items, i, item, view, cell,
            printing = this._printing,
            m = this.model(),
            map = this._childMap,
            nChild = 0;
        this.hideAll();
        if (m instanceof PrintGroupItem) {
            delegate = this.container().delegate();
            cnt = m.count();
            items = m.ordered() ? m.getOrderedItems() : null;
            for (i = 0; i < cnt; i++) {
                item = items ? items[i] : m.getItem(i);
                if (this._isValidItem(m, item)) {
                    view = map[item.$_hash];
                    cell = this._cellViews[i];
                    if (!cell && !simple) {
                        cell = new PrintCellView(this._dom);
                        this._cellViews[i] = cell;
                        this.addElement(cell);
                    }
                    if (!view) {
                        view = this._createItemView(delegate, item, printing);
                        if (view) {
                            map[item.$_hash] = view;
                            this._childViews[i] = view;
                            simple ? this.addElement(view) : cell.addElement(view);
                        }
                    }
                    if (view) {
                        nChild++;
                        view.setVisible(true);
                        this._updateChildStyles(m, item);
                        this._measureChild(i, view, item, hintWidth, hintHeight, force);
                    }
                }
            }
        }
        return nChild;
    }
});
/** @abstract */
var PrintSectionElement = defineClass("PrintSectionElement", PrintItemContainerElement, {
    init: function (dom, name, model, printing) {
        this._super(dom, name, model, printing);
        this._childMap = {};
        this._layout = new PrintSectionLayout(this);
        this._layoutNeeded = !!model; // model이 지정되면 layout을 최초 실행하게 한다.
        model && model.addListener(this);
        this.setDesignVisible(true);
    },
    designHeight: 24,
    getItemView: function (item) {
        return this._childMap[item.$_hash];
    },
    invalidateLayout: function () {
        if (this.$_invalidateLayout()) {
            this.container().invalidateLayout();
        }
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
        if (force || this._layoutNeeded) {
            this._measureChildren(hintWidth, hintHeight, force);
        }
        return this._layout.measure(hintWidth, hintHeight);
    },
    _doLayoutItems: function (force, r) {
        if (force || this._layoutNeeded) {
            this._layout.layout(r);
            this._layoutNeeded = false;
        }
    },
    _doRender : function(g, r) {
        var s, fill,
            m = this.model(),
            styles = m.styles();
        if (this.designTime()) {
            if (m.empty()) {
                s = this._getEmptyText();
                if (s) {
                    r.inflate(-4, -4);
                    g.drawTextRect(null, SolidBrush.GRAY, s, r, TextAlign.LEFT, TextLayout.TOP);
                    r.inflate(4, 4);
                }
                g.drawRectI(PrintElement.EMPTY_BACKGROUND, null, r);
            } else {
                fill = styles.background();
                if (fill) {
                    g.drawRectI(fill, null, r);
                }
            }
        }
    },
    _doRenderHtml: function (r) {
        var s, fill, span,
            m = this.model(),
            styles = m.styles();
        if (this.designTime()) {
            if (m.empty()) {
                s = this._getEmptyText();
                if (s) {
                    span = this.$_prepareSpan();
                    r.inflate(-4, -4);
                    Dom.renderTextRect(span, this._font, PrintElement.EMPTY_COLOR, s, r, this._getTextAlign("near"), this._getLineAlign("top"));
                    r.inflate(4, 4);
                }
                css = this._back.style;
                _cssRect(css, r);
                css.background = PrintElement.EMPTY_BACKGROUND.css();
            } else {
                this.$_unprepareSpan();
                fill = styles.background();
                if (fill) {
                    css = this._back.style;
                    _cssRect(css, r);
                    css.background = fill.css();
                }
            }
        }
    },
    _doDrawBorders: function (g, r, printing) {
        if (printing) {
        } else {
            g.drawRectI(null, PrintElement.DESIGN_BORDER_DARK, r);
        }
    },
    _doDrawHtmlBorders: function (r) {
        if (this.designTime() && this.model().empty()) {
            this._border = PrintElement.EMPTY_BORDER;
        }
        this._super(r);
    },
    resetPageValue: function (total, page) {
        var m = this.model();
        if (m.hasPageValue()) {
            for (var i = 0, cnt = m.count(); i < cnt; i++) {
                var item = m.getItem(i);
                var view = this._childMap[item.$_hash];
                view.resetPageValue(total, page);
            }
        }
    },
    $_clearViews: function () {
        this._clearItemViews();
        this._childMap = {};
    },
    $_invalidateLayout: function () {
        if (!this._layoutNeeded) {
            this._layoutNeeded = true;
            return true;
        }
        return false;
    },
    _measureChildren: function (hintWidth, hintHeight, force) {
        var m = this.model();
        this._hideAllItems();
        if (m instanceof PrintSection) {
            var delegate = this.container().delegate();
            for (var i = 0, cnt = m.count(); i < cnt; i++) {
                var item = m.getItem(i);
                var view = this._childMap[item.$_hash];
                if (!view) {
                    view = delegate.getItemView(item, this._printing);
                    if (view) {
                        this._childMap[item.$_hash] = view;
                        this._addItemView(view);
                    }
                }
                if (view) {
                    view.setVisible(true);
                    view.measure(hintWidth, hintHeight, force);
                }
            }
        }
    },
    onPrintSectionChanged: function (model) {
        var container = this.container();
        container && container.invalidateLayout();
    }
}, {
});
var PrintSectionHeaderElement = defineClass("PrintSectionHeaderElement", PrintSectionElement, {
    init: function (dom, model, printing) {
        this._super(dom, "sectionHeaderView", model, printing);
    },
    _getEmptyText: function () {
        return "Section Header";
    }
});
var PrintSectionFooterElement = defineClass("PrintSectionFooterElement", PrintSectionElement, {
    init: function (dom, model, printing) {
        this._super(dom, "sectionFooterView", model, printing);
        this._background = new SolidBrush(0xfff0f0f0);
    },
    _getEmptyText: function () {
        return "Section Footer";
    }
});
var ReportHeaderElement = defineClass("ReportHeaderElement", PrintSectionElement, {
    init: function (dom, title, printing) {
        this._super(dom, "reportHeaderView", title, printing);
    },
    _getEmptyText: function () {
        return "Report header";
    }
});
var ReportFooterElement = defineClass("ReportFooterElement", PrintSectionElement, {
    init: function (dom, footer, printing) {
        this._super(dom, "reportFooterView", footer, printing);
        this._background = new SolidBrush(0xfff0f0f0);
    },
    _getEmptyText: function () {
        return "Report footer";
    }
});
var PageHeaderElement = defineClass("PageHeaderElement", PrintSectionElement, {
    init: function (dom, header, printing) {
        this._super(dom, "pageHeaderView", header, printing);
    },
    _getEmptyText: function () {
        return "Page header";
    }
});
var PageFooterElement = defineClass("PageFooterElement", PrintSectionElement, {
    init: function (dom, footer, printing) {
        this._super(dom, "pageFooterView", footer, printing);
    },
    _getEmptyText: function () {
        return "Page footer";
    }
});
var PageTitleElement = defineClass("PageTitleElement", PrintSectionElement, {
    init: function (dom, title, printing) {
        this._super(dom, "pageTitleView", title, printing);
    },
    _getEmptyText: function () {
        return "Page title";
    }
});
var PrintCanvas = defineClass("PrintCanvas", PrintGroupItem, {
    init: function () {
        this._super();
        this._styles.setSysDefault(new PrintStyles(null, "canvasDefault", {
            padding: 0
        }), false);
    },
    ordered: function () {
        return true;
    }
});
var PrintCanvasElement = defineClass("PrintCanvasElement", PrintGroupElement, {
    init: function (dom, model, printing) {
        this._super(dom, "printCanvasView", model, printing);
        this._childMap = {};
        this._layout = new PrintCanvasLayout(this);
        this._layoutNeeded = !!model; // model이 지정되면 layout을 최초 실행하게 한다.
    },
    _getEmptyText: function () {
        return "canvas";
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
        if (force || this._layoutNeeded) {
            this._measureChildren(hintWidth, hintHeight, force, true);
        }
        return this._layout.measure(hintWidth, hintHeight);
    },
    _doLayoutItems: function (force, bounds) {
        if (force || this._layoutNeeded) {
            this._layout.layout(bounds, force);
            this._layoutNeeded = false;
        }
    },
    _doRenderHtml: function (r) {
    }
});
var PrintBox = defineClass("PrintBox", PrintGroupItem, {
    init: function () {
        this._super();
    }
});
var PrintHBox = defineClass("PrintHBox", PrintBox, {
    init: function () {
        this._super();
        this._styles.setSysDefault(new PrintStyles(null, "hboxDefault", {
            padding: 0,
            line: null
        }), false);
    },
    cellWidths: null,
    setCellWidths: function (value) {
        if (value != this._cellWidths) {
            this._cellWidths = PrintDimension.createArray(value);
        }
    }
});
var PrintVBox = defineClass("PrintVBox", PrintBox, {
    init: function () {
        this._super();
        this._styles.setSysDefault(new PrintStyles(null, "vboxDefault", {
            padding: 0,
            line: null
        }), false);
    },
    cellHeights: null,
    setCellHeights: function (value) {
        if (value != this._cellHeights) {
            this._cellHeights = PrintDimension.createArray(value);
        }
    }
});
var PrintDBox = defineClass("PrintDBox", PrintBox, {
    init: function () {
        this._super();
        this._styles.setSysDefault(new PrintStyles(null, "dboxDefault", {
            padding: 0,
            line: "#555"
        }), false);
    },
    diagonal: EnumProp(BoxDiagonal, BoxDiagonal.DEFAULT)
});
/** @abstract */
var PrintBoxElement = defineClass("PrintBoxElement", PrintGroupElement, {
    init: function (dom, name, model, printing) {
        this._super(dom, name, model, printing);
    }
});
var PrintHBoxElement = defineClass("PrintHBoxElement", PrintBoxElement, {
    init: function (dom, model, printing) {
        this._super(dom, "printHBoxView", model, printing);
    },
    _getEmptyText: function () {
        return "hbox";
    },
    _measureChild: function (index, view, model, hintWidth, hintHeight, force) {
        var w = model.width();
        if (!w || !w.fixed()) {
            var cellWidths = this.model().cellWidths();
            if (cellWidths && (w = cellWidths[index]) && w.fixed()) {
                hintWidth = Math.min(hintWidth, w.size());
            }
        }
        this._super(index, view, model, hintWidth, hintHeight, force);
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
        var i, cell, child, item, hview, t, cw, z, relWidths, h, w, wItem, pts,
            m = this.model(),
            styles = m.styles(),
            cellWidths = m._cellWidths || [],
            sz = { width: 0, height: 0},
            cnt = this._measureChildren(hintWidth, hintHeight, force);
        this._relWidthSum = 0;
        this._absCount = 0;
        relWidths = this._relWidths = [];
        if (cnt > 0) {
            h = 0;
            w = 0;
            wItem = 0;
            pts = this._points = [w];
            for (i = 0; i < cnt; i++) {
                child = this.getCellChild(i);
                item = child.model();
                cw = cellWidths[i];
                if (cw) {
                    if (cw.fixed()) {
                        w += z = cw.size();
                        wItem += z;
                        this._absCount++;
                    } else {
                        relWidths.push(i);
                        this._relWidthSum += cw.size();
                        wItem += child._measuredWidth;
                    }
                } else {
                    w += z = child._measuredWidth;
                    wItem += z;
                    w += z = PrintDimension.getFixedI(item.left()) + PrintDimension.getFixedI(item.right())
                    wItem += z;
                }
                pts.push(w);
                hview = child._measuredHeight;
                hview += PrintDimension.getFixedI(item.top()) + PrintDimension.getFixedI(item.bottom());
                h = Math.max(h, hview);
            }
            if (this._line) {
                t = this._line.width();
                wItem += t * (cnt - 1);
                for (i = 1; i < cnt; i++) {
                    pts[i] += i * t;
                }
                pts[cnt] += t * cnt;
            }
            sz.width = wItem;
            sz.height = h;
        }
        sz.width += styles.paddingHorz();
        sz.height += styles.paddingVert();
        return sz;
    },
    _doLayoutItems: function (force, bounds) {
        var cnt = this.childCount();
        if (!cnt) return;
        var i, j, len, widths, cell, child, delta, dw, w, x2, sum,
            m = this.model(),
            styles = m.styles(),
            r = styles.deflatePaddings(bounds.clone()),
            cellWidths = m._cellWidths,
            relWidths = this._relWidths,
            relWidthSum = this._relWidthSum,
            absCount = this._absCount,
            wLine = this._line ? this._line.width() : 0,
            wView = r.width,
            pts = this._points,
            wItems = pts[cnt],
            x = r.x,
            delta = wView - wItems;
        if (delta > 0) {
            if (relWidthSum > 0) {
                len = relWidths.length;
                delta += len * wLine;
                widths = [];
                for (i = 1; i <= cnt; i++) {
                    widths.push(pts[i] - pts[i - 1]);
                }
                if (m.isFillWidth()) {
                    dw = delta;
                    for (i = 0; i < len - 1; i++) {
                        j = relWidths[i];
                        w = cellWidths[j];
                        widths[j] = w = delta * w.size() / relWidthSum;
                        dw -= w;
                    }
                    widths[relWidths[i]] = dw;
                } else {
                    for (i = 0; i < len; i++) {
                        j = relWidths[i];
                        w = cellWidths[j];
                        widths[j] = w.getSize(delta);
                    }
                }
                for (i = 0; i < cnt; i++) {
                    pts[i + 1] = pts[i] + widths[i];
                }
            } else if (m.isFillWidth()) {
                if (absCount > 0 && m.fillWidth() !== GroupFillMode.ALL) {
                    if (absCount < cnt) {
                        widths = [];
                        for (i = 1; i <= cnt; i++) {
                            widths.push(pts[i] - pts[i - 1]);
                        }
                        dw = delta / (cnt - absCount);
                        for (i = 0; i < cnt; i++) {
                            cw = cellWidths[i];
                            if (!cw) { // 명시적으로 지정하지 않은 셀인 경우에만
                                widths[i] += dw;
                            }
                        }
                        for (i = 0; i < cnt; i++) {
                            pts[i + 1] = pts[i] + widths[i];
                        }
                    }
                } else {
                    dw = delta / cnt;
                    for (i = 1; i < cnt; i++) {
                        pts[i] = pts[i] + dw * i;
                    }
                }
            }
            if (m.isFillWidth()) {
                pts[cnt] = r.width;
            }
        }
        x = pts[0];
        for (i = 0; i < cnt; i++) {
            cell = this.getChild(i);
            child = cell.getChild(0);
            w = _int(pts[i + 1] - x + 0 - wLine);
            cell.setVisible(w > 0);
            if (cell.visible()) {
                cell.setBoundsI(r.x + x, r.y, w, r.height);
                this._layoutChild(child, 0, 0, w, r.height);
            }
            pts[i + 1] = x += w + wLine;
        }
        pts[cnt] = Math.min(r.width, pts[cnt]);
    },
    _doRenderHtml: function (r) {
        var cnt = this.childCount();
        if (cnt > 1) {
            var tr, g, wLine, pts, y1, y2, x1, i,
                m = this.model(),
                styles = m.styles(),
                line = this._line;
            if (line) {
                tr = new Rectangle(0, 0, r.width, r.height);
                g = this.$_getBackGraphics(true, tr);
                wLine = line.width();
                pts = this._points;
                y1 = tr.y;
                y2 = tr.bottom();
                x1 = tr.x + styles.paddingLeft();
                for (i = 1; i < cnt; i++) {
                    g.drawVLineI(line, x1 + pts[i] - wLine, y1, y2);
                }
            }
        }
    },
    getRight: function (child) {
        var i = this._indexOfChild(child);
        if (i < this.count() - 1) {
            return this._childAt(Math.max(0, i + 1));
        }
    },
    getLeft: function (child) {
        var i = this._indexOfChild(child);
        if (i > 0) {
            return this._childAt(Math.max(0, i - 1));
        }
    }
});
var PrintVBoxElement = defineClass("PrintVBoxElement", PrintBoxElement, {
    init: function (dom, model, printing) {
        this._super(dom, "printVBoxView", model, printing);
    },
    _getEmptyText: function () {
        return "vbox";
    },
    _measureChild: function (index, view, model, hintWidth, hintHeight, force) {
        var h = model.height();;
        if (!h || !h.fixed()) {
            var cellHeights = this.model().cellHeights();
            if (cellHeights && (h = cellHeights[index]) && h.fixed()) {
                hintHeight = Math.min(hintHeight, h.size());
            }
        }
        this._super(index, view, model, hintWidth, hintHeight, force);
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
        var i, cell, child, item, wview, t, rh, z, relHeights, h, hItem, w, pts,
            m = this.model(),
            styles = m.styles(),
            cellHeights = m._cellHeights || [],
            sz = { width: 0, height: 0 },
            cnt = this._measureChildren(hintWidth, hintHeight, force);
        this._relHeightSum = 0;
        this._absCount = 0;
        if (cnt > 0) {
            relHeights = this._relHeights = [];
            h = 0;
            hItem = 0;
            w = 0;;
            pts = this._points = [h];
            for (i = 0; i < cnt; i++) {
                child = this.getCellChild(i);
                item = child.model();
                rh = cellHeights[i];
                if (rh) {
                    if (rh.fixed()) {
                        h += z = rh.size();
                        hItem += z;
                        this._absCount++;
                    } else {
                        relHeights.push(i);
                        this._relHeightSum += rh.size();
                        hItem += child._measuredHeight;
                    }
                } else {
                    h += z = child._measuredHeight;
                    hItem += z;
                    h += z = PrintDimension.getFixedI(item.top()) + PrintDimension.getFixedI(item.bottom())
                    hItem += z;
                }
                pts.push(h);
                wview = child._measuredWidth;
                wview += PrintDimension.getFixedI(item.left()) + PrintDimension.getFixedI(item.right());
                w = Math.max(w, wview);
            }
            if (this._line) {
                t = this._line.width();
                hItem += t * (cnt - 1);
                for (i = 1; i < cnt; i++) {
                    pts[i] += i * t;
                }
                pts[cnt] += t * cnt;
            }
            sz.width = w;
            sz.height = hItem;
        }
        sz.width += styles.paddingHorz();
        sz.height += styles.paddingVert();
        return sz;
    },
    _doLayoutItems: function (force, bounds) {
        var cnt = this.childCount();
        if (!cnt) return;
        var i, j, len, heights, cell, child, delta, dh, h, y2, sum,
            m = this.model(),
            styles = m.styles(),
            r = styles.deflatePaddings(bounds.clone()),
            cellHeights = m._cellHeights,
            relHeights = this._relHeights,
            wLine = this._line ? this._line.width() : 0,
            hView = r.height,
            pts = this._points,
            hItems = pts[cnt],
            y = r.y;
        delta = hView - hItems;
        if (delta > 0) {
            if (this._relHeightSum > 0) {
                len = relHeights.length;
                heights = [];
                for (i = 1; i <= cnt; i++) {
                    heights.push(pts[i] - pts[i - 1]);
                }
                if (m.isFillHeight()) {
                    dh = delta;
                    for (i = 0; i < len - 1; i++) {
                        j = relHeights[i];
                        h = cellHeights[j];
                        heights[j] = h = delta * h.size() / this._relHeightSum;
                        dh -= h;
                    }
                    heights[relHeights[i]] = dh;
                } else {
                    for (i = 0; i < len; i++) {
                        j = relHeights[i];
                        h = cellHeights[j];
                        heights[j] = h = h.getSize(delta);
                    }
                }
                for (i = 0; i < cnt; i++) {
                    pts[i + 1] = pts[i] + heights[i];
                }
            } else if (m.isFillHeight()) {
                if (this._absCount > 0 && m.fillHeight() !== GroupFillMode.ALL) {
                    if (this._absCount < cnt) {
                        heights = [];
                        for (i = 1; i <= cnt; i++) {
                            heights.push(pts[i] - pts[i - 1]);
                        }
                        delta /= cnt - this._absCount;
                        for (i = 0; i < cnt; i++) {
                            rh = cellHeights[i];
                            if (!rh) {
                                heights[i] += delta;
                            }
                        }
                        for (i = 0; i < cnt; i++) {
                            pts[i + 1] = pts[i] + heights[i];
                        }
                    }
                } else {
                    delta /= cnt;
                    for (i = 1; i < cnt; i++) {
                        pts[i] = pts[i] + delta * i;
                    }
                }
            }
            if (m.isFillHeight()) {
                pts[cnt] = r.height;
            }
        }
        y = pts[0];
        for (i = 0; i < cnt; i++) {
            cell = this.getChild(i);
            child = cell.getChild(0);
            h = _int(pts[i + 1] - pts[i] + 0 - wLine);
            cell.setVisible(h > 0);
            if (cell.visible()) {
                cell.setBoundsI(r.x, r.y + y, r.width, h);
                this._layoutChild(child, 0, 0, r.width, h);
            }
            pts[i + 1] = y += h + wLine;
        }
        pts[cnt] = Math.min(r.height, pts[cnt]);
    },
    /*
    _doMeasure: function (hintWidth, hintHeight, force) {
        var m = this.model();
        var styles = m.styles();
        var sz = { width: 0, height: 0 };
        var cnt = this._measureChildren(hintWidth, hintHeight, force);
        if (cnt > 0) {
            var w = 0;
            var h = this._line ? this._line.width() * (cnt - 1) : 0;
            var i, child;
            for (i = 0; i < cnt; i++) {
                child = this.getChild(i);
                h += child._measuredHeight;
                w = Math.max(w, child._measuredWidth);
            }
            sz.width = w;
            sz.height = h;
        } else if (this.designTime()) {
            sz.width = 0;
            sz.height = 0;
        }
        sz.width += styles.paddingHorz();
        sz.height += styles.paddingVert();
        return sz;
    },
    _doLayoutItems: function (force, rc) {
        var cnt = this.childCount();
        if (!cnt) return;
        var m = this.model();
        var styles = m.styles();
        var wLine = this._line ? this._line.width() : 0;
        var r = styles.deflatePaddings(rc.clone());
        var hView = r.height - wLine * (cnt - 1);
        var hItems = 0;
        var y = r.y;
        var i, child, delta, dh, h, y2;
        for (i = 0; i < cnt; i++) {
            child = this.getChild(i);
            hItems += child._measuredHeight;
        }
        delta = hView - hItems;
        if (delta > 0) {
            y2 = y;
            dh = delta / cnt;
            for (i = 0; i < cnt - 1; i++) {
                child = this.getChild(i);
                h = _int(child._measuredHeight + dh);
                this._layoutChild(child, r.x, y2, r.width, h);
                y2 += h + wLine;
            }
            child = this.getChild(i);
            this._layoutChild(child, r.x, y2, r.width, y + hView - y2);
        } else {
            y2 = y;
            for (i = 0; i < cnt - 1; i++) {
                child = this.getChild(i);
                h = _int(child._measuredHeight);
                this._layoutChild(child, r.x, y2, r.width, h);
                y2 += h + wLine;
            }
            child = this.getChild(i);
            this._layoutChild(child, r.x, y2, r.width, y + hView - y2);
        }
    },
    */
    _doRenderHtml: function (r) {
        var m, styles, line, tr, g, wLine, pts, x1, x2, y1, i,
            cnt = this.childCount();
        if (cnt > 1) {
            m = this.model();
            styles = m.styles();
            line = this._line;
            if (line) {
                tr = new Rectangle(0, 0, r.width, r.height);
                g = this.$_getBackGraphics(true, tr);
                wLine = line.width();
                pts = this._points;
                x1 = tr.x;
                x2 = tr.right();
                y1 = tr.y + styles.paddingTop();
                for (i = 1; i < cnt; i++) {
                    g.drawHLineI(line, y1 + pts[i] - wLine, x1, x2);
                }
            }
        }
    },
    getLower: function (child) {
        var i = this._indexOfChild(child);
        if (i < this.count() - 1) {
            return this._childAt(Math.max(0, i + 1));
        }
    },
    getUpper: function (child) {
        var i = this._indexOfChild(child);
        if (i > 0) {
            return this._childAt(Math.max(0, i - 1));
        }
    }
});
var PrintDBoxElement = defineClass("PrintDBoxElement", PrintBoxElement, {
    init: function (dom, model, printing) {
        this._super(dom, "printDBoxView", model, printing);
    },
    _getEmptyText: function () {
        return "dbox";
    },
    _measureChild: function (index, view, model, hintWidth, hintHeight, force) {
        var n = this.model().diagonal() === BoxDiagonal.BOTH ? 3 : 2;
        var w = hintWidth / n;
        var h = hintWidth / n;
        this._super(index, view, model, w, h, force);
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
        var m = this.model();
        var styles = m.styles();
        var sz = { width: 0, height: 0 };
        var cnt = this._measureChildren(hintWidth, hintHeight, force);
        if (cnt > 0) {
            var line = styles.line();
            var h = 0;
            var w = 0;;
            var i, cell, child, item, wview, hview;
            for (i = 0; i < cnt; i++) {
                cell = this.getChild(i);
                child = cell.getChild(0);
                item = child.model();
                hview = child._measuredHeight;
                hview += PrintDimension.getFixedI(item.top()) + PrintDimension.getFixedI(item.bottom())
                h = Math.max(h, hview);
                wview = child._measuredWidth;
                wview += PrintDimension.getFixedI(item.left()) + PrintDimension.getFixedI(item.right());
                w = Math.max(w, wview);
            }
            if (m.diagonal() === BoxDiagonal.BOTH) {
                sz.width = w * 3;
                sz.height = h * 3;
            } else {
                sz.width = w * 2;
                sz.height = h * 2;
            }
            this._itemWidth = w;
            this._itemHeight = h;
        }
        sz.width += styles.paddingHorz() ;
        sz.height += styles.paddingVert();
        return sz;
    },
    _doLayoutItems: function (force, bounds) {
        var cnt = this.childCount();
        if (!cnt) return;
        var m = this.model();
        var styles = m.styles();
        var r = styles.deflatePaddings(bounds.clone());
        var x = r.x;
        var y = r.y;
        var w = this._itemWidth;
        var h = this._itemHeight;
        var i, cell, child;
        switch (m.diagonal()) {
            case BoxDiagonal.BOTH:
                for (i = 0; i < cnt; i++) {
                    cell = this.getChild(i);
                    child = cell.getChild(0);
                    cell.setVisible(true);
                    if (cell.visible()) {
                        switch (child.model().index()) {
                            case 3:
                                cell.setBoundsI(x + w, y + h * 2, w, h);
                                break;
                            case 2:
                                cell.setBoundsI(x + w * 2, y + h, w, h);
                                break;
                            case 1:
                                cell.setBoundsI(x + w, y, w, h);
                                break;
                            default:
                                cell.setBoundsI(x, y + h, w, h);
                                break;
                        }
                        this._layoutChild(child, 0, 0, w, h);
                    }
                }
                break;
            case BoxDiagonal.OPPOSITE:
                for (i = 0; i < cnt; i++) {
                    cell = this.getChild(i);
                    child = cell.getChild(0);
                    cell.setVisible(true);
                    if (cell.visible()) {
                        switch (child.model().index()) {
                            case 1:
                                cell.setBoundsI(x + w, y + h, w, h);
                                break;
                            default:
                                cell.setBoundsI(x, y, w, h);
                                break;
                        }
                        this._layoutChild(child, 0, 0, w, h);
                    }
                }
                break;
            default:
                for (i = 0; i < cnt; i++) {
                    cell = this.getChild(i);
                    child = cell.getChild(0);
                    cell.setVisible(true);
                    if (cell.visible()) {
                        switch (child.model().index()) {
                            case 1:
                                cell.setBoundsI(x + w, y, w, h);
                                break;
                            default:
                                cell.setBoundsI(x, y + h, w, h);
                                break;
                        }
                        this._layoutChild(child, 0, 0, w, h);
                    }
                }
                break;
        }
    },
    _doRenderHtml: function (r) {
        var m = this.model();
        var styles = m.styles();
        var line = styles.line();
        if (line) {
            var tr = new Rectangle(0, 0, r.width, r.height);
            var g = this.$_getBackGraphics(true, tr);
            switch (m.diagonal()) {
                case BoxDiagonal.BOTH:
                    g.drawLine(line, tr.x, tr.y, tr.right(), tr.bottom());
                    g.drawLine(line, tr.right() - 1, tr.y, tr.x, tr.bottom());
                    break;
                case BoxDiagonal.OPPOSITE:
                    g.drawLine(line, tr.right() - 1, tr.y, tr.x, tr.bottom());
                    break;
                default:
                    g.drawLine(line, tr.x, tr.y, tr.right(), tr.bottom());
                    break;
            }
        }
    }
});
var PrintList = defineClass("PrintList", PrintGroupItem, {
    init: function () {
        this._super();
        this._headerStyles = new GridStyles(this, "listHeaderStyles");
        this._footerStyles = new GridStyles(this, "listFooterStyles");
        this._rowStyles = new GridStyles(this, "listRowStyles");
        this._row = new PrintListRow();
        this._row.styles().setParent(this._rowStyles, false);
        this.setItemLeft(0);
        this._styles.setSysDefault(new PrintStyles(null, "listDefault", {
        }), false);
    },
    title: null,
    row: null,
    headerWidth: undefined,
    footerWidth: undefined,
    itemWidth: undefined,
    headerStyles: null,
    footerStyles: null,
    rowStyles: null,
    setTitle: function (value) {
        if (value !== this._title) {
            if (value) {
                var t = this._createItem(this._delegate(), value);
                if (t) {
                    this.$_internalAddItem(t, this._styles._root);
                    if (typeof value === "string") {
                        t.setText(value);
                    } else {
                        t.assign(value);
                    }
                    this._pageTotal = this._pageTotal || t.hasPageValue();
                    t._styles.setSysDefault(new PrintStyles(null, "listTitleDefault", {
                        fontBold: true,
                        textAlignment: "near",
                        marginBottom: 4
                    }));
                }
                this._title = t;
            } else {
                this._title = null;
            }
        }
    },
    setItemLine: function (value) {
        if (value !== this._itemLine) {
            this._itemLine.assign(value);
        }
    },
    setHeaderStyles: function (value) {
        if (value !== this._headerStyles) {
            this._headerStyles.extend(value);
        }
    },
    setFooterStyles: function (value) {
        if (value !== this._footerStyles) {
            this._footerStyles.extend(value);
        }
    },
    setRowStyles: function (value) {
        if (value !== this._rowStyles) {
            this._rowStyles.extend(value);
        }
    },
    $_attached: function () {
        this._super();
        this._rowStyles.setParent(this._styles._root, false);
        this._headerStyles.setParent(this._styles._root, false);
        this._footerStyles.setParent(this._styles._root, false);
        this._itemStyles.setParent(this._styles._root, false);
    }
});
var PrintListRow = defineClass("PrintListRow", PrintItem, {
    init: function () {
        this._super();
    }
});
var PrintListElement = defineClass("PrintListElement", PrintGroupElement, {
    init: function (dom, model, printing) {
        this._super(dom, "listView", model, printing);
        this._relWidths = [];
        this._relHeights = [];
        this._rowPoints = [];
    },
    setHeight: function (value) {
        this._super(value);
    },
    _getEmptyText: function () {
        return "list";
    },
    _createItemView: function (delegate, item, printing) {
        if (item === this.model().title()) {
            return this._super(delegate, item, printing);
        }
        return new PrintListRowElement(this._dom, this.model().row(), item, this._printing);
    },
    getItemView: function (item) {
        if (this._titleView && item === this._titleView.model()) {
            return this._titleView;
        }
        return this._super(item);
    },
    _updateChildStyles: function (model, child) {
        var h = child.header(),
            f = child.footer();
        h && h.styles().setParent(model._headerStyles, false);
        f && f.styles().setParent(model._footerStyles, false);
        child.styles().setParent(model.itemStyles(), false);
    },
    _measureChild: function (index, view, model, hintWidth, hintHeight, force) {
        view.$_setParentWidths(this._headerWidth, this._itemWidth, this._footerWidth);
        this._super(index, view, model, hintWidth, hintHeight, force);
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
        var rh, cw, i, h, hItem, child, item, z, relWidths, relHeights, rowPoints,
            titleView, wHeader, wItem, wFooter, wHeader2, wItem2, wFooter2,
            m = this.model(),
            title = m.title(),
            styles = m.styles(),
            sz = { width: 0, height: 0 },
            cnt = this._measureChildren(hintWidth, hintHeight, force, true);
        if (cnt > 0) {
            titleView = this._titleView;
            wHeader = NaN;
            wItem = NaN;
            wFooter = NaN;
            wHeader2 = 0;
            wItem2 = 0;
            wFooter2 = 0;
            relWidths = this._relWidths = [];
            relHeights = this._relHeights = [];
            rowPoints = this._rowPoints = [0];
            this._relWidthSum = this._relHeightSum = 0;
            this._absColCount = this._absRowCount = 0;
            if (title && !titleView) {
                titleView = this._titleView = this._createItemView(this.container().delegate(), title, this._printing);
            }
            if (titleView) {
                titleView.setVisible(true);
                this.addElement(titleView);
                titleView.measure(hintWidth, hintHeight, force);
            }
            cw = this._headerWidth;
            if (cw) {
                if (cw.fixed()) {
                    wHeader = cw.size();
                    this._absColCount++;
                } else {
                    this._relWidthSum += cw.size();
                    wHeader = 0;
                }
            }
            cw = this._itemWidth;
            if (cw) {
                if (cw.fixed()) {
                    wItem = cw.size();
                    this._absColCount++;
                } else {
                    this._relWidthSum += cw.size();
                    wItem = 0;
                }
            }
            cw = this._footerWidth;
            if (cw) {
                if (cw.fixed()) {
                    wFooter = cw.size();
                    this._absColCount++;
                } else {
                    this._relWidthSum += cw.size();
                    wFooter = 0;
                }
            }
            hItem = h = 0;
            for (i = 0; i < cnt; i++) {
                child = this.getChild(i);
                item = child.model();
                rh = item.height();
                if (rh) {
                    if (rh.fixed()) {
                        h += z = rh.size();
                        hItem += z;
                        this._absRowCount++;
                    } else {
                        relHeights.push(i);
                        this._relHeightSum += rh.size();
                        h += child._measuredHeight;
                    }
                } else {
                    h += z = child._measuredHeight;
                    hItem += z;
                }
                this._rowPoints.push(h);
                if (isNaN(wHeader)) {
                    wHeader2 = Math.max(wHeader2, child.$_headerWidth());
                }
                if (isNaN(wItem)) {
                    wItem2 = Math.max(wItem2, child.$_itemWidth());
                }
                if (isNaN(wFooter)) {
                    wFooter2 = Math.max(wFooter2, child.$_footerWidth());
                }
            }
            this._wHeader = isNaN(wHeader) ? wHeader2 : wHeader;
            this._wItem = isNaN(wItem) ? wItem2 : wItem;
            this._wFooter = isNaN(wFooter) ? wFooter2 : wFooter;
            sz.height = hItem;
            sz.width = this._wHeader + this._wItem + this._wFooter;
            if (titleView) {
                sz.width = Math.max(sz.width, titleView._measuredWidth);
                sz.height += titleView._measuredHeight;
            }
        }
        sz.width += styles.paddingHorz();
        sz.height += styles.paddingVert();
        return sz;
    },
    _doLayoutItems: function (force, rc) {
        var i, cell, child, item, w, h, delta, len, widths, heights, dw, dh, hItems,
            relWidths, pts, relHeights,
            m = this.model(),
            styles = m.styles(),
            r = styles.deflatePaddings(rc),
            x = r.x,
            y = r.y,
            cnt = m.count(),
            wView = r.width,
            hView = r.height,
            wItems = this._wHeader + this._wItem + this._wFooter,
            titleView = this._titleView;
        if (titleView) {
            this._layoutChild(titleView, x, y, wView, h = titleView._measuredHeight)
            y += h;
            hView -= h;
        }
        delta = wView - wItems;
        if (delta > 0) {
            relWidths = this._relWidths;
            if (this._relWidthSum > 0) {
                len = relWidths.length;
                widths = [this._wHeader, this._wItem, this._wFooter];
                if (m.isFillWidth()) {
                    dw = delta;
                    for (i = 0; i < len - 1; i++) {
                        j = relWidths[i];
                        w = this.getChild(j).model().width();
                        widths[j] = w = delta * w.size() / this._relWidthSum;
                        dw -= w;
                    }
                    widths[relWidths[i]] = dw;
                } else {
                    for (i = 0; i < len; i++) {
                        j = relWidths[i];
                        w = this.getChild(j).model().width();
                        widths[j] = w = w.getSize(delta);
                    }
                }
                this._wHeader = widths[0];
                this._wItem = widths[1];
                this._wFooter = widths[2];
            } else if (m.isFillWidth()) {
                if (this._absColCount > 0 && m.fillWidth() !== GroupFillMode.ALL) {
                    if (this._absColCount < cnt) {
                        delta /= cnt - this._absColCount;
                        if (!this._headerWidth) {
                            this._wHeader += delta;
                        }
                        if (!this._itemWidth) {
                            this._wItem += delta;
                        }
                        if (!this._footerWidth) {
                            this._wFooer += delta;
                        }
                    }
                } else {
                    var n = 1 + (this._headerWidth ? 1 : 0) + (this._footerWidth ? 1 : 0);
                    delta /= n;
                    this._headerWidth && (this._wHeader += delta);
                    this._wItem += delta;
                    this._footerWidth && (this._wFooter += delta);
                }
            }
            if (m.isFillWidth()) {
                if (this._footerWidth) {
                    this._wFooter = r.width - this._wHeader - this._wItem;
                } else {
                    this._wItem = r.width - this._wHeader;
                }
            }
        }
        pts = this._rowPoints;
        hItems = pts[cnt];
        delta = hView - hItems;
        if (delta > 0) {
            relHeights = this._relHeights;
            if (this._relHeightSum > 0) {
                len = relHeights.length;
                heights = [];
                for (i = 1; i <= cnt; i++) {
                    heights.push(pts[i] - pts[i - 1]);
                }
                if (m.isFillHeight()) {
                    dh = delta;
                    for (i = 0; i < len - 1; i++) {
                        j = relHeights[i];
                        h = this.getChild(j).model().height();
                        heights[j] = h = delta * h.size() / this._relHeightSum;
                        dh -= h;
                    }
                    heights[relHeights[i]] = dh;
                } else {
                    for (i = 0; i < len; i++) {
                        j = relHeights[i];
                        h = this.getChild(j).model().height();
                        heights[j] = h = h.getSize(delta);
                    }
                }
                for (i = 0; i < cnt; i++) {
                    pts[i + 1] = _int(pts[i] + heights[i]);
                }
            } else if (m.isFillHeight()) {
                if (this._absRowCount > 0 && m.fillHeight() !== GroupFillMode.ALL) {
                    if (this._absRowCount < cnt) {
                        heights = [];
                        for (i = 1; i <= cnt; i++) {
                            heights.push(pts[i] - pts[i - 1]);
                        }
                        delta /= cnt - this._absRowCount;
                        for (i = 0; i < cnt; i++) {
                            rh = this.getChild(i).model();
                            if (!rh) {
                                heights[i] += delta;
                            }
                        }
                        for (i = 0; i < cnt; i++) {
                            pts[i + 1] = _int(pts[i] + heights[i]);
                        }
                    }
                } else {
                    delta /= cnt;
                    for (i = 1; i < cnt; i++) {
                        pts[i] = _int(pts[i] + delta * i);
                    }
                }
            }
            if (m.isFillHeight()) {
                pts[cnt] = hView;//r.height;
            }
        }
        for (i = 0; i < cnt; i++) {
            child = this.getChild(i);// this._childMap[m.getItem(i).$_hash];
            w = r.width; //child._measuredWidth;
            h = pts[i + 1] - pts[i];//child._measuredHeight;
            child.setBoundsI(x, y + pts[i], w, h);
            child.$_setWidths(this._wHeader, this._wItem, this._wFooter);
            child.layoutItems(force);
        }
    },
    _doRenderHtml: function (r) {
        /*
        var cnt = this.childCount();
        if (cnt > 1) {
            var m = this.model();
            var styles = m.styles();
            var line = this._line;
            if (line) {
                var tr = new Rectangle(0, 0, r.width, r.height);
                var g = this.$_getGraphics(true, tr);
                var wLine = line.width();
                var x = tr.x;
                var x2 = tr.right();
                var y = tr.y;
                for (var i = 0; i < cnt - 1; i++) {
                    var view = this.getChild(i);
                    y = view.bottom();
                    g.drawHLineI(line, y, x, x2);
                }
            }
        }
        */
    },
    setFocusedCell: function (x, y) {
    },
    getLower: function (child) {
        var i, row, p,
            cnt = this.count();
        for (i = 0; i < cnt - 1; i++) {
            row = this.getChild(i);
            if (child instanceof PrintCellView) {
                if (child.parent() === row) {
                    return this.getChild(i + 1)._itemView;
                }
            } else if (child instanceof PrintItemElement) {
                if (child.parent().parent() == row) {
                    p = this.getChild(i + 1);
                    if (child === row._headerView) {
                        return p._headerView || p._itemView;
                    } else if (child === row._footerView) {
                        return p._footerrView || p._itemView;
                    } else {
                        return p._itemView;
                    }
                }
            }
        }
    },
    getUpper: function (child) {
        var i, row, p,
            cnt = this.count();
        for (i = cnt - 1; i > 0; i--) {
            row = this.getChild(i);
            if (child instanceof PrintCellView) {
                if (child.parent() === row) {
                    return this.getChild(i - 1)._itemView;
                }
            } else if (child instanceof PrintItemElement) {
                if (child.parent().parent() == row) {
                    p = this.getChild(i - 1);
                    if (child === row._headerView) {
                        return p._headerView || p._itemView;
                    } else if (child === row._footerView) {
                        return p._footerrView || p._itemView;
                    } else {
                        return p._itemView;
                    }
                }
            }
        }
    },
    getLeft: function (child) {
        var p = child.parent().parent();
        if (p instanceof PrintListRowElement) {
            if (child === p._footerView) {
                return p._itemView;
            }
            if (child === p._itemView) {
                return p._headerView;
            }
        }
    },
    getRight: function (child) {
        var p = child.parent().parent();
        if (p instanceof PrintListRowElement) {
            if (child === p._headerView) {
                return p._itemView;
            }
            if (child === p._itemView) {
                return p._footerView;
            }
        }
    },
    getFirst: function () {
        if (this.count() > 0) {
            return this.getChild(0)._itemView;
        }
    },
    getLast: function () {
        if (this.count() > 0) {
            return this.getChild(0 - 1)._itemView;
        }
    }
});
var PrintListRowElement = defineClass("PrintListRowElement", PrintItemElement, {
    init: function (dom, row, item, printing) {
        this._super(dom, "listItemView", row, printing);
        this._item = item;
        if (this._css) {
            this._css.overflow = 'hidden';
        }
    },
    getItemView: function (item) {
        if (item === this._item.header()) {
            return this._headerView;
        }
        if (item === this._item.footer()) {
            return this._footerView;
        }
    },
    isLayer: function () {
        return true;
    },
    isContainer: function () {
        return true;
    },
    designModel: function () {
        return this._item;
    },
    designView: function () {
        return this._itemView;
    },
    clickable: function () {
        return false;
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
        var headerView, footerView, itemView, w, wHint,
            m = this.model(),
            styles = m.styles(),
            sz = { width: 0, height: 0 },
            line = this.model(),
            item = this._item,
            header = item.header(),
            footer = item.footer(),
            headerCell = this._headerCell,
            footerCell = this._footerCell,
            itemCell = this._itemCell,
            delegate = this.container().delegate();
        if (header) {
            if (!headerCell) {
                headerCell = this._headerCell = new PrintCellView(this._dom, true);
                this.addElement(headerCell);
                headerView = this._headerView = delegate.getItemView(header, this._printing);
                headerView && headerCell.addElement(headerView);
            } else {
                headerView = headerCell.getChild(0);
            }
            if (headerView) {
                headerView.setVisible(true);
                wHint = hintWidth;
                if ((w = this.wParentHeader) && w.fixed()) {
                    wHint = Math.min(wHint, w.size());
                }
                headerView.measure(wHint, hintHeight, force);
                sz.width = headerView._measuredWidth;
                sz.height = headerView._measuredHeight;
            }
        }
        if (item) {
            if (!itemCell) {
                itemCell = this._itemCell = new PrintCellView(this._dom, true);
                this.addElement(itemCell);
                itemView = this._itemView = delegate.getItemView(item, this._printing);
                itemView && itemCell.addElement(itemView);
            } else {
                itemView = itemCell.getChild(0);
            }
            if (itemView) {
                itemView.setVisible(true);
                if ((w = this._wParentItem) && w.fixed()) {
                    wHint = Math.min(wHint, w.size());
                }
                itemView.measure(wHint, hintHeight, force);
                sz.width += itemView._measuredWidth;
                sz.height = Math.max(sz.height, itemView._measuredHeight);
            }
        }
        if (footer) {
            if (!footerCell) {
                footerCell = this._footerCell = new PrintCellView(this._dom, true);
                this.addElement(footerCell);
                footerView = this._footerView = delegate.getItemView(footer, this._printing);
                footerView && footerCell.addElement(footerView);
            } else {
                footerView = footerCell.getChild(0);
            }
            if (footerView) {
                footerView.setVisible(true);
                if ((w = this.wParentFooter) && w.fixed()) {
                    wHint = Math.min(wHint, w.size());
                }
                footerView.measure(wHint, hintHeight, force);
                sz.width += footerView._measuredWidth;
                sz.height = Math.max(sz.height, footerView._measuredHeight);
            }
        }
        if (itemView) {
            if (headerView) {
                itemView.$_headerView = headerView;
                headerView.$_designParent = this._parent;
            }
            if (footerView) {
                itemView.$_footerView = footerView;
                footerView.$_designParent = this._parent;
            }
            itemView.$_designParent = this._parent;
        }
        sz.width += styles.paddingHorz();
        sz.height += styles.paddingVert();
        return sz;
    },
    _doLayoutItems: function (force, bounds) {
        var cell, view, item, w,
            m = this.model(),
            styles = m.styles(),
            r = styles.deflatePaddings(bounds.clone()),
            h = r.height,
            x = r.x;
        if (cell = this._headerCell) {
            cell.setVisible(h > 0 && this._headerWidth > 0);
            if (cell.visible()) {
                cell.setBounds(x, r.y, this._headerWidth, h);
                this._layoutChild(cell.getChild(0), 0, 0, this._headerWidth, h);
                x += this._headerWidth;
            }
        }
        if (cell = this._itemCell) {
            cell.setVisible(h > 0 && this._itemWidth > 0);
            if (cell.visible()) {
                item = cell.getChild(0).model();
                w = this._itemWidth;
                if (!this._headerCell || !this._headerCell.visible()) {
                    if (item.headerCollapsible()) {
                        x = r.x;
                        w += this._headerWidth;
                    } else {
                        x = r.x + this._headerWidth;
                    }
                }
                if ((!this._footerCell || this._footerWidth <= 0) && item.footerCollapsible()) {
                    w += this._footerWidth;
                }
                cell.setBounds(x, r.y, w, h);
                this._layoutChild(cell.getChild(0), 0, 0, w, h);
                x += w;
            }
        }
        if (cell = this._footerCell) {
            cell.setVisible(h > 0 && this._footerWidth > 0);
            if (cell.visible()) {
                cell.setBounds(x, r.y, this._footerWidth, h);
                this._layoutChild(cell.getChild(0), 0, 0, this._footerWidth, h);
            }
        }
    },
    _doDrawHtmlBorders: function (r) {
        this._back.style.border = null;
    },
    getLower: function (child) {
    },
    getUpper: function (child) {
    },
    getRight: function (child) {
    },
    getLeft: function (child) {
    },
    getFirst: function () {
    },
    getLast: function () {
    },
    $_setParentWidths: function (wHeader, wItem, wFooter) {
        this._wParentHeader = wHeader;
        this._wParentitem = wItem;
        this._wParentFooter = wFooter;
    },
    $_headerWidth: function () {
        return this._headerCell ? this._headerCell.getChild(0)._measuredWidth : 0;
    },
    $_itemWidth: function () {
        return this._itemCell ? this._itemCell.getChild(0)._measuredWidth : 0;
    },
    $_footerWidth: function () {
        return this._footerCell ? this._footerCell.getChild(0)._measuredWidth : 0;
    },
    $_setWidths: function (wHeader, wItem, wFooter) {
        this._headerWidth = wHeader;
        this._itemWidth = wItem;
        this._footerWidth = wFooter;
    }
});
var PrintTileMask = defineClass("PrintTileMask", null, {
    init: function (source) {
        this._super();
        this._styles = new PrintStyles(null, "tileMask", false);
        source && this.assign(source);
        this._styles.setSysDefault(new PrintStyles(null, "tileMaskDefault", {
        }), false);
    },
    range: null,
    styles: null,
    offset: IntProp(0),
    zindex: IntProp(0), // 0보다 작으면 cell들 보다 아래에
    setRange: function (value) {
        var list, cnt, pts, p1, p2, c1, c2, r1, r2;
        if (value != this._range) {
            this._range = value;
            this._start = null;
            this._end = null;
            if (typeof value == 'string' && value) {
                list = value.split(':');
                cnt = list.length;
                pts = list[0].split(',');
                if (pts.length >= 2) {
                    p1 = p2 = this._start = this._end = {
                        r: parseInt(pts[0]),
                        c: parseInt(pts[1])
                    };
                }
                if (cnt > 1) {
                    pts = list[1].split(',');
                    p2 = this._end = {
                        r: parseInt(pts[0]),
                        c: parseInt(pts[1])
                    };
                }
                if (p1 != p2) {
                    c1 = Math.min(p1.c, p2.c);
                    c2 = Math.max(p1.c, p2.c);
                    r1 = Math.min(p1.r, p2.r);
                    r2 = Math.max(p1.r, p2.r);
                    p1.c = Math.max(0, c1);
                    p1.r = Math.max(0, r1);
                    p2.c = Math.max(0, c2);
                    p2.r = Math.max(0, r2);
                }
            }
        }
    },
    setStyles: function (value) {
        if (value !== this._styles) {
            this._styles.extend(value);
        }
    },
    start: function () {
        return this._start;
    },
    end: function () {
        return this._end;
    },
    assignSimple: function (value) {
        this.setRange(value);
    }
});
var PrintTileMaskElement = defineClass("PrintTileMaskElement", PrintElement, {
    init: function (dom, model, printing) {
        this._super(dom, "tileMaskView", model, printing);
    },
    _doRenderHtml: function (r) {
        var b,
            m = this.model(),
            styles = m.styles(),
            stroke = styles.border(),
            fill = styles.background(),
            css = this._back.style;
        css.background = fill ? fill.css() : '';
        css.border = '';
        b = styles.border();
        if (b) {
            css.border = b.css();
        } else {
            if (b = styles.borderLeft()) {
                css.borderLeft = b.css();
            } else {
                css.borderLeft = "";
            }
            if (b = styles.borderRight()) {
                css.borderRight = b.css();
            } else {
                css.borderRight = "";
            }
            if (b = styles.borderTop()) {
                css.borderTop = b.css();
            } else {
                css.borderTop = "";
            }
            if (b = styles.borderBottom()) {
                css.borderBottom = b.css();
            } else {
                css.borderBottom = "";
            }
        }
    }
});
var PrintTile = defineClass("PrintTile", PrintGroupItem, {
    init: function () {
        this._super();
        this._rows = [];
        this.setItemLeft(0);
        this.setItemRight(0);
        this.setItemTop(0);
        this.setItemBottom(0);
        this.setItemStyles({
            background: "#fff", // tile line 때문에
            padding: 2
        });
        this._styles.setSysDefault(new PrintStyles(null, "tileDefault", {
            padding: 0,
            line: null
        }), false);
    },
    getItemData: function (item) {
        var id, provider, row, rows, fld, flds,
            id = this._dataId;
        if (id) {
            provider = this._dataProvider || this.dataProvider();
            row = item.row();
            rows = this._dataRows;
            if (rows) {
                this.$_increaseRows(row);
                row = rows[row];
            }
            flds = this._dataFields;
            if (flds) {
                fld = item.col();
                if (fld >= 0 && fld < flds.length) {
                    fld = _pick(flds[fld], 0);
                    if (row >= 0) {
                        return provider.getValue(this._dataId, [row, fld]);
                    }
                }
            }
        }
        return undefined;
    },
    cols: 1,
    rows: 1,
    rangeMasks: null,
    colWidths: null,
    rowHeights: null,
    minColWidth: PrintDimension.createFrom(16),
    minRowHeight: PrintDimension.createFrom(8),
    dataFields: null,
    dataRows: null,
    setCols: function (value) {
        value = parseInt(value);
        this._cols = isNaN(value) ? 1 : Math.max(1, value);
    },
    setRows: function (value) {
        value = parseInt(value);
        this._rows = isNaN(value) ? 1 : Math.max(1, value);
    },
    setColWidths: function (value) {
        if (value != this._colWidths) {
            this._colWidths = PrintDimension.createArray(value);
        }
    },
    setRowHeights: function (value) {
        if (value != this._rowHeights) {
            this._rowHeights = PrintDimension.createArray(value);
        }
    },
    setRangeMasks: function (value) {
        var masks, i;
        if (value !== this._rangeMasks) {
            masks = null;
            if (_isArray(value)) {
                masks = [];
                for (i = 0; i < Math.min(2, value.length); i++) {
                    masks.push(new PrintTileMask(value[i]));
                }
            } else if (value) {
                masks = [new PrintTileMask(value)];
            }
            this._rangeMasks = masks;
        }
    },
    setDataFields: function (value) {
        if (_isString(value)) {
            value = value.split(/,|;/);
        }
        value = _asArray(value);
        if (value !== this._dataFields) {
            this._dataFields = value.slice();
        }
    },
    setDataRows: function (value) {
        if (_isString(value)) {
            value = value.split(/,|;/);
        }
        value = _asArray(value);
        if (value !== this._dataRows) {
            var rows = this._dataRows = [];
            for (var i = 0; i < value.length; i++) {
                if (isNaN(value[i])) break;
                rows.push(Number(value[i]));
            }
        }
    },
    ordered: function () {
        return true;
    },
    $_increaseRows: function (row) {
        var len, r, i,
            rows = this._dataRows;
        if (rows && (len = rows.length) <= row) {
            r = len > 0 ? rows[len - 1] : 0;
            for (i = 0; i <= row - len; i++) {
                rows.push(r + 1 + i);
            }
        }
    }
}, {
    ROWS: {}
});
var PrintTileElement = defineClass("PrintTileElement", PrintGroupElement, {
    init: function (dom, model, printing) {
        this._super(dom, "tileView", model, printing);
        this._maskMap = {};
        if (this.designTime()) {
            this._designBack = document.createElement("div");
            this._dom.appendChild(this._designBack);
            var css = this._designBack.style;
            css.boxSizing = "border-box";
            css.position = "absolute";
            css.padding = "0px";
            css.margin = "0px";
            css.overflow = 'hidden';
            this._designCells = [];
        }
    },
    _getEmptyText: function () {
        return "tile";
    },
    _isValidItem: function (model, item) {
        return item && item.col() < model.cols() && item.row() < model.rows();
    },
    canCellEdit: function (cell) {
        return true;
    },
    _measureChild: function (index, view, model, hintWidth, hintHeight, force) {
        var colWidths, rowHeights,
            w = model.width(),
            h = model.height();
        if (!w || !w.fixed()) {
            colWidths = this.model().colWidths();
            if (colWidths && (w = colWidths[index]) && w.fixed()) {
                hintWidth = Math.min(hintWidth, w.size());
            }
        }
        if (!h || !h.fixed()) {
            rowHeights = this.model().rowHeights();
            if (rowHeights && (h = rowHeights[index]) && h.fixed()) {
                hintHeight = Math.min(hintHeight, h.size());
            }
        }
        this._super(index, view, model, hintWidth, hintHeight, force);
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
        var i, j, r, c, r2, c2, pts, cell, child, item, cw, rh, w, h, mw, mh, x, y, x2, y2, w, h, dx, dy, old, z,
            hgap = wLine,
            vgap = wLine,
            m = this.model(),
            styles = m.styles(),
            sz = { width: 0, height: 0 },
            cnt = this._measureChildren(hintWidth, hintHeight, force),
            rows = m.rows(),
            cols = m.cols(),
            colWidths = m.colWidths(),
            rowHeights = m.rowHeights(),
            relWidths = this._relWidths = colWidths ? [] : null,
            relHeights = this._relHeights = rowHeights ? [] : null,
            widths = new Array(cols),
            heights = new Array(rows),
            mWidths = new Array(cols),
            mHeights = new Array(rows),
            colPoints = this._colPoints = new Array(cols + 1),
            rowPoints = this._rowPoints = new Array(rows + 1),
            horzLines = this._horzLines = new Array(rows * cols),
            vertLines = this._vertLines = new Array(rows * cols),
            wLine = this._line ? this._line.width() : 0,
            hgap = wLine,
            vgap = wLine;
        for (c = rows * cols; c--;) {
            horzLines[c] = vertLines[c] = 1;
        }
        w = m.minColWidth();
        w = w.fixed() ? w.size() : 0;
        for (c = 0; c < cols; c++) {
            mWidths[c] = widths[c] = w;
        }
        h = m.minRowHeight();
        h = h.fixed() ? h.size() : 0;
        for (r = 0; r < rows; r++) {
            mHeights[r] = heights[r] = h;
        }
        this._relWidthSum = this._relHeightSum = 0;
        this._absColCount = this._absRowCount = 0;
        for (i = 0; i < cnt; i++) {
            cell = this.getChild(i);
            child = cell.getChild(0);
            item = child.model();
            rSpan = item.rowSpan();
            cSpan = item.colSpan();
            r = item.row();
            c = item.col();
            cw = colWidths && colWidths[c];
            rh = rowHeights && rowHeights[r];
            if (rSpan > 1) {
                for (j = 1; j < rSpan; j++) {
                    horzLines[(r + j) * cols + c] = 0;
                }
            }
            if (cSpan > 1) {
                for (j = 1; j < cSpan; j++) {
                    vertLines[r * cols + c + j] = 0;
                }
            }
            r2 = r + rSpan;
            y = rowPoints[r];
            y2 = rowPoints[r2];
            if (isNaN(y2) || y2 == 0) {
                y2 = rowPoints[r2] = y;
            }
            if (rh) {
                h = relHeights[r];
                if (h === undefined) {
                    if (rh.fixed()) {
                        mh = h = rh.size();
                        relHeights[r] = h;
                        this._absRowCount++;
                    } else {
                        relHeights[i] = h = 0;
                        mh = child._measuredHeight;
                        this._relHeightSum += rh.size();
                    }
                }
            } else {
                h = child._measuredHeight;
                h += PrintDimension.getFixedI(item.top()) + PrintDimension.getFixedI(item.bottom())
                mh = h;
            }
            r2 = r + rSpan;
            h /= rSpan;
            for (j = 0; j < rSpan; j++) {
                heights[j + r] = Math.max(heights[j + r], h);
            }
            mh /= rSpan;
            for (j = 0; j < rSpan; j++) {
                mHeights[j + r] = Math.max(mHeights[j + r], mh);
            }
            /*
            dy = h - (y2 - y);
            if (dy > 0) {
                old = y2;
                y2 = rowPoints[r2] = y + h;
                dy = y2 - old;
                for (r = r2 + 1; r < rowPoints.length; r++) {
                    if (rowPoints[r] > 0 && rowPoints[r] <= y2) {
                        rowPoints[r] += dy;
                    }
                }
            }
            */
            if (cw) {
                w = relWidths[c];
                if (w === undefined) {
                    if (cw.fixed()) {
                        mw = w = cw.size();
                        relWidths[c] = w;
                        this._absColCount++;
                    } else {
                        relWidths[c] = w = 0;
                        mw = child._measuredWidth;
                        this._relWidthSum += cw.size();
                    }
                }
            } else {
                w = child._measuredWidth;
                w += PrintDimension.getFixedI(item.left()) + PrintDimension.getFixedI(item.right());
                mw = w;
            }
            c2 = c + cSpan;
            w /= cSpan;
            for (j = 0; j < cSpan; j++) {
                widths[j + c] = Math.max(widths[j + c], w);
            }
            mw /= cSpan;
            for (j = 0; j < cSpan; j++) {
                mWidths[j + c] = Math.max(mWidths[j + c], mw);
            }
            /*
            x = colPoints[c];
            if (w > 0 && x == 0) {
                for (j = 0;  j < c; j++) {
                    x = Math.max(x, colPoints[j]);
                }
                colPoints[c] = x + w;
            }
            x2 = colPoints[c2];
            if (isNaN(x2) || x2 == 0) { // // c2가 cols 범위를 벗어난 경우이거나 초기화되지 않은 경우
                x2 = colPoints[c2] = x;
            }
            dx = w - (x2 - x);
            if (dx > 0) {
                old = x2;
                x2 = colPoints[c2] = x + w;
                dx = x2 - old;
                for (c = c2 + 1; c < colPoints.length; c++) {
                    if (colPoints[c] > 0 && colPoints[c] <= x2) {
                        colPoints[c] += dx;
                    }
                }
            }
            */
        }
        colPoints[0] = 0;
        for (c = 0; c < cols; c++) {
            colPoints[c + 1] = colPoints[c] + widths[c];
        }
        /*
        for (c = 0; c < colPoints.length - 1; c++) {
            if (colPoints[c + 1] == 0) {
                colPoints[c + 1] = colPoints[c];
            }
        }
        for (; c < cols; c++) {
            colPoints[c + 1] = colPoints[c];
        }
        */
        if (hgap > 0) {
            for (c = 1; c < colPoints.length; c++) {
                colPoints[c] += c * hgap;
            }
        }
        rowPoints[0] = 0;
        for (r = 0; r < rows; r++) {
            rowPoints[r + 1] = rowPoints[r] + heights[r];
        }
        /*
        for (c = 0; c < rowPoints.length - 1; c++) {
            if (rowPoints[c + 1] == 0) {
                rowPoints[c + 1] = rowPoints[c];
            }
        }
        for (; c < rows; c++) {
            rowPoints[c + 1] = rowPoints[c];
        }
        if (hgap > 0) {
            for (c = 1; c < colPoints.length; c++) {
                colPoints[c] += c * hgap;
            }
        }
        */
        if (vgap > 0) {
            for (c = 1; c < rowPoints.length; c++) {
                rowPoints[c] += c * vgap;
            }
        }
        w = 0;
        for (c = 0; c < mWidths.length; c++) {
            w += mWidths[c] + hgap;
        }
        h = 0;
        for (r = 0; r < mHeights.length; r++) {
            h += mHeights[r] + vgap;
        }
        sz.width = w; //colPoints[cols];
        sz.height = h; //rowPoints[rows];
        sz.width += styles.paddingHorz();
        sz.height += styles.paddingVert();
        return sz;
    },
    _doLayoutItems: function (force, bounds) {
        var cnt = this.count();
        if (!cnt) return;
        var i, cell, child, item, r, c, r2, c2, w, h, wGap, hGap, css,
            cols, rows, x, y, cps, rps, masks, cells,
            m = this.model(),
            styles = m.styles(),
            tr = styles.deflatePaddings(bounds.clone()),
            wLine = this._line ? this._line.width() : 0;
        this.$_layoutCols(m, tr, wLine);
        this.$_layoutRows(m, tr, wLine);
        cols = m.cols();
        rows = m.rows();
        x = tr.x;
        y = tr.y;
        cps = this._colPoints;
        rps = this._rowPoints;
        for (i = 0; i < cnt; i++) {
            cell = this.getChild(i);
            child = cell.getChild(0);
            item = child.model();
            r = item.row();
            c = item.col();
            child.$_col = c;
            child.$_row = r;
            child.$_colSpan = item.colSpan();
            child.$_rowSpan = item.rowSpan();
            c2 = c + item.colSpan();
            if (c2 > cols - 1) {
                wGap = 0;
            } else {
                wGap = c < cols - 1 ? wLine : 0;
            }
            w = cps[c2] - cps[c] - wGap;
            r2 = r + item.rowSpan();
            if (r2 > rows - 1) {
                hGap = 0;
            } else {
                hGap = r < rows - 1 ? wLine : 0;
            }
            h = rps[r + item.rowSpan()] - rps[r] - hGap;
            cell.setVisible(h - hGap > 0 && w - wGap > 0);
            if (cell.visible()) {
                cell.setBounds(x + cps[c], y + rps[r], w, h);
                this._layoutChild(child, 0, 0, w, h);
            }
        }
        masks = m.rangeMasks();
        if (masks && masks.length > 0) {
            this.$_layoutRangeMasks(m, masks, tr);
        }
        if (this.designTime() && this._dom) {
            Dom.setBounds(this._designBack, bounds.x, bounds.y, bounds.width, bounds.height);
            Dom.clearChildren(this._designBack);
            cells = this._designCells;
            for (r = 0; r < rows; r++) {
                for (c = 0; c < cols; c++) {
                    i = r * cols + c;
                    cell = cells[i];
                    if (!cell) {
                        cell = new PrintDesignCellView(true);
                        cell._parent = this;
                        cells.push(cell);
                    }
                    cell.$_row = r;
                    cell.$_col = c;
                    cell.$_colSpan = 1;
                    cell.$_rowSpan = 1;
                    this._designBack.appendChild(cell._dom);
                    Dom.setBounds(cell._dom, cps[c], rps[r], cps[c + 1] - cps[c] - wGap, rps[r + 1] - rps[r] - hGap);
                    cell.setBounds(cps[c], rps[r], cps[c + 1] - cps[c] - wGap, rps[r + 1] - rps[r] - hGap);
                }
            }
        }
    },
    _doRenderHtml: function (r) {
        var i, j, x, y, x1, x2, y1, y2, p1, p2,
            m, styles, hLines, vLines, px, py, tr, g, wLine, right, bottom, colPts, rowPts, cols, rows,
            cps = this._colPoints,
            rps = this._rowPoints,
            line = this._line;
        if (!line && this.designTime()) {
            line = PrintElement.EMPTY_BORDER;
        }
        if (line && (cps.length > 1 || rps.length > 1)) {
            m = this.model();
            styles = m.styles();
            hLines = this._horzLines;
            vLines = this._vertLines;
            px = styles.paddingLeft();
            py = styles.paddingTop();
            tr = new Rectangle(0, 0, r.width, r.height);
            g = this.$_getBackGraphics(true, tr);
            wLine = line.width();
            right = tr.right();
            bottom = tr.bottom();
            colPts = cps.length - 1;
            rowPts = rps.length - 1;
            cols = m.cols();
            rows = m.rows();
            /*
            console.log('Horz Lines')
            for (i = 0; i < rows; i++) {
                var s = '';
                for (j = 0; j < cols; j++) {
                    s += hLines[i * cols + j];
                    if (j < cols - 1) s += ', ';
                }
                console.log(s);
            }
            console.log('Vert Lines')
            for (i = 0; i < rows; i++) {
                var s = '';
                for (j = 0; j < cols; j++) {
                    s += vLines[i * cols + j];
                    if (j < cols - 1) s += ', ';
                }
                console.log(s);
            }
            */
            for (i = 1; i < colPts; i++) {
                x = px + cps[i] - wLine;
                j = 0;
                y1 = 0;
                while (j < rows) {
                    while (j < rows && vLines[j * cols + i] == 0) {
                        j++;
                        y1++;
                    }
                    y2 = y1;
                    while (j < rows && vLines[j * cols + i] == 1) {
                        j++;
                        y2++;
                    }
                    p1 = y1 == 0 ? tr.x : (py + rps[y1]);
                    p2 = y2 == rows ? tr.bottom() : (py + rps[y2]);
                    g.drawVLineI(line, x, p1, p2);
                    y1 = y2;
                }
            }
            for (i = 1; i < rowPts; i++) {
                y = py + rps[i] - wLine;
                j = 0;
                x1 = 0;
                while (j < cols) {
                    while (j < cols && hLines[i * cols + j] == 0) {
                        j++;
                        x1++;
                    }
                    x2 = x1;
                    while (j < cols && hLines[i * cols + j] == 1) {
                        j++;
                        x2++;
                    }
                    p1 = x1 == 0 ? 0 : (px + cps[x1]);
                    p2 = x2 == cols ? tr.right() : (px + cps[x2]);
                    g.drawHLineI(line, y, p1, p2);
                    x1 = x2;
                }
            }
        }
    },
    _findCellAt: function (x, y) {
        var i, cell, cells, p, cnt,
            m = this.model();
        if (!m.empty()) {
            cells = this._designCells;
            p = this._designBack;
            cnt = m.cols() * m.rows();
            for (i = 0; i < cnt; i++) {
                cell = cells[i];
                if (cell.containsInBounds(x, y)) {
                    return cell;
                }
            }
        }
        return null;
    },
    $_intersects: function (x1, x2, x3, x4) {
        return (x3 >= x1 && x3 <= x2) || (x4 >= x1 && x4 <= x2);
    },
    getLower: function (child) {
        var i, v,
            views = this._childViews,
            cells = this._designCells,
            col = child.$_col,
            row = child.$_row,
            col2 = col + child.$_colSpan - 1,
            row2 = row + child.$_rowSpan;
        if (row2 >= this.model().rows()) {
            return;
        }
        for (i = views.length; i--;) {
            v = views[i];
            if (v.$_col == col && v.$_row == row2) {
                return v;
            }
        }
        for (i = views.length; i--;) {
            v = views[i];
            if (this.$_intersects(col, col2, v.$_col, v.$_col + v.$_colSpan - 1) && v.$_row == row2) {
                return v;
            }
        }
        for (i = cells.length; i--;) {
            v = cells[i];
            if (v.$_col == col && v.$_row == row2) {
                return v;
            }
        }
        for (i = cells.length; i--;) {
            v = cells[i];
            if (this.$_intersects(col, col2, v.$_col, v.$_col) && v.$_row == row2) {
                return v;
            }
        }
    },
    getUpper: function (child) {
        var i, v,
            views = this._childViews,
            cells = this._designCells,
            col = child.$_col,
            row = child.$_row,
            col2 = col + child.$_colSpan - 1,
            row2 = row - 1;
        if (row2 < 0) {
            return;
        }
        for (i = views.length; i--;) {
            v = views[i];
            if (v.$_col == col && v.$_row == row2) {
                return v;
            }
        }
        for (i = views.length; i--;) {
            v = views[i];
            if (this.$_intersects(col, col2, v.$_col, v.$_col + v.$_colSpan - 1) && this.$_intersects(row2, row2, v.$_row, v.$_row + v.$_rowSpan - 1)) {
                return v;
            }
        }
        for (i = cells.length; i--;) {
            v = cells[i];
            if (v.$_col == col && v.$_row == row2) {
                return v;
            }
        }
        for (i = cells.length; i--;) {
            v = cells[i];
            if (this.$_intersects(col, col2, v.$_col, v.$_col) && v.$_row == row2) {
                return v;
            }
        }
    },
    getRight: function (child) {
        var i, v,
            views = this._childViews,
            cells = this._designCells,
            row = child.$_row,
            col = child.$_col,
            row2 = row + child.$_rowSpan - 1,
            col2 = col + child.$_colSpan;
        if (col2 >= this.model().cols()) {
            return;
        }
        for (i = views.length; i--;) {
            v = views[i];
            if (v.$_row == row && v.$_col == col2) {
                return v;
            }
        }
        for (i = views.length; i--;) {
            v = views[i];
            if (this.$_intersects(row, row2, v.$_row, v.$_row + v.$_rowSpan - 1) && v.$_col == col2) {
                return v;
            }
        }
        for (i = cells.length; i--;) {
            v = cells[i];
            if (v.$_row == row && v.$_col == col2) {
                return v;
            }
        }
        for (i = cells.length; i--;) {
            v = cells[i];
            if (this.$_intersects(row, row2, v.$_row, v.$_row) && v.$_col == col2) {
                return v;
            }
        }
    },
    getLeft: function (child) {
        var i, v,
            views = this._childViews,
            cells = this._designCells,
            row = child.$_row,
            col = child.$_col,
            row2 = row + child.$_rowSpan - 1,
            col2 = col - 1;
        if (col2 < 0) {
            return;
        }
        for (i = views.length; i--;) {
            v = views[i];
            if (v.$_row == row && v.$_col == col2) {
                return v;
            }
        }
        for (i = views.length; i--;) {
            v = views[i];
            if (this.$_intersects(row, row2, v.$_row, v.$_row + v.$_rowSpan - 1) && this.$_intersects(col2, col2, v.$_col, v.$_col + v.$_colSpan - 1)) {
                return v;
            }
        }
        for (i = cells.length; i--;) {
            v = cells[i];
            if (v.$_row == row && v.$_col == col2) {
                return v;
            }
        }
        for (i = cells.length; i--;) {
            v = cells[i];
            if (this.$_intersects(row, row2, v.$_row, v.$_row) && v.$_col == col2) {
                return v;
            }
        }
    },
    getFirst: function () {
        var i, v2,
            views = this._childViews,
            v = views[0];
        for (i = views.length - 1; i > 0; i--) {
            v2 = views[i];
            if (v2.$_row < v.$_row || v2.$_row == v.$_row && v2.$_col < v.$_col) {
                v = v2;
            }
        }
        return v;
    },
    getLast: function () {
        var i, v2,
            views = this._childViews,
            v = views[views.length - 1];
        for (i = views.length - 2; i--;) {
            v2 = views[i];
            if (v2.$_row > v.$_row || v2.$_row == v.$_row && v2.$_col > v.$_col) {
                v = v2;
            }
        }
        return v;
    },
    $_layoutCols: function (m, r, wline) {
        var widths, dw, i, j, cw, x, w, last, colWidths, relWidths,
            pts = this._colPoints,
            cnt = pts.length - 1,
            wcols = pts[cnt],
            wtile = r.width,
            delta = wtile - wcols;
        if (delta > 0) {
            colWidths = m.colWidths();
            relWidths = this._relWidths;
            if (this._relWidthSum > 0) {
                widths = [];
                for (i = 1; i <= cnt; i++) {
                    widths.push(pts[i] - pts[i - 1]);
                }
                if (m.isFillWidth()) {
                    dw = delta;
                    last = -1;
                    for (i = 0; i < cnt; i++) {
                        cw = colWidths[i];
                        if (cw && !cw.fixed()) {
                            widths[i] += w = delta * cw.size() / this._relWidthSum;
                            dw -= w;
                            last = i;
                        }
                    }
                    if (last >= 0 && dw > 0) {
                        widths[last] += dw;
                    }
                } else {
                    for (i = 0; i < cnt; i++) {
                        cw = colWidths[i];
                        if (cw && !cw.fixed()) {
                            widths[i] += w = cw.getSize(delta);
                        }
                    }
                }
                for (i = 0; i < cnt; i++) {
                    pts[i + 1] = pts[i] + widths[i];
                }
            } else if (m.isFillWidth()) {
                if (this._absColCount > 0 && m.fillWidth() !== GroupFillMode.ALL) {
                    if (this._absColCount < cnt) {
                        widths = [];
                        for (i = 1; i <= cnt; i++) {
                            widths.push(pts[i] - pts[i - 1]);
                        }
                        delta /= cnt - this._absColCount;
                        for (i = 0; i < cnt; i++) {
                            cw = colWidths[i];
                            if (!cw) {
                                widths[i] += delta;
                            }
                        }
                        for (i = 0; i < cnt; i++) {
                            pts[i + 1] = pts[i] + widths[i];
                        }
                    }
                } else {
                    delta /= cnt;
                    for (i = 1; i < cnt; i++) {
                        pts[i] = pts[i] + delta * i;
                    }
                }
            }
            if (m.isFillWidth()) {
                pts[cnt] = wtile;
            }
        }
        x = pts[0];
        for (i = 0; i < cnt; i++) {
            w = _int(pts[i + 1] - x + 0);
            x = pts[i + 1] = x + w;
        }
        pts[cnt] = Math.min(wtile, pts[cnt]);
    },
    $_layoutRows: function (m, r, wline) {
        var heights, dh, i, j, rh, y, h, last, rowHeights, relHeights,
            pts = this._rowPoints,
            cnt = pts.length - 1,
            hrows = pts[cnt],
            htile = r.height,
            delta = htile - hrows;
        if (delta > 0) {
            rowHeights = m.rowHeights();
            relHeights = this._relHeights;
            if (this._relHeightSum > 0) {
                heights = [];
                for (i = 1; i <= cnt; i++) {
                    heights.push(pts[i] - pts[i - 1]);
                }
                if (m.isFillHeight()) {
                    dh = delta;
                    last = -1;
                    for (i = 0; i < cnt; i++) {
                        rh = rowHeights[i];
                        if (rh && !rh.fixed()) {
                            heights[i] += h = delta * rh.size() / this._relHeightSum;
                            dh -= h;
                            last = i;
                        }
                    }
                    if (last >= 0 && dh > 0) {
                        heights[last] += dh;
                    }
                } else {
                    for (i = 0; i < cnt; i++) {
                        rh = rowHeights[i];
                        if (rh && !rh.fixed()) {
                            heights[i] += h = rh.getSize(delta);
                        }
                    }
                }
                for (i = 0; i < cnt; i++) {
                    pts[i + 1] = pts[i] + heights[i];
                }
            } else if (m.isFillHeight()) {
                if (this._absRowCount > 0 && m.fillHeight() !== GroupFillMode.ALL) {
                    if (this._absRowCount < cnt) {
                        heights = [];
                        for (i = 1; i <= cnt; i++) {
                            heights.push(pts[i] - pts[i - 1]);
                        }
                        delta /= cnt - this._absRowCount;
                        for (i = 0; i < cnt; i++) {
                            rh = rowHeights[i];
                            if (!rh) {
                                heights[i] += delta;
                            }
                        }
                        for (i = 0; i < cnt; i++) {
                            pts[i + 1] = pts[i] + heights[i];
                        }
                    }
                } else {
                    delta /= cnt;
                    for (i = 1; i < cnt; i++) {
                        pts[i] = pts[i] + delta * i;
                    }
                }
            }
            if (m.isFillHeight()) {
                pts[cnt] = htile;
            }
        }
        y = pts[0];
        for (i = 0; i < cnt; i++) {
            h = _int(pts[i + 1] - y + 1);
            y = pts[i + 1] = y + h;
        }
        pts[cnt] = Math.min(htile, pts[cnt]);
    },
    $_layoutRangeMasks: function (model, masks, r) {
        var i, mask, view, c1, r1, c2, r2, x, y, w, h, off,
            cols = model.cols(),
            rows = model.rows(),
            map = this._maskMap,
            cps = this._colPoints,
            rps = this._rowPoints,
            container = this.itemContainer(),
            cr = this.boundsBy(container),
            wLine = this._line ? this._line.width() : 0;
        for (i = 0; i < masks.length; i++) {
            mask = masks[i];
            view = map[mask.$_hash];
            c1 = Math.min(cols - 1, mask.start().c);
            r1 = Math.min(rows - 1, mask.start().r);
            c2 = Math.min(cols - 1, mask.end().c);
            r2 = Math.min(rows - 1, mask.end().r);
            x = cr.x + r.x + cps[c1];
            y = cr.y + r.y + rps[r1];
            w = cps[c2 + 1] - cps[c1];
            h = rps[r2 + 1] - rps[r1];
            if (c2 <= cols - 1) {
                w -= c1 < cols - 1 ? wLine : 0;
            }
            if (r2 <= rows - 1) {
                h -= r1 < rows - 1 ? wLine : 0;
            }
            if (!view) {
                container.addFeedback(view = new PrintTileMaskElement(this._dom, mask, this._printing));
                map[mask.$_hash] = view;
            }
            off = mask.offset();
            if (off != 0) {
                x -= off;
                y -= off;
                w += off * 2;
                h += off * 2;
            }
            view.setBounds(x, y, w, h);
        }
    }
});
var PrintCard = defineClass("PrintCard", PrintItemContainerImpl, {
    init: function (owner) {
        this._super('printCard', owner);
        this._itemStyles = new PrintStyles(this, {
        });
        this._itemStyles.setParent(owner._styles, false);
        this._styles.setSysDefault(new PrintStyles(null, "cardDefault", {
            border: "#888",
            paddingTop: 6,
            paddingBottom: 6,
            paddingLeft: 12,
            paddingRight: 12
        }), false);
    },
    rowGap: IntProp(10),
    item: null,
    itemStyles: null,
    setItem: function (value) {
        if (value) {
            var item;
            if (value.type === 'list') {
                item = this._item || new DefaultCardItem(this);
            } else {
                item = this._item = this._owner.delegate().getItem(value.type);
            }
            item._parent = this;
            item.assign(value);
        }
    },
    setItemStyles: function (value) {
        if (value !== this._itemStyles) {
            this._itemStyles.extend(value);
        }
    },
    _doClear: function () {
        this._super();
        this._rowGap = 10;
        this._item = null;
        this._itemStyles.clearValues();
    }
});
var DefaultCardItem = defineClass("DefaultCardItem", PrintList, {
    init: function (card) {
        this._super();
        this._parent = card;
        var grid = this.owner().ownerGrid();
        grid && this.$_generate(grid);
        this.headerStyles().setSysDefault(new PrintStyles(null, "cardItemHeader", {
            fontBold: true,
            paddingRight: 6//,
        }));
        this.itemStyles().setSysDefault(new PrintStyles(null, "cardItemItem", {
        }));
        this.styles().setSysDefault(new PrintStyles(null, "cardItem", {
            line: null
        }));
        this.setLeft(0);
        this.setRight(0);
        this.setItemWidth('100%');
    },
    $_generate: function (grid) {
        var i, col, item,
            columns = grid.getDataColumns(),
            items = [];
        for (i = 0; i < columns.length; i++) {
            col = columns[i];
            item = {
                header: {
                    left: null,
                    right: 0,
                    text: col.header().displayText() + " :"
                },
                data: "$row.column." + col.name(),
                styles: {
                    textWrap: col.styles().textWrap()
                }
            };
            items.push(item);
        }
        this.setItems(items);
    }
});
var PrintCardElement = defineClass("PrintCardElement", PrintElement, {
    init: function (dom, model, printing) {
        this._super(dom, "cardView", model, printing);
    },
    row: null,
    _getElementStyles: function (m) {
        return m.itemStyles();
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
        var m = this.model(),
            item = m.item(),
            styles = m.itemStyles(),
            delegate = this.container().delegate(),
            sz = { width: 0, height: 0 },
            itemView = this._itemView;
        if (!itemView) {
            itemView = this._itemView = this._createItemView(delegate, m.item(), this._printing);
            if (itemView) {
                this.addElement(itemView);
            }
        }
        if (itemView) {
            itemView.setVisible(true);
            if (item.left() && item.right()) {
                hintWidth = hintWidth - item.right().getSize(hintWidth) - item.left().getSize(hintWidth);
            }
            itemView.measure(hintWidth, hintHeight, force);
        }
        sz.width += itemView._measuredWidth + styles.paddingHorz();
        sz.height += itemView._measuredHeight + styles.paddingVert();
        return sz;
    },
    _doLayoutItems: function (force, bounds) {
        var itemView = this._itemView;
        if (itemView) {
            var m = this.model();
            var styles = m.itemStyles();
            var r = styles.deflatePaddings(bounds.clone());
            this._layoutChild(itemView, r.x, r.y, r.width, r.height);
        }
    },
    _doRenderHtml: function (r) {
    }
});
var PrintBandItem = defineClass("PrintBandItem", PrintItemContainer, {
    init: function (name, band) {
        this._super(name, band.owner());
        this._band = band;
        this._itemStyles = new PrintStyles('bandItemStyles');
        this._itemStyles.setParent(band.styles(), false);
    },
    itemStyles: null,
    setItemStyles: function (value) {
        if (value !== this._itemStyles) {
            this._itemStyles.extend(value);
        }
    },
    band: function () {
        return this._band;
    },
    width: function () {
        return undefined;
    },
    height: function () {
        return undefined;
    },
    minWidth: function () {
        return undefined;
    },
    maxWidth: function () {
        return undefined;
    },
    minHeight: function () {
        return undefined;
    },
    maxHeight: function () {
        return undefined;
    }
});
var PrintBand = defineClass("Printand", EventAware, {
    init: function (owner) {
        this._super();
        this._owner = owner;
        this._index = -1;
        this._styles = new PrintStyles(this, "band");
        this._styles.setParent(owner.styles(), false);
        this._sectionHeader = this._createSectionHeader();
        this._sectionFooter = this._createSectionFooter();
        this._header = this._createHeader();
        this._footer = this._createFooter();
        this._rowTemplate = this._createRowTemplate();
    },
    stylesChanged: function (/*styleProp*/) {
        this._changed();
    },
    data: null,
    sectionHeader: null,
    sectionFooter: null,
    rowTemplate: null,
    rowTempaltes: null,
    header: null,
    footer: null,
    dataSource: null,
    styles: null,
    rowGap: 0,
    setData: function (value) {
        if (value !== this._data) {
            this._data = value;
        }
    },
    setSectionHeader: function (value) {
        if (value !== this._sectionHeader) {
            this._sectionHeader.assign(value);
        }
    },
    setSectionFooter: function (value) {
        if (value !== this._sectionFooter) {
            this._sectionFooter.assign(value);
        }
    },
    setHeader: function (value) {
        if (value !== this._header) {
            this._header.assign(value);
        }
    },
    setFooter: function (value) {
        if (value !== this._footer) {
            this._footer.assign(value);
        }
    },
    setRowTemplate: function (value) {
        if (value !== this._rowTemplate) {
            this._rowTemplate.assign(value);
        }
    },
    setStyles: function (value) {
        if (value !== this._styles) {
            this._styles.extend(value);
        }
    },
    owner: function () {
        return this._owner;
    },
    parent: function () {
        return this._owner;
    },
    index: function () {
        return this._index;
    },
    rows: function () {
        return this._rows;
    },
    width: function () {
        return undefined;
    },
    height: function () {
        return undefined;
    },
    minWidth: function () {
        return undefined;
    },
    maxWidth: function () {
        return undefined;
    },
    minHeight: function () {
        return undefined;
    },
    maxHeight: function () {
        return undefined;
    },
    delegate: function () {
        return this._owner.delegate();
    },
    dispose: function () {
    },
    _createSectionHeader: function () {
        return new PrintSectionHeader(this);
    },
    _createSectionFooter: function () {
        return new PrintSectionFooter(this);
    },
    _createHeader: function () {
    },
    _createFooter: function () {
    },
    _createRowTemplate: function () {
    },
    _changed: function (item) {
        this._dirty = true;
        this.fireEvent(PrintBand.CHANGED);
    },
    _createItem: function (delegate, source) {
        return delegate.getItem(source);
    },
    $_prepareBand: function () {
        this._sectionHeader.$_prepareBand(this);
        this._sectionFooter.$_prepareBand(this);
        this._header.$_prepareBand(this);
        this._footer.$_prepareBand(this);
        this._rowTemplate.$_prepareBand(this);
    }
}, {
    CHANGED: "onPrintBandChanged"
});
var PrintBandCollection = defineClass("PrintBandCollection", EventAware, {
    init: function (owner) {
        this._super();
        this._owner = owner;
        this._items = [];
    },
    count: function () {
        return this._items.length;
    },
    parent: function () {
        return undefined;
    },
    getItem: function (index) {
        return this._items[index];
    },
    clear: function () {
        this._items.forEach(function (item) {
            item.dispose();
        });
        this._items.length = 0;
    },
    assign: function (source) {
        var i, cnt, src, t, band,
            owner = this._owner;
        if (source && (cnt = source.length) > 0) {
            for (i = 0; i < cnt; i++) {
                src = source[i];
                if (_isObject(src)) {
                    t = src.type;
                    if (!t) {
                        if (_isArray(src.columns)) {
                            t = 'table';
                        }
                    }
                    switch (t) {
                        case "table":
                            band = new PrintTableBand(owner);
                            break;
                        case "crosstab":
                            band = new PrintCrosstabBand(owner);
                            break;
                        default:
                            band = new PrintDataBand(owner);
                            break;
                    }
                    band.assign(src);
                    this._items.push(band);
                    band._index = this._items.length - 1;
                }
            }
        }
    }
});
var PrintDataBandItem = defineClass("PrintDataBandItem", PrintBandItem, {
    init: function (name, band) {
        this._super(name, band);
    }
});
var PrintDataBandHeader = defineClass("PrintDataBandHeader", PrintDataBandItem, {
    init: function (owner) {
        this._super('dataBandHeader', owner);
    }
});
var PrintDataBandFooter = defineClass("PrintDataBandFooter", PrintDataBandItem, {
    init: function (owner) {
        this._super('dataBandFooter', owner);
    }
});
var PrintDataBandRow = defineClass("PrintDataBandRow", PrintDataBandItem, {
    init: function (owner) {
        this._super('dataBandRow', owner);
        this._firstStyles = new PrintStyles('bandRowFirstStyles');
        this._firstStyles.setParent(this._itemStyles, false);
        this._lastStyles = new PrintStyles('bandRowLastStyles');
        this._lastStyles.setParent(this._itemStyles, false);
    },
    firstStyles: null,
    lastStyles: null,
    styleCallback: null, // function (ds, dataRow, printItem, styles)
    setFirstStyles: function (value) {
        if (value !== this._firstStyles) {
            this._firstStyles.extend(value);
        }
    },
    setLastStyles: function (value) {
        if (value !== this._lastStyles) {
            this._lastStyles.extend(value);
        }
    }
});
var PrintDataBand = defineClass("PrintDataBand", PrintBand, {
    init: function (owner) {
        this._super(owner);
    },
    pageMaxRows: 0,
    maxRows: 0,
    rowFilter: null,    // function (ds, dataRow):Boolean
    sortDescription: null,
    groupDescription: null,
    columns: 1,
    columnLayout: PageColumnLayout.DOWN_THEN_ACROSS,
    rows: function () {
        return this._rows;
    },
    dispose: function () {
    },
    _createHeader: function () {
        return new PrintDataBandHeader(this);
    },
    _createFooter: function () {
        return new PrintDataBandFooter(this);
    },
    _createRowTemplate: function () {
        return new PrintDataBandRow(this);
    }
});
var PrintDataBandItemElement = defineClass("PrintDataBandItemElement", PrintElement, {
    init: function (dom, name, model, printing) {
        this._super(dom, name, model, printing);
        this._childMap = {};
    },
    getItemView: function (item) {
        return this._childMap[item.$_hash];
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
            this._measureChildren(hintWidth, hintHeight, force);
        return this._layout.measure(hintWidth, hintHeight);
    },
    _doLayoutItems: function (force, r) {
            this._layout.layout(r);
            this._layoutNeeded = false;
    },
    _measureChildren: function (hintWidth, hintHeight, force) {
        var delegate, i, cnt, item, view,
            m = this.model();
        this.hideAll();
        if (m instanceof PrintDataBandItem) {
            delegate = this.container().delegate();
            for (i = 0, cnt = m.count(); i < cnt; i++) {
                item = m.getItem(i);
                view = this._childMap[item.$_hash];
                if (!view) {
                    view = delegate.getItemView(item, this._printing);
                    if (view) {
                        this._childMap[item.$_hash] = view;
                        this.addElement(view);
                    }
                }
                if (view) {
                    view.setVisible(true);
                    view.measure(hintWidth, hintHeight, force);
                }
            }
        }
    }
});
var PrintDataBandHeaderElement = defineClass("PrintDataBandHeaderElement", PrintDataBandItemElement, {
    init: function (dom, model, printing) {
        this._super(dom, "dataBandPageHeaderView", model, printing);
    }
});
var PrintDataBandFooterElement = defineClass("PrintDataBandFooterElement", PrintDataBandItemElement, {
    init: function (dom, model, printing) {
        this._super(dom, "dataBandPageFooterView", model, printing);
    }
});
var PrintDataBandRowElement = defineClass("PrintDataBandRowElement", PrintDataBandItemElement, {
    init: function (dom, model, printing) {
        this._super(dom, "dataBandRowView", model, printing);
    },
    setRow: function (data, row) {
        this._data = data;
        this._row = row;
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
        this._measureChildren(hintWidth, hintHeight, force);
        return this._layout.measure(hintWidth, hintHeight);
    },
    _doLayoutItems: function (force, r) {
        this._layout.layout(r);
        this._layoutNeeded = false;
    },
    _measureChildren: function (hintWidth, hintHeight, force) {
        var delegate, i, cnt, item, view,
            layout = this._layout,
            m = this.model();
        this.hideAll();
        if (m instanceof PrintDataBandItem) {
            delegate = this.container().delegate();
            for (i = 0, cnt = m.count(); i < cnt; i++) {
                item = m.getItem(i);
                view = this._childMap[item.$_hash];
                if (!view) {
                    view = delegate.getItemView(item, this._printing);
                    if (view) {
                        this._childMap[item.$_hash] = view;
                        this.addElement(view);
                    }
                }
                if (view) {
                    view.setVisible(true);
                    view.measure(hintWidth, hintHeight, force);
                }
            }
        }
    }
});
var PrintDataBandElement = defineClass("PrintDataBandElement", PrintElement, {
    init: function (dom, model, printing) {
        this._super(dom, "dataBandView", model, printing);
        this._sectionHeaderView = null;
        this._sectionFooterView = null;
        this._headerView = null;
        this._footerView = null;
        this._rowViews = [];
        this._sectionLayout = new PrintSectionLayout();
        this._itemLayout = new PrintDataBandItemLayout();
        this._rowLayout = new PrintDataBandRowLayout(this);
        this._current = 0;
    },
    sectionHeaderView: function () {
        return this._sectionHeaderView;
    },
    sectionFooterView: function () {
        return this._sectionFooterView;
    },
    headerView: function () {
        return this._headerView;
    },
    footerView: function () {
        return this._footerView;
    },
    setSummaryRuntime: function (runtime) {
        this._summaryRuntime = runtime;
    },
    currentRow: function () {
        return this._current;
    },
    hasRows: function () {
        return this._current < this._rowViews.length;
    },
    getNextRow: function () {
        return this._rowViews[this._current++];
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
        var item, itemStyles,
            m = this.model(),
            data = m.owner().dataProvider().getData(m.data()),
            sectionHeader = m.sectionHeader(),
            sectionFooter = m.sectionFooter(),
            header = m.header(),
            footer = m.footer(),
            sectionHeaderView = this._sectionHeaderView,
            sectionFooterView = this._sectionFooterView,
            headerView = this._headerView,
            footerView = this._footerView,
            delegate = this.container().delegate(),
            styles = m.styles(),
            sz = { width: styles.paddingHorz(), height: styles.paddingVert() };
        m.$_prepareBand();
        if (sectionHeader.visible()) {
            if (!sectionHeaderView) {
                sectionHeaderView = this._sectionHeaderView = new PrintSectionHeaderElement(this._dom, sectionHeader, this._printing);
                this.addElement(sectionHeaderView);
            }
            sectionHeaderView.setVisible(true);
            sectionHeaderView.measure(hintWidth, hintHeight, force);
        }
        if (header.visible()) {
            if (!headerView) {
                headerView = this._headerView = new PrintDataBandHeaderElement(this._dom, header, this._printing);
                this.addElement(headerView);
            }
            headerView.setVisible(true);
            headerView._layout = this._itemLayout;
            this._itemLayout.setContainerView(headerView);
            headerView.measure(hintWidth, hintHeight, force);
        }
        data && this.$_prepareRows(m, data, hintWidth, hintHeight);
        if (footer.visible()) {
            if (!footerView) {
                footerView = this._footerView = new PrintDataBandFooterElement(this._dom, footer, this._printing);
                this.addElement(footerView);
            }
            footerView.setVisible(true);
            footerView._layout = this._itemLayout;
            this._itemLayout.setContainerView(footerView);
            footerView.measure(hintWidth, hintHeight, force);
        }
        if (sectionFooter.visible()) {
            if (!sectionFooterView) {
                sectionFooterView = this._sectionFooterView = new PrintSectionFooterElement(this._dom, sectionFooter, this._printing);
                this.addElement(sectionFooterView);
            }
            sectionFooterView.setVisible(true);
            sectionFooterView.measure(hintWidth, hintHeight, force);
        }
        return sz;
    },
    _doLayoutItems: function (force, rc) {
    },
    $_prepareRows: function (model, data, hintWidth, hintHeight) {
        var i, cnt, r, view,
            dom = this._dom,
            m = model.rowTemplate(),
            layout = this._rowLayout,
            views = this._rowViews,
            filter = model.rowFilter(),
            rows = [],
            summarizer = new PrintDataSummarizer(data, rows);
        views.length = 0;
        r = 0;
        for (i = 0, cnt = data.count(); i < cnt; i++) {
            data.setRow(i);
            if (!filter || filter(data, r)) {
                view = this.$_createRowView(dom, m);
                this.addElement(view);
                view._layout = layout.setContainerView(view);
                view.measure(hintWidth, hintHeight, true);
                views.push(view);
                rows.push(i);
                r++;
            }
        }
        this._summaryRuntime.setDataSource(data.source(), summarizer.summarize());
    },
    $_createRowView: function (dom, model) {
        var view = new PrintDataBandRowElement(dom, model, true);
        return view;
    }
});
var PrintTableBandItem = defineClass("PrintTableBandItem", PrintBandItem, {
    init: function (name, table) {
        this._super(name, table);
        this._itemMap = {}; // col => [item]
    },
    fillWidth: EnumProp(GroupFillMode, GroupFillMode.NORMAL),
    items: null,
    itemLeft: undefined,
    itemRight: undefined,
    itemTop: undefined,
    itemBottom: undefined,
    setItems: function (value) {
        if (value !== this._items) {
            var item, i, cnt, v,
                delegate = this._delegate();
            this._items = [];
            if (_isArray(value)) {
                for (i = 0, cnt = value.length; i < cnt; i++) {
                    v = value[i];
                    item = this._createItem(delegate, v);
                    if (item) {
                        this.$_internalAddItem(item, null, v);
                        item._index = i;
                    }
                }
            } else if (value) {
                item = this._createItem(delegate, value);
                if (item) {
                    this.$_internalAddItem(item, null, v);
                    item._index = 0;
                }
            }
            this._changed();
        }
    },
    setItemLeft: function (value) {
        this._itemLeft = PrintDimension.createFrom(value);
    },
    setItemTop: function (value) {
        this._itemTop = PrintDimension.createFrom(value);
    },
    setItemRight: function (value) {
        this._itemRight = PrintDimension.createFrom(value);
    },
    setItemBottom: function (value) {
        this._itemBottom = PrintDimension.createFrom(value);
    },
    count: function () {
        return this._items.length;
    },
    isFillWidth: function () {
        return this._fillWidth == GroupFillMode.NORMAL || this._fillWidth == GroupFillMode.ALL;
    },
    isFillHeight: function () {
        return this._fillHeight == GroupFillMode.NORMAL || this._fillHeight == GroupFillMode.ALL;
    },
    getItems: function (col) {
        return this._itemMap[col];
    },
    $_attached: function () {
        this._itemStyles.setParent(this._styles._root, false);
    },
    _delegate: function () {
        return this.owner().delegate();
    },
    _createItem: function (delegate, source) {
        return delegate.getItem(source);
    },
    $_internalAddItem: function (item, parentStyles, source) {
        var map, col, items;
        this._items.push(item);
        item._parent = this;
        item.styles().setParent(parentStyles || this._itemStyles, false);
        item.styles()._root = this._styles._root;
        item.$_attached();
        item.assign(source);
        map = this._itemMap;
        col = item.col();
        items = map[col];
        if (!items) {
            map[col] = items = [];
        }
        items.push(item);
        return item;
    },
    $_prepareBand: function (band) {
        this._dataBand = band;
        for (var i = this._items.length; i--;) {
            this._items[i].$_prepareBand(band);
        }
    }
});
var PrintTableBandHeader = defineClass("PrintTableBandHeader", PrintTableBandItem, {
    init: function (owner) {
        this._super('tableBandHeader', owner);
    }
});
var PrintTableBandFooter = defineClass("PrintTableBandFooter", PrintTableBandItem, {
    init: function (owner) {
        this._super('tableBandFooter', owner);
    }
});
var PrintTableBandRow = defineClass("PrintTableBandRow", PrintTableBandItem, {
    init: function (owner) {
        this._super('tableBandRow', owner);
    }
});
var PrintTableColumn = defineClass("PrintTableColumn", EventAware, {
    init: function (config) {
        this._super('tableColumn');
        config && this.assign(config);
    },
    fieldName: null,
    width: PrintDimension.createFrom(100),
    setWidth: function (value) {
        if (value !== this._width) {
            this._width = PrintDimension.createFrom(value);
        }
    }
});
var PrintTableBand = defineClass("PrintTableBand", PrintBand, {
    init: function (owner) {
        this._super(owner);
        this._columns = [];
    },
    columns: null,
    rowFilter: null,    // function (ds, dataRow):Boolean
    defaultWidth: 100,
    setColumns: function (value) {
        if (value !== this._columns) {
            this._columns = this.$_parseColumns(value);
        }
    },
    columnCount: function () {
        return this._columns.length;
    },
    isFillWidth: function () {
        return false;
    },
    getColumns: function () {
        return this._columns.slice();
    },
    getColumn: function (index) {
        return this._columns[index];
    },
    _createHeader: function () {
        return new PrintTableBandHeader(this);
    },
    _createFooter: function () {
        return new PrintTableBandFooter(this);
    },
    _createRowTemplate: function () {
        return new PrintTableBandRow(this);
    },
    $_parseColumns: function (source) {
        var i, col,
            cols = [];
        if (_isArray(source)) {
            for (i = 0; i < source.length; i++) {
                col = new PrintTableColumn(source[i]);
                cols.push(col);
            }
        }
        return cols;
    }
});
var PrintTableBandItemElement = defineClass("PrintTableBandItemElement", PrintElement, {
    init: function (dom, name, model, printing) {
        this._super(dom, name, model, printing);
        this._childMap = {};    // item => item view
        this._cellViews = [];   // col => cell view
        this._childViews = [];
    },
    getItemView: function (item) {
        return this._childMap[item.$_hash];
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
        this._measureChildren(hintWidth, hintHeight, force);
        return this._layout.measure(hintWidth, hintHeight);
    },
    _doLayoutItems: function (force, r) {
        this._layout.layout(r);
        this._layoutNeeded = false;
    },
    _measureChildren: function (hintWidth, hintHeight, force) {
        var delegate, i, cnt, col, items, item, view, cell, j, cnt2, w,
            printing = this._printing,
            layout = this._layout,
            m = this.model(),
            band = m.band();
        _assert(m instanceof PrintTableBandItem);
        this.hideAll();
        delegate = this.container().delegate();
        for (i = 0, cnt = band.columnCount(); i < cnt; i++) {
            col = band.getColumn(i);
            cell = this._cellViews[i];
            if (!cell) {
                cell = new PrintCellView(this._dom);
                this._cellViews[i] = cell;
                this.addElement(cell);
            }
            items = m.getItems(i);
            if (items && (cnt2 = items.length) > 0) {
                for (j = 0; j < cnt2; j++) {
                    item = items[j];
                    item.$_bandField = col.fieldName();
                    view = this._childMap[item.$_hash];
                    if (!view) {
                        view = delegate.getItemView(item, printing);
                        if (view) {
                            this._childMap[item.$_hash] = view;
                            cell.addElement(view);
                        }
                    }
                    if (view) {
                        view.setVisible(true);
                        w = layout.getWidth(i);
                        view.measure(w, hintHeight, force);
                    }
                }
            }
        }
    }
});
var PrintTableBandHeaderElement = defineClass("PrintTableBandHeaderElement", PrintTableBandItemElement, {
    init: function (dom, model, printing) {
        this._super(dom, "tableBandPageHeaderView", model, printing);
    }
});
var PrintTableBandFooterElement = defineClass("PrintTableBandFooterElement", PrintTableBandItemElement, {
    init: function (dom, model, printing) {
        this._super(dom, "tableBandPageFooterView", model, printing);
    }
});
var PrintTableBandRowElement = defineClass("PrintTableBandRowElement", PrintTableBandItemElement, {
    init: function (dom, model, printing) {
        this._super(dom, "tableBandPageFooterView", model, printing);
    }
});
var PrintTableBandElement = defineClass("PrintTableBandElement", PrintElement, {
    init: function (dom, model, printing) {
        this._super(dom, "listBandView", model, printing);
        this._sectionHeaderView = null;
        this._sectionFooterView = null;
        this._headerView = null;
        this._footerView = null;
        this._rowViews = [];
        this._sectionLayout = new PrintSectionLayout();
        this._bandLayout = this._itemLayout = this._rowLayout = new PrintTableBandLayout(this);
        this._current = 0;
    },
    sectionHeaderView: function () {
        return this._sectionHeaderView;
    },
    sectionFooterView: function () {
        return this._sectionFooterView;
    },
    headerView: function () {
        return this._headerView;
    },
    footerView: function () {
        return this._footerView;
    },
    setSummaryRuntime: function (runtime) {
        this._summaryRuntime = runtime;
    },
    currentRow: function () {
        return this._current;
    },
    hasRows: function () {
        return this._current < this._rowViews.length;
    },
    getNextRow: function () {
        return this._rowViews[this._current++];
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
        var item, itemStyles,
            m = this.model(),
            data = m.owner().dataProvider().getData(m.data()),
            sectionHeader = m.sectionHeader(),
            sectionFooter = m.sectionFooter(),
            header = m.header(),
            footer = m.footer(),
            sectionHeaderView = this._sectionHeaderView,
            sectionFooterView = this._sectionFooterView,
            headerView = this._headerView,
            footerView = this._footerView,
            delegate = this.container().delegate(),
            styles = m.styles(),
            sz = { width: styles.paddingHorz(), height: styles.paddingVert() };
        m.$_prepareBand();
        this._bandLayout.measureColumns();
        this._bandLayout.layoutColumns();
        if (sectionHeader.visible()) {
            if (!sectionHeaderView) {
                sectionHeaderView = this._sectionHeaderView = new PrintSectionHeaderElement(this._dom, sectionHeader, this._printing);
                this.addElement(sectionHeaderView);
            }
            sectionHeaderView.setVisible(true);
            sectionHeaderView.measure(hintWidth, hintHeight, force);
        }
        if (header.visible()) {
            if (!headerView) {
                headerView = this._headerView = new PrintTableBandHeaderElement(this._dom, header, this._printing);
                this.addElement(headerView);
            }
            headerView.setVisible(true);
            headerView._layout = this._bandLayout;
            this._bandLayout.setContainerView(headerView);
            headerView.measure(hintWidth, hintHeight, force);
        }
        data && this.$_prepareRows(m, data, hintWidth, hintHeight);
        if (footer.visible()) {
            if (!footerView) {
                footerView = this._footerView = new PrintTableBandFooterElement(this._dom, footer, this._printing);
                this.addElement(footerView);
            }
            footerView.setVisible(true);
            footerView._layout = this._bandLayout;
            this._bandLayout.setContainerView(footerView);
            footerView.measure(hintWidth, hintHeight, force);
        }
        if (sectionFooter.visible()) {
            if (!sectionFooterView) {
                sectionFooterView = this._sectionFooterView = new PrintSectionFooterElement(this._dom, sectionFooter, this._printing);
                this.addElement(sectionFooterView);
            }
            sectionFooterView.setVisible(true);
            sectionFooterView.measure(hintWidth, hintHeight, force);
        }
        return sz;
    },
    _doLayoutItems: function (force, rc) {
    },
    $_prepareRows: function (model, data, hintWidth, hintHeight) {
        var i, cnt, r, view,
            dom = this._dom,
            m = model.rowTemplate(),
            layout = this._bandLayout,
            views = this._rowViews,
            filter = model.rowFilter(),
            rows = [],
            summarizer = new PrintDataSummarizer(data, rows);
        views.length = 0;
        r = 0;
        for (i = 0, cnt = data.count(); i < cnt; i++) {
            data.setRow(i);
            if (!filter || filter(data, r)) {
                view = this.$_createRowView(dom, m);
                this.addElement(view);
                view._layout = layout.setContainerView(view);
                view.measure(hintWidth, hintHeight, true);
                views.push(view);
                rows.push(i);
                r++;
            }
        }
        this._summaryRuntime.setDataSource(data.source(), summarizer.summarize());
    },
    $_createRowView: function (dom, model) {
        var view = new PrintTableBandRowElement(dom, model, true);
        return view;
    }
});
var CrosstabField = defineClass("CrosstabField", EventAware, {
    init: function () {
        this._super();
    },
    fieldName: null,
    value: undefined,
    assignSimple: function (value) {
        this.setFieldName(value);
    }
});
var Crosstab = defineClass("Crosstab", EventAware, {
    init: function (config) {
        this._super();
        this._items = new CrosstabItemSet(this);
        this._columns = new CrosstabColumnSource(this);
        this._rows = new CrosstabRowSource(this);
        config && this.assign(config);
    },
    rowFields: null,    // [ CrosstabField ]
    columnFields: null, // [ CrosstabField ]
    valueFields: null,  // [ CrosstabField ]
    setDataSource: function (value) {
        if (value != this._dataSource) {
            this._dataSource = value;
        }
        return this;
    },
    setRowFields: function (value) {
        if (value !== this._rowFields) {
            this._rowFields = this.$_parseFields(value);
        }
        return this;
    },
    setColumnFields: function (value) {
        if (value !== this._columnFields) {
            this._columnFields = this.$_parseFields(value);
        }
        return this;
    },
    setValueFields: function (value) {
        if (value !== this._valueFields) {
            this._valueFields = this.$_parseFields(value);
        }
        return this;
    },
    dataSource: function () {
        return this._dataSource;
    },
    rowFieldCount: function () {
        return this._rowFields ? this._rowFields.length : 0;
    },
    columnFieldCount: function () {
        return this._columnFields ? this._columnFields.length : 0;
    },
    valueFieldCount: function () {
        return this._valueFields ? this._valueFields.length : 0;
    },
    fieldCount: function () {
        return this.rowFieldCount() + this.columnFieldCount() + this.valueFieldCount();
    },
    rowCount: function () {
        return this._rows.rowCount();
    },
    setFields: function (rowFields, columnFields, valueFields) {
        return this.setRowFields(rowFields).setColumnFields(columnFields).setValueFields(valueFields);
    },
    getRowField: function (index) {
        return this._rowFields[index];
    },
    getColumnField: function (index) {
        return this._columnFields[index];
    },
    build: function (dataSource) {
        this._dataSource = dataSource;
        this._items.build();
        this._columns.build(this._items);
        this._rows.build(this._items);
    },
    getValue: function (r, field, index) {
        var col = this._columns._leafColumns[index],
            row = this._rows._rows[r],
            item = row.getItemOf(col),
            fld = this._valueFields[0].fieldName();
        if (field == '{row}') {
            return row.getValue(index);
        }
        return item ? item.getSummary(this._dataSource, fld, 'sum') : undefined;
    },
    /** @internal */
    groupFields: function () {
        var flds = [];
        if (this._rowFields) flds = flds.concat(this._rowFields);
        if (this._columnFields) flds = flds.concat(this._columnFields);
        return flds;
    },
    /** @internal */
    items: function () {
        return this._items;
    },
    /** @internal */
    columns: function () {
        return this._columns;
    },
    /** @internal */
    rows: function () {
        return this._rows;
    },
    $_parseFields: function (src) {
        var i, field,
            fields = [];
        if (_isArray(src) && src.length > 0) {
            for (i = 0; i < src.length; i++) {
                field = new CrosstabField();
                field.assign(src[i]);
                fields.push(field);
            }
        }
        return fields;
    }
});
var CrosstabItem = defineClass("CrosstabItem", null, {
    init: function (values, rows) {
        this._super();
        this._values = values.slice();
        this._rows = rows.slice();
        this._summary = {};
    },
    rowCount: function () {
        return this._rows.length;
    },
    getValue: function (index) {
        return this._values[index];
    },
    getRow: function (index) {
        return this._rows[index];
    },
    getSummary: function (ds, field, value) {
        var v,
            summary = this._summary[field];
        if (!summary) {
            summary = {};
            this._summary[field] = summary;
        }
        v = summary[value];
        if (v === undefined) {
            v = this['$_' + value](ds, field);
            summary[value] = v;
        }
        return v;
    },
    $_sum: function (ds, field) {
        var i,
            rows = this._rows,
            v = 0;
        for (i = rows.length; i--;) {
            v += ds.getValueAt(rows[i], field);
        }
        return v;
    }
});
var CrosstabItemSet = defineClass("CrosstabItemSet", EventAware, {
    init: function (table) {
        this._super();
        this._table = table;
        this._filters = null;
        this._rows = [];
        this._items = [];
    },
    itemCount: function () {
        return this._items.length;
    },
    getItem: function (index) {
        return this._items[index];
    },
    getItems: function (start, end) {
        start = Math.max(0, arguments.length > 0 ? start : 0);
        end = arguments.length > 0 ? end : MAX_INT;
        return this._items.slice(start, end);
    },
    setFilters: function (filters) {
        this._filters = filters && filters.length > 0 ? filters : null;
    },
    build: function () {
        this._refreshItems();
    },
    $_calculateItem: function (item) {
    },
    _refreshItems: function () {
        this.$_clearItems();
        this._table && this.$_populateItems(this._table);
        this.fireEvent(CrosstabItemSet.REFRESH);
    },
    $_clearItems: function () {
        this._rows = [];
        this._items = [];
    },
    $_populateItems: function (table) {
        var ds = table.dataSource(),
            fields = table.groupFields();
        if (ds && fields) {
            this.$_collectRows(ds);
            this.$_sortRows(ds, this._rows, fields);
            this.$_buildItems(ds, this._rows, fields);
        }
    },
    $_collectRows: function (ds) {
        var cnt = ds.count(),
            filters = this._filters,
            rows = this._rows = new Array(cnt),
            i, n;
        if (filters) {
            n = 0;
            for (i = 0; i < cnt; i++) {
                if (filters.select(ds, i)) {
                    rows[n++] = i;
                }
            }
            rows.length = n;
        } else {
            for (i = 0; i < cnt; i++) {
                rows[i] = i;
            }
        }
    },
    $_sortRows: function (ds, rows, fields) {
        this.$_sortLevel(ds, 0, 0, rows.length - 1, rows, fields);
    },
    $_buildItems: function (ds, rows, fieldList) {
        var item, row, f, diff, list,
            items = this._items,
            nFld = fieldList.length,
            flds = new Array(nFld),
            fields = new Array(nFld),
            pvals = new Array(nFld),
            vals = new Array(nFld),
            p = 0,
            i = 0,
            cnt = rows.length;
        for (f = 0; f < nFld; f++) {
            flds[f] = ds.getFieldIndex(fieldList[f].fieldName());
            fields[f] = ds.getField(flds[f]);
            pvals[f] = ds.getValueAt(rows[i], flds[f]);
        }
        list = [0];
        i++;
        while (i < cnt) {
            row = rows[i];
            diff = false;
            for (f = 0; f < nFld; f++) {
                if (!fields[f].equalValues(pvals[f], ds.getValueAt(row, flds[f]))) {
                    diff = true;
                    break;
                }
            }
            if (diff) {
                items.push(new CrosstabItem(pvals, list));
                list = [];
                p = i;
                for (f = 0; f < nFld; f++) {
                    pvals[f] = ds.getValueAt(row, flds[f]);
                }
            }
            list.push(row);
            i++;
        }
        if (list.length > 0) {
            items.push(new CrosstabItem(pvals, list));
        }
    },
    $_sortLevel: function (ds, level, startIndex, endIndex, rows, fields) {
        if (startIndex >= endIndex || level >= fields.length) {
            return;
        }
        var ascending, ignoreCase, t, compFunc, equalFunc, i, pi,
            fld = ds.getFieldIndexEx(fields[level].fieldName()),
            field = ds.getField(fld);
        if (field) {
            ascending = true;   //this._sortDirections[level] != SortDirection.DESCENDING;
            ignoreCase = false; //this._sortCases[level] == SortCase.INSENSITIVE;
            t = field.dataType();
            switch (t) {
                case ValueType.DATETIME:
                case ValueType.NUMBER:
                    compFunc = ds.getCompareNumbers();
                    break;
                case ValueType.BOOLEAN:
                    compFunc = ds.getCompareBools();
                    break;
                default:
                    compFunc = ignoreCase ? ds.getCompareTexts() : ds.getCompareValues();
                    break;
            }
            if (t == ValueType.TEXT && ignoreCase) {
                equalFunc = ds.getEqualTexts();
            } else {
                equalFunc = ds.getEqualValues();
            }
            this.$_sortRange(rows, fld, ascending, ignoreCase, compFunc, startIndex, endIndex, level + 1 == fields.length);
            if (level + 1 < fields.length) {
                i = startIndex;
                pi = i;
                while (i < endIndex) {
                    i++;
                    if (!equalFunc(fld, rows[i], rows[i - 1])) {
                        this.$_sortLevel(ds, level + 1, pi, i - 1, rows, fields);
                        pi = i;
                    }
                }
                if (pi < endIndex) {
                    this.$_sortLevel(ds, level + 1, pi, endIndex, rows, fields);
                }
            }
        }
    },
    $_sortRange: function (rows, field, ascending, ignoreCase, compFunc, left, right, checkRow) {
        var i, j, row, m, r, v;
        do {
            i = left;
            j = right;
            row = _floor((left + right) / 2);
            m = rows[row];
            do {
                if (ascending) {
                    while (i <= j) {
                        r = rows[i];
                        v = compFunc(field, m, r);
                        if (v == 0 && checkRow) v = m - r;
                        if (v <= 0)
                            break;
                        i++;
                    }
                    while (i <= j) {
                        r = rows[j];
                        v = compFunc(field, m, r);
                        if (v == 0 && checkRow) v = m - r;
                        if (v >= 0)
                            break;
                        j--;
                    }
                } else {
                    while (i <= j) {
                        r = rows[i];
                        v = compFunc(field, m, r);
                        if (v == 0 && checkRow) v = m - r;
                        if (v >= 0)
                            break;
                        i++;
                    }
                    while (i <= j) {
                        r = rows[j];
                        v = compFunc(field, m, r);
                        if (v == 0 && checkRow) v = m - r;
                        if (v <= 0)
                            break;
                        j--;
                    }
                }
                if (i <= j) {
                    if (i != j) {
                        var t = rows[i];
                        rows[i] = rows[j];
                        rows[j] = t;
                    }
                    i++;
                    j--;
                }
            } while (i <= j);
            if (left < j) {
                this.$_sortRange(rows, field, ascending, ignoreCase, compFunc, left, j, checkRow);
            }
            left = i;
        } while (left < right);
    },
}, {
    REFRESH: 'onCrosstabItemSetRefresh'
});
var CrosstabColumn = defineClass("CrosstabColumn", EventAware, {
    init: function (columnField, value) {
        this._super();
        this._field = columnField;
        this._value = value;
        this._columns = [];
    },
    fieldName: function () {
        return this._field.fieldName();
    },
    value: function () {
        return this._value;
    },
    count: function () {
        return this._columns.length;
    },
    items: function () {
        return this._columns.slice();
    },
    getItem: function (index) {
        return this._columns[index];
    },
    clear: function () {
        this._columns = [];
        return this;
    },
    add: function (column, force) {
        if (column && (force || this._columns.indexOf(column) < 0)) {
            this._columns.push(column);
        }
        return this;
    }
});
var CrosstabRootColumn = defineClass("CrosstabRootColumn", CrosstabColumn, {
    init: function (crosstab) {
        this._super();
        this._crosstab = crosstab;
    }
});
var CrosstabColumnSource = defineClass("CrosstabColumnSource", EventAware, {
    init: function (crosstab) {
        this._super();
        this._crosstab = crosstab;
        this._rootColumn = new CrosstabRootColumn(this);
        this._leafColumns = [];
    },
    count: function () {
        return this._rootColumn.count();
    },
    leafCount: function () {
        return this._leafColumns.length;
    },
    build: function (its) {
        this.$_clearColumns();
        this.$_buildColumns(its);
    },
    getItem: function (index) {
        return this._rootColumn.getItem(index);
    },
    getItems: function () {
        return this._rootColumn.items();
    },
    getLeaf: function (index) {
        return this._leafColumns[index];
    },
    getLeafColumns: function () {
        return this._leafColumns.slice();
    },
    $_clearColumns: function () {
        this._rootColumn.clear();
        this._leafColumns = [];
    },
    $_buildColumns: function (its) {
        var i, column, items,
            tab = this._crosstab,
            nRowFld = tab.rowFields().length,
            nColFld = tab.columnFields().length,
            nValFld = tab.valueFields().length,
            itemCount = its.itemCount();
        if (nColFld > 0) {
            items = its.getItems();
            this.$_collectColumns(this._rootColumn, items, 0);
        }
    },
    $_collectColumns: function (parent, items, col) {
        var i, item, v, column,
            table = this._crosstab,
            rowFlds = table.rowFields(),
            colFlds = table.columnFields(),
            nCols = colFlds.length,
            field = colFlds[col],
            fld = rowFlds.length + col,
            itemCount = items.length,
            colMap = {};
        for (i = 0; i < itemCount; i++) {
            item = items[i];
            v = item.getValue(fld);
            column = colMap[v];
            if (!column) {
                column = new CrosstabColumn(field, v);
                column.$_items = [item];
                parent.add(column, true);
                colMap[v] = column;
            } else {
                column.$_items.push(item);
            }
            item.$_column = column;
        }
        for (i = 0; i < parent.count(); i++) {
            column = parent.getItem(i);
            if (col < nCols - 1) {
                this.$_collectColumns(column, column.$_items, col + 1);
            } else {
                this._leafColumns.push(column);
            }
        }
    }
});
var CrosstabRow = defineClass("CrosstabRow", null, {
    init: function (values, items) {
        this._super();
        var map, i, item;
        this._values = values.slice();
        this._items = items;
        map = this._map = {};
        if (items) {
            for (i = items.length; i--;) {
                item = items[i];
                map[item.$_column.$_hash] = item;
            }
        }
    },
    getValue: function (index) {
        return this._values[index];
    },
    getItem: function (index) {
        return this._items[index];
    },
    getItemOf: function (column) {
        return this._map[column.$_hash];
    },
    getSummary: function (ds, column, field, value) {
        var item = this._map[column.$_hash];
        if (item) {
            return item.getSummary(ds, field, value);
        }
    },
    getRowSummary: function (ds, field, value) {
    }
});
var CrosstabGroupRow = defineClass("CrosstabGroupRow", CrosstabRow, {
    init: function () {
        this._super();
    }
});
var CrosstabRowSource = defineClass("CrosstabRowSource", EventAware, {
    init: function (crosstab) {
        this._super();
        this._crosstab = crosstab;
        this._rows = [];
        this._filteredRows = [];
        this._groupedRows = [];
        this._sortedRows = [];
    },
    itemSource: null,
    filters: null,
    setItemSource: function (value) {
        if (value != this._itemSource) {
            this._itemSource = value;
        }
    },
    setFilters: function (value) {
    },
    rowCount: function () {
        return this._rows.length;
    },
    build: function (itemSet) {
        this._buildRows(itemSet);
    },
    orderBy: function (descriptions) {
    },
    _buildRows: function (its) {
        this.$_clearRows();
        this.$_collectRows(its);
    },
    $_clearRows: function () {
        this._rows = [];
        this._filteredRows = [];
        this._groupedRows = [];
        this._sortedRows = [];
    },
    $_collectRows: function (its) {
        var pvals, vals, c, i, item, diff, row,
            tab = this._crosstab,
            ds = tab.dataSource(),
            rowFields = tab.rowFields(),
            colFields = tab.columnFields(),
            valFields = tab.valueFields(),
            nRowFld = rowFields.length,
            itemCount = its.itemCount(),
            fields = [],
            items = [],
            rows = this._rows;
        if (itemCount < 1) return;
        pvals = new Array(nRowFld);
        vals = new Array(nRowFld);
        item = its.getItem(i = 0);
        for (c = 0; c < nRowFld; c++) {
            fields.push(ds.getFieldByName(rowFields[c].fieldName()));
            pvals[c] = item.getValue(c);
        }
        items.push(item);
        i++;
        for (;i < itemCount; i++) {
            item = its.getItem(i);
            for (c = 0; c < nRowFld; c++) {
                vals[c] = item.getValue(c);
            }
            diff = false;
            for (c = 0; c < nRowFld; c++) {
                if (!fields[c].equalValues(pvals[c], vals[c])) {
                    diff = true;
                    break;
                }
            }
            if (diff) {
                row = new CrosstabRow(pvals, items);
                rows.push(row);
                items = [];
                pvals = vals.slice();
            }
            items.push(item);
        }
        row = new CrosstabRow(pvals, items);
        rows.push(row);
    },
    $_sortRows: function (rows) {
    }
});
var PrintCrosstabBandItem = defineClass("PrintCrosstabBandItem", PrintBandItem, {
    init: function (name, crosstab) {
        this._super(name, crosstab);
        this._rowFieldItems = {};
        this._columnItems = {};
    },
    fillWidth: EnumProp(GroupFillMode, GroupFillMode.NORMAL),
    items: null,
    itemLeft: undefined,
    itemRight: undefined,
    itemTop: undefined,
    itemBottom: undefined,
    setItemLeft: function (value) {
        this._itemLeft = PrintDimension.createFrom(value);
    },
    setItemTop: function (value) {
        this._itemTop = PrintDimension.createFrom(value);
    },
    setItemRight: function (value) {
        this._itemRight = PrintDimension.createFrom(value);
    },
    setItemBottom: function (value) {
        this._itemBottom = PrintDimension.createFrom(value);
    },
    isFillWidth: function () {
        return this._fillWidth == GroupFillMode.NORMAL || this._fillWidth == GroupFillMode.ALL;
    },
    isFillHeight: function () {
        return this._fillHeight == GroupFillMode.NORMAL || this._fillHeight == GroupFillMode.ALL;
    },
    $_attached: function () {
        this._itemStyles.setParent(this._styles._root, false);
    },
    _delegate: function () {
        return this.owner().delegate();
    },
    _createItem: function (delegate, source) {
        return delegate.getItem(source);
    },
    _createRowFieldItem: function (field) {
        return new PrintLabelItem();
    },
    _createColumnItem: function (field) {
        return new PrintLabelItem();
    },
    $_getRowFieldItem: function (field) {
        var item = this._rowFieldItems[field];
        if (!item) {
            item = this._createRowFieldItem();
            this._rowFieldItems[field] = item;
        }
        return item;
    },
    $_getColumnItem: function (index) {
        var item = this._columnItems[index];
        if (!item) {
            item = this._createColumnItem();
            this._columnItems[index] = item;
        }
        return item;
    },
    $_updateRowFieldItem: function (band, field, item) {
        item.setText(band.getRowField(field).fieldName());
    },
    $_updateColumnItem: function (band, index, item) {
        item.setText(band.getColumn(index).value());
    },
    $_prepareBand: function (band) {
        this._dataBand = band;
    }
});
var PrintCrosstabBandHeader = defineClass("PrintCrosstabBandHeader", PrintCrosstabBandItem, {
    init: function (owner) {
        this._super('crosstabBandHeader', owner);
    },
    _createRowFieldItem: function (field) {
        var item = this._super(field);
        return item;
    },
});
var PrintCrosstabBandFooter = defineClass("PrintCrosstabBandFooter", PrintCrosstabBandItem, {
    init: function (owner) {
        this._super('crosstabBandFooter', owner);
    }
});
var PrintCrosstabBandRow = defineClass("PrintCrosstabBandRow", PrintCrosstabBandItem, {
    init: function (owner) {
        this._super('crosstabBandRow', owner);
    },
    $_updateRowFieldItem: function (band, index, item) {
        item.$_prepareBand(band);
        item.$_bandField = '{row}.' + index;
    },
    $_updateColumnItem: function (band, index, item) {
        item.$_prepareBand(band);
        item.$_bandField = band.getColumn(index).fieldName() + '.' + index;
        item.setText('-');
    }
});
var PrintCrosstabBandRowField = defineClass("PrintCrosstabBandRowField", EventAware, {
    init: function (field) {
        this._super();
        this._field = field;    // CrosstabField
    },
    fieldName: function () {
        return this._field.fieldName();
    }
});
var PrintCrosstabBandColumn = defineClass("PrintCrosstabBandColumn", EventAware, {
    init: function (column) {
        this._super();
        this._column = column;  // CrosstabColumn
    },
    fieldName: function () {
        return this._column.fieldName();
    },
    value: function () {
        return this._column.value();
    }
});
var PrintCrosstabBandColumnGroup = defineClass("PrintCrosstabBandColumnGroup", PrintCrosstabBandColumn, {
    init: function () {
        this._super();
        this._items = [];
    },
    count: function () {
        return this._items.length;
    },
    getItem: function (index) {
        return this._items[index];
    }
});
var PrintCrosstabBandColumnCollection = defineClass("PrintCrosstabBandColumnCollection", EventAware, {
    init: function () {
        this._super();
        this._columns = [];
    },
    count: function () {
        return this._columns.length;
    },
    columns: function () {
        return this._columns.slice();
    },
    load: function (table) {
        var i, cnt, col,
            cols = table.columns().getItems();
        for (i = 0, cnt = cols.length; i < cnt; i++) {
            col = new PrintCrosstabBandColumn(cols[i]);
            this._columns.push(col);
        }
    },
    getItem: function (index) {
        return this._columns[index];
    }
});
var PrintCrosstabBand = defineClass("PrintCrosstabBand", PrintBand, {
    init: function (owner) {
        this._super(owner);
        this._table = new Crosstab();
        this._rowFields = [];
        this._columns = new PrintCrosstabBandColumnCollection();
    },
    defaultRowFieldWidth: 100,
    defaultColumnWidth: 100,
    rowFields: null,
    columnFields: null,
    valueFields: null,
    rowFields_: function () {
        return this._table.rowFields();
    },
    setRowFields: function (value) {
        this._table.setRowFields(value);
    },
    columnFields_: function () {
        return this._table.columnFields();
    },
    setColumnFields: function (value) {
        this._table.setColumnFields(value);
    },
    valueFields_: function () {
        return this._table.valueFields();
    },
    setValueFields: function (value) {
        this._table.setValueFields(value);
    },
    isFillWidth: function () {
        return false;
    },
    rowCount: function () {
        return this._table.rowCount();
    },
    rowFieldCount: function () {
        return this._rowFields.length;
    },
    columnCount: function () {
        return this._columns.count();
    },
    setRow: function (row) {
        this._row = row;
    },
    getRowField: function (index) {
        return this._rowFields[index];
    },
    getColumn: function (index) {
        return this._columns.getItem(index);
    },
    getValue: function (path) {
        var i, row = this._row;
        if (path.charAt(0) == '[') {
            i = path.indexOf(']');
            if (i >= 1) {
                row = parsInt(path.substring(1, i));
                if (isNaN(row)) {
                    row = 0;
                } else {
                    path = path.substr(i);
                }
            }
        }
        i = path.indexOf('.');
        return this._table.getValue(row, path.substring(0, i), path.substring(i + 1));
    },
    _createHeader: function () {
        return new PrintCrosstabBandHeader(this);
    },
    _createFooter: function () {
        return new PrintCrosstabBandFooter(this);
    },
    _createRowTemplate: function () {
        return new PrintCrosstabBandRow(this);
    },
    $_prepareBand: function (data) {
        var table = this._table;
        this._data = data;
        table.build(data);
        this.$_buildRowFields(table);
        this.$_buildColumns(table);
        this._super(data);
    },
    $_buildRowFields: function (table) {
        var i, fld,
            cnt = table.rowFieldCount(),
            fields = this._rowFields = [];
        for (i = 0; i < cnt; i++) {
            fld = new PrintCrosstabBandRowField(table.getRowField(i));
            fields.push(fld);
        }
    },
    $_buildColumns: function (table) {
        this._columns.load(table);
    }
});
var PrintCrosstabBandItemElement = defineClass("PrintCrosstabBandItemElement", PrintElement, {
    init: function (dom, name, model, printing) {
        this._super(dom, name, model, printing);
        this._childMap = {};    // item => item view
        this._cellViews = [];   // col => cell view
        this._childViews = [];
    },
    getItemView: function (item) {
        return this._childMap[item.$_hash];
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
        this._measureChildren(hintWidth, hintHeight, force);
        return this._layout.measure(hintWidth, hintHeight);
    },
    _doLayoutItems: function (force, r) {
        this._layout.layout(r);
        this._layoutNeeded = false;
    },
    _measureChildren: function (hintWidth, hintHeight, force) {
        var delegate, i, nRow, cnt, items, item, view, cell, j, cnt2, w,
            printing = this._printing,
            layout = this._layout,
            m = this.model(),
            band = m.band();
        _assert(m instanceof PrintCrosstabBandItem);
        this.hideAll();
        delegate = this.container().delegate();
        for (i = 0, nRow = band.rowFieldCount(); i < nRow; i++) {
            cell = this._cellViews[i];
            if (!cell) {
                cell = new PrintCellView(this._dom);
                this._cellViews[i] = cell;
                this.addElement(cell);
            }
            item = m.$_getRowFieldItem(i);
            m.$_updateRowFieldItem(band, i, item);
            view = this._childMap[item.$_hash];
            if (!view) {
                view = delegate.getItemView(item, printing);
                if (view) {
                    this._childMap[item.$_hash] = view;
                    cell.addElement(view);
                }
            }
            if (view) {
                view.setVisible(true);
                w = layout.getWidth(i);
                view.measure(w, hintHeight, force);
            }
        }
        for (i = 0, cnt = band.columnCount(); i < cnt; i++) {
            cell = this._cellViews[nRow + i];
            if (!cell) {
                cell = new PrintCellView(this._dom);
                this._cellViews[i] = cell;
                this.addElement(cell);
            }
            item = m.$_getColumnItem(i);
            m.$_updateColumnItem(band, i, item);
            view = this._childMap[item.$_hash];
            if (!view) {
                view = delegate.getItemView(item, printing);
                if (view) {
                    this._childMap[item.$_hash] = view;
                    cell.addElement(view);
                }
            }
            if (view) {
                view.setVisible(true);
                w = layout.getWidth(nRow + i);
                view.measure(w, hintHeight, force);
            }
        }
    }
});
var PrintCrosstabBandHeaderElement = defineClass("PrintCrosstabBandHeaderElement", PrintCrosstabBandItemElement, {
    init: function (dom, model, printing) {
        this._super(dom, "CrosstabBandPageHeaderView", model, printing);
    }
});
var PrintCrosstabBandFooterElement = defineClass("PrintCrosstabBandFooterElement", PrintCrosstabBandItemElement, {
    init: function (dom, model, printing) {
        this._super(dom, "CrosstabBandPageFooterView", model, printing);
    }
});
var PrintCrosstabBandRowElement = defineClass("PrintCrosstabBandRowElement", PrintCrosstabBandItemElement, {
    init: function (dom, model, printing) {
        this._super(dom, "CrosstabBandPageFooterView", model, printing);
    }
});
var PrintCrosstabBandElement = defineClass("PrintCrosstabBandElement", PrintElement, {
    init: function (dom, model, printing) {
        this._super(dom, "listBandView", model, printing);
        this._sectionHeaderView = null;
        this._sectionFooterView = null;
        this._headerView = null;
        this._footerView = null;
        this._rowViews = [];
        this._sectionLayout = new PrintSectionLayout();
        this._bandLayout = this._itemLayout = this._rowLayout = new PrintCrosstabBandLayout(this);
        this._current = 0;
    },
    sectionHeaderView: function () {
        return this._sectionHeaderView;
    },
    sectionFooterView: function () {
        return this._sectionFooterView;
    },
    headerView: function () {
        return this._headerView;
    },
    footerView: function () {
        return this._footerView;
    },
    setSummaryRuntime: function (runtime) {
        this._summaryRuntime = runtime;
    },
    currentRow: function () {
        return this._current;
    },
    hasRows: function () {
        return this._current < this._rowViews.length;
    },
    getNextRow: function () {
        return this._rowViews[this._current++];
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
        var item, itemStyles,
            m = this.model(),
            data = m.owner().dataProvider().getData(m.data()),
            sectionHeader = m.sectionHeader(),
            sectionFooter = m.sectionFooter(),
            header = m.header(),
            footer = m.footer(),
            sectionHeaderView = this._sectionHeaderView,
            sectionFooterView = this._sectionFooterView,
            headerView = this._headerView,
            footerView = this._footerView,
            delegate = this.container().delegate(),
            styles = m.styles(),
            sz = { width: styles.paddingHorz(), height: styles.paddingVert() };
        data && m.$_prepareBand(data);
        this._bandLayout.measureColumns();
        this._bandLayout.layoutColumns();
        if (sectionHeader.visible()) {
            if (!sectionHeaderView) {
                sectionHeaderView = this._sectionHeaderView = new PrintSectionHeaderElement(this._dom, sectionHeader, this._printing);
                this.addElement(sectionHeaderView);
            }
            sectionHeaderView.setVisible(true);
            sectionHeaderView.measure(hintWidth, hintHeight, force);
        }
        if (header.visible()) {
            if (!headerView) {
                headerView = this._headerView = new PrintCrosstabBandHeaderElement(this._dom, header, this._printing);
                this.addElement(headerView);
            }
            headerView.setVisible(true);
            headerView._layout = this._bandLayout;
            this._bandLayout.setContainerView(headerView);
            headerView.measure(hintWidth, hintHeight, force);
        }
        this.$_prepareRows(m, hintWidth, hintHeight);
        if (footer.visible()) {
            if (!footerView) {
                footerView = this._footerView = new PrintCrosstabBandFooterElement(this._dom, footer, this._printing);
                this.addElement(footerView);
            }
            footerView.setVisible(true);
            footerView._layout = this._bandLayout;
            this._bandLayout.setContainerView(footerView);
            footerView.measure(hintWidth, hintHeight, force);
        }
        if (sectionFooter.visible()) {
            if (!sectionFooterView) {
                sectionFooterView = this._sectionFooterView = new PrintSectionFooterElement(this._dom, sectionFooter, this._printing);
                this.addElement(sectionFooterView);
            }
            sectionFooterView.setVisible(true);
            sectionFooterView.measure(hintWidth, hintHeight, force);
        }
        return sz;
    },
    _doLayoutItems: function (force, rc) {
    },
    $_prepareRows: function (model, hintWidth, hintHeight) {
        var i, cnt, r, view,
            dom = this._dom,
            m = model.rowTemplate(),
            layout = this._bandLayout,
            views = this._rowViews;
        views.length = 0;
        r = 0;
        for (i = 0, cnt = model.rowCount(); i < cnt; i++) {
            model.setRow(i);
            view = this.$_createRowView(dom, m);
            this.addElement(view);
            view._layout = layout.setContainerView(view);
            view.measure(hintWidth, hintHeight, true);
            views.push(view);
            r++;
        }
    },
    $_createRowView: function (dom, model) {
        var view = new PrintCrosstabBandRowElement(dom, model, true);
        return view;
    }
});
var PrintGaugeItem = defineClass("PrintGaugeItem", PrintItem, {
    init: function () {
        this._super();
        this._gauge = this._createDrawing();
    },
    valueLocation: GaugeValueLocation.DEFAULT,
    labelLocation: GaugeLabelLocation.DEFAULT,
    labelOffset: 2,
    ranges: null,
    scale: null,
    subScale: null,
    rangeScale: null,
    bodyShape: GaugeBodyShape.DEFAULT,
    thickness: 5,
    valueThickness: 1.0,
    baseValue: undefined,
    startValue: 0,
    endValue: 100,
    valueLocation_: function () {
        return this._gauge.valueLocation;
    },
    setValueLocation: function (value) {
        if (value != this._gauge.valueLocation) {
            this._gauge.valueLocation = value;
            this._changed();
        }
    },
    labelLocation_: function () {
        return this._gauge.labelLocation;
    },
    setLabelLocation: function (value) {
        if (value != this._gauge.labelLocation) {
            this._gauge.labelLocation = value;
            this._changed();
        }
    },
    labelOffset_: function () {
        return this._gauge.labelOffset;
    },
    setLabelLocation: function (value) {
        if (value != this._gauge.labelOffset) {
            this._gauge.labelOffset = value;
            this._changed();
        }
    },
    gauge: function () {
        return this._gauge;
    },
    _createDrawing: function () {
    }
});
var PrintGaugeElement = defineClass("PrintGaugeElement", PrintItemElement, {
    init: function (dom, model, printing) {
        this._super(dom, "printGaugeView", model, printing);
    },
    _doUpdateStyles: function (model, styles) {
        this._super(model, styles);
    },
    _doPrepareElement: function (model) {
        this._super(model);
        this._gauge = model.gauge();
    },
    _doMeasure: function (hintWidth, hintHeight) {
        var m = this.model();
        var w = _pickValue(m._minWidth && m._minWidth.size(), 10);
        var h = _pickValue(m._minHeight && m._minHeight.size(), 10);
        return { width: w, height: h };
    },
    _doLayoutItems: function (force, r) {
    },
    _doRender: function (g, r) {
        var m = this._model;
        var styles = m.styles();
        var v = m.getValue();
        var s = m.displayText();
        var gauge = this._gauge;
        if (isNaN(v)) {
            v = m.startValue();
        }
        styles.deflatePaddings(r);
        gauge.baseFill = styles.shapeInactiveColor();
        gauge.valueFill = styles.shapeColor();
        gauge.baseBorder = styles.shapeBorder();
        gauge.font = styles.font();
        gauge.color = styles.color();
        gauge.value = v;
        gauge.text = s;
        gauge.draw(this, g, r);
    },
    _doRenderHtml: function (r) {
        this._doRender(this.$_getGraphics(true), r);
    }
});
var PrintLinearGaugeItem = defineClass("PrintLinearGaugeItem", PrintGaugeItem, {
    init: function () {
        this._super();
        this._styles.setSysDefault(new PrintStyles(null, "linearGuageDefault", {
            padding: 0
        }), false);
    },
    _createDrawing: function () {
        return new LinearGauge();
    }
});
var PrintCircleGaugeItem = defineClass("PrintCircleGaugeItem", PrintGaugeItem, {
    init: function () {
        this._super();
        this._styles.setSysDefault(new PrintStyles(null, "circleGuageDefault", {
            padding: 0
        }), false);
    },
    _createDrawing: function () {
        return new CircleGauge();
    }
});
var seriesProto = ChartSeries.prototype;
var seriesProto_loadItems = seriesProto.loadItems;
seriesProto.loadItems = function (source) {
    if (source instanceof PrintChartItem && !this._items || (this._items && this._items.length < 1)) {
        var i, item,
            data = source.dataProvider().getValue(this.data() || source.data());
        if (_isArray(data)) {
            this._itemList = [];
            for (i = 0; i < data.length; i++) {
                item = this._createItem(data[i]);
                item._index = i;
                this._itemList.push(item);
            }
            return this;
        }
        data = source.dataProvider().getData(source.data());
        if (data instanceof ReportDataSet) {
            data = data.getRows();
            this._itemList = [];
            for (i = 0; i < data.length; i++) {
                item = this._createItem(data[i]);
                item._index = i;
                this._itemList.push(item);
            }
            if (source.labelField()) {
                var axis = this._owner._xAxes[0];
                axis.$$_ticks = [];
                for (i = 0; i < data.length; i++) {
                    axis.$$_ticks.push(_pick(data[i][source.labelField()], ''));
                }
                this._owner._xAxes[0].setLabelCallback(function (axis, i, tick) {
                    return axis.$$_ticks[i];
                })
            };
            return this;
        }
    }
    seriesProto_loadItems.call(this, source);
}
var PrintChartItem = defineClass("PrintChartItem", PrintItem, {
    init: function () {
        this._super();
        this.setLeft(4);
        this.setRight(4);
        this.setTop(4);
        this.setBottom(4);
        this._styles.setSysDefault(new PrintStyles(null, "chartDefault", {
            padding: 0
        }), false);
    },
    async: false,
    chart: null,
    labelField: null,
    setChart: function (value) {
        if (value !== this._chart) {
            this._chart = value;
            this._changed();
        }
    }
});
var PrintChartElement = defineClass("PrintChartElement", PrintItemElement, {
    init: function (dom, model, printing) {
        this._super(dom, "printChartView", model, printing);
    },
    _doUpdateStyles: function (model, styles) {
        this._super(model, styles);
    },
    _doPrepareElement: function (model) {
        this._super(model);
        var config = model.chart();
        if (config) {
            if (!this._chartView) {
                this._chartView = new GridChartView(this._dom, this.container());
                this.addChild(this._chartView);
            }
            if (!this._chart) {
                this._chart = new GridChart(this.container()).loadChart(config);
                this._chartView.setModel(this._chart);
            }
            this._chart.setItemSource(model);
            this._styles = model.styles();
        } else if (this._chartView) {
            this.removeChild(this._chartView);
            this._chartView = null;
            this._chart = null;
        }
    },
    _doMeasure: function (hintWidth, hintHeight) {
        var m = this._model,
            w = _pickValue(m._minWidth && m._minWidth.getSize(), 0),
            h = _pickValue(m._minHeight && m._minHeight.getSize(), 0);
        return { width: w, height: h };
    },
    _doLayoutItems: function (force, r) {
        if (this._chartView) {
            var r = this.getClientRect(this._drawRect);
            this._styles.deflatePaddings(r);
            this._chartView.setRectI(this._drawRect);
            this._chartView.layoutContent();
        }
    },
    _doDrawHtmlBorders: function (r) {
        if (this.designTime() && !this._chartView) {
            this._back.style.border = '1px dashed #aaa';
        } else {
            this._super(r);
        }
    },
    _doDrawHtmlBack: function (back, r) {
        var s,
            m = this.model();
        if (this.designTime() && !this._chartView) {
            var css = this._back.style;
            _cssRect(css, r);
            css.background = PrintElement.EMPTY_BACKGROUND.css();
            s = 'chart';
            if (s) {
                span = this.$_prepareSpan();
                r.inflate(-4, -4);
                Dom.renderTextRect(span, this._font, PrintElement.EMPTY_COLOR, s, r, this._getTextAlign("near"), this._getLineAlign("top"));
                r.inflate(4, 4);
            }
        } else {
            this._super(back, r);
        }
    },
    _doRender: function (g, r) {
        var m = this._model,
            styles = m.styles(),
            fill = styles.background();
        fill && g.drawRectI(fill, null, r);
    },
    _doRenderHtml: function (r) {
        var m = this._model,
            styles = m.styles(),
            fill = styles.background();
        fill && (this._dom.style.background = fill.css());
    },
    resetPageValue: function (total, page) {
        var s,
            m = this.model();
        if (m.hasPageValue()) {
            s = _toStr(m._pageNo ? page + 1 : total);
            if (s != this._text) {
                this._resetText = s;
            }
        }
    }
});
var StaticPageBody = defineClass("StaticPageBody", PrintSection, {
    init: function (owner) {
        this._super("staticBody", owner);
    }
});
var StaticPage = defineClass("StaticPage", EventAware, {
    init: function (name, owner) {
        this._super(name, owner);
        this._pageHeader = new PrintPageHeader(this);
        this._pageFooter = new PrintPageFooter(this);
        this._body = new StaticPageBody(this);
    },
    pageHeader: null,
    pageFooter: null,
    body: null
});
var StaticPageCollection = defineClass("StaticPageCollection", EventAware, {
    init: function (owner) {
        this._super(owner);
        this._owner = owner;
    },
    fronts: null,
    backs: null,
    pages: null
});
var StaticPageView = defineClass("StaticPageView", PrintSectionElement, {
    init: function (dom, model, printing) {
        this._super(dom, "staticView", model, printing);
    },
    _doMeasure: function (hintWidth, hintHeight, force) {
        return this._super(hintWidth, hintHeight, force);
    },
    _doLayoutItems: function (force, r) {
        this._super(force, r);
    },
    _doRenderHtml: function (r) {
        this._super(r);
    }
});
var PrintConfig = defineClass("PrintConfig", null, {
	init: function (printContainer) {
		this._super();
        this._printContainer = printContainer;
	},
	load: function (config) {
		var view = this._printContainer;
		if (!view) return;
        if (typeof config == "string") {
            config = JSON.parse(config);
        }
		var viewModel = config && config.ViewModel;
        var model = config && config.PrintModel;
		var printView = view.printView();
        var options = view.options();
		if (model) {
			model.options && options.assign(model.options);
			model.reportTitle && view.reportTitle().assign(model.reportTitle);
			model.reportFooter && view.reportFooter().assign(model.reportFooter);
			model.pageHeader && view.pageHeader().assign(model.pageHeader);
			model.pageFooter && view.pageFooter().assign(model.pageFooter);
		}
		if (viewModel) {
			printView.setColumns(viewModel.columns);
			viewModel.footer && printView.footer().assign(viewModel.footer);
			viewModel.header && printView.header().assign(viewModel.header);
		}
        var rulerContainer = view.vRuler();
        rulerContainer = view.hRuler();
        rulerContainer.addRuler({
            start: 0,
            length: options.pageWidth()
        });
	}
});
var _licmod = FillGradient['_mod_'];
var PrintContainer = defineClass("PrintContainer", GridComponent, {
    init: function (dom, containerId, printing, designMode) {
        if (_loadLog) {
            _dlog(_loadLog);
            _loadLog = undefined;
        }
        this._printing = printing;
        this._designMode = designMode;
        this._super(dom, containerId, true);
        if (!this._printing) {
        }
        this._delegate = this._createDelegate(this);
        this._valueRuntime = new PrintValueRuntime(this);
        this._summaryRuntime = new PrintSummaryExpressionRuntime();
        this._dataProvider = new ReportDataProvider(designMode);
        this._setDomMouse(true);
    },
    onModelChanged: DLCallback,
    dataProvider: null,
    styles: null,
    model: null,
    printOptions: null,
    setModel: function (value) {
        if (value !== this._model) {
            this._model.assign(value);
            if (value && value.data) {
                this.loadData(value.data)
            }
            this._modelChanged(this._model);
        }
        return this;
    },
    setPrintOptions: function (value) {
        if (value !== this._printOptions) {
            this._printOptions.assign(value);
            $$_debugPrint = this._printOptions.debugPrint();
        }
        return this;
    },
    printing: function () {
        return this._printing;
    },
    delegate: function () {
        return this._delegate;
    },
    valueRuntime: function () {
        return this._valueRuntime;
    },
    summaryRuntime: function () {
        return this._summaryRuntime;
    },
    printView: function () {
        return this._gridView;
    },
    loadData: function (value) {
        this._dataProvider.load(value, this._designMode);
    },
    load: function (config) {
        this.$_clearPrintViews();
        new PrintConfig(this).load(config);
    },
    getData: function (dataId) {
        return this._dataProvider.getData(dataId);
    },
    getModelOf: function (element) {
        if (element instanceof PrintElement) {
            return element.model();
        }
        return null;
    },
    getModelOfName: function (name) {
        return _cast(this["_" + name], PrintItemContainer);
    },
    getPrintItemView: function (item) {
        var items, view, i;
        if (item === this._model) {
            return this._reportPane;
        } else if (item === this._model.page()) {
            return this._pagePane;
        } else if (item instanceof PrintItemContainer) {
            return this["_" + item.name() + "View"];
        } else if (item instanceof PrintItem) {
            items = item.getAncestors();
            view =  this["_" + items[0].name() + "View"];
            for (i = 1; i < items.length; i++) {
                view = view.getItemView(items[i]);
                if (!view) return null;
            }
            view = view.getItemView(item);
            return view;
        }
        return null;
    },
    loadTheme: function (theme) {
        if (this._model) {
            if (!(theme instanceof PrintStyleSheet)) return;
            this._model.setTheme(theme);
        }
    },
    designPane: function (elt) {
        return this._designPane;
    },
    reportPane: function (elt) {
        return this._reportPane;
    },
    pagePane: function (elt) {
        return this._pagePane;
    },
    _createGridView: function (dom, container, readMode) {
        var grid = new PrintView(dom, container, readMode, this._printing);
        grid.setOptions({
            display: {
                emptyGridMessage: ""
            }
        });
        return grid;
    },
    _createBackgroundElements: function (dom) {
        var pane, bands, i, view,
            printing = this._printing,
            design = this._designMode;
        var m = this._model = this._createModel(this._designMode);
        this._printOptions = new PrintOptions();
        this._designPane = new PrintDesignPane(dom);
        this.addElement(this._designPane);
        this._reportPane = new PrintReportPane(dom, m);
        this._designPane.addElement(this._reportPane);
        this._pagePane = new PrintPagePane(dom, m.page());
        this._reportPane.addElement(this._pagePane);
        pane = design ? this._pagePane : this;
        this._pageStyles = m.page().styles();
        this._reportHeader = m.reportHeader();
        this._reportHeaderView = new ReportHeaderElement(dom, this._reportHeader, printing);
        pane.addElement(this._reportHeaderView);
        this._reportFooter = m.reportFooter();
        this._reportFooterView = new ReportFooterElement(dom, this._reportFooter, printing);
        pane.addElement(this._reportFooterView);
        this._pageHeader = m.pageHeader();
        this._pageHeaderView = new PageHeaderElement(dom, this._pageHeader, printing);
        dom && (this._pageHeaderView.$name = 'pageHeaderView');
        pane.addElement(this._pageHeaderView);
        this._pageTitle = m.pageTitle();
        this._pageTitleView = new PageTitleElement(dom, this._pageTitle, printing);
        dom && (this._pageTitleView.$name = 'pageTitleView');
        pane.addElement(this._pageTitleView);
        this._pageFooter = m.pageFooter();
        this._pageFooterView = new PageFooterElement(dom, this._pageFooter, printing);
        dom && (this._pageFooterView.$name = 'pageFooterView');
        pane.addElement(this._pageFooterView);
        this.loadTheme(PrintStyleSheet.Default);
    },
    _addGridView: function (grid) {
        this._designMode ? this._pagePane.addElement(grid) : this._super(grid);
    },
    _createModel: function (designMode) {
        return new GridReport(this, designMode);
    },
    _createDelegate: function () {
        return _licmod.indexOf('report') >= 0 ? new PrintDelegate(this) : null;
    },
    _createDefaultTool: function () {
        return new PrintViewSelectionTool(this);
    },
    $_clearPrintViews: function () {
        this._reportHeaderView.$_clearViews();
        this._reportFooterView.$_clearViews();
        this._pageHeaderView.$_clearViews();
        this._pageFooterView.$_clearViews();
        this._pageTitleView.$_clearViews();
    },
    invalidateLayout: function () {
        this._super();
        if (this._reportHeaderView) {
            this._reportHeaderView.$_invalidateLayout();
            this._reportFooterView.$_invalidateLayout();
            this._pageHeaderView.$_invalidateLayout();
            this._pageFooterView.$_invalidateLayout();
            this._pageTitleView.$_invalidateLayout();
        }
    },
    _doLayout: function (bounds) {
        var border,
            grid = this._gridView,
            gap = 4,
            r = bounds.clone(),
            sz = 0,
            w = 0,
            h = 0;
        border = grid._styles.border();
        if (this._borderView) {
            this._borderView.setVisible(border && border.width() > 0);
        }
        if (this._borderView && this._borderView.visible()) {
            this._borderView._border = border;
            this._borderView.setRect(r);
            this._borderView.invalidate();
            r.inflate(-border.width(), -border.width());
        }
        /*
        sz = this._rulerWidth;
        w = this._vRuler.visible() ? sz : 0;
        h = this._hRuler.visible() ? sz : 0;
        var view = this._rulerHead;
        if (w > 0 && h > 0) {
            view.setVisible(true);
            view.setBounds(r.x, r.y, w, h);
            view.layoutItems();
        } else {
            view.setVisible(false);
        }
        view = this._vRuler;
        if (w > 0) {
            view.setVisible(true);
            view.setOffset(this._designOffset);
            view.setBounds(r.x, r.y + w, sz, r.height - w);
            view.layoutItems();
        } else {
            view.setVisible(false);
        }
        view = this._hRuler;
        if (h > 0) {
            view.setVisible(true);
            view.setOffset(this._designOffset);
            view.setBounds(r.x + h, r.y, r.width - h, sz);
            view.layoutItems();
        } else {
            view.setVisible(false);
        }
        r.leftBy(h);
        r.topBy(w);
        this._layoutCrosshair(r);
        this._pagePane.setRect(r);
        r.inflate(-this._designOffset, -this._designOffset);
        */
        this._summaryRuntime.setDataSource(grid.dataSource(), grid.getSummarizer());
        /*
        var view;
        view = this._pageHeaderView;
        if (view.visible()) {
            sz = view.measure(r.width, r.height);
            view.setBounds(r.x, r.y, r.width, sz.height);
            view.layoutItems();
            r.topBy(sz.height + gap);
        }
        view = this._reportHeaderView;
        if (view.visible()) {
            sz = view.measure(r.width, r.height);
            view.setBounds(r.x, r.y, r.width, sz.height);
            view.layoutItems();
            r.topBy(sz.height + gap);
        }
        view = this._pageTitleView;
        if (view.visible()) {
            sz = view.measure(r.width, r.height);
            view.setBounds(r.x, r.y, r.width, sz.height);
            view.layoutItems();
            r.topBy(sz.height + gap);
        }
        view = this._pageFooterView;
        if (view.visible()) {
            sz = view.measure(r.width, r.height);
            view.setBounds(r.x, r.bottom() - sz.height, r.width, sz.height);
            view.layoutItems();
            r.bottomBy(-sz.height - gap);
        }
        view = this._reportFooterView;
        if (view.visible()) {
            sz = view.measure(r.width, r.height);
            view.setBounds(r.x, r.bottom() - sz.height, r.width, sz.height);
            view.layoutItems();
            r.bottomBy(-sz.height - gap);
        }
        if (this._innerBorder) {
            this._innerBorder._border = border;
            this._innerBorder.setRect(r);
            this._innerBorder.invalidate();
            r.inflate(-border.width(), -border.width());
        }
        */
        grid.setVisible(this._model.grid() && this._model.grid().visible);
        if (grid.visible()) {
            grid.setRect(r);
            r.x = r.y = 0;
            grid._doLayout(r);
        }
    },
    _modelChanged: function (model) {
        this.$_clearPrintViews();
        this.onModelChanged && this.onModelChanged(this, model);
        this.fireEvent(PrintContainer.MODEL_CHANGED, model);
    }
}, {
    MODEL_CHANGED: "onPrintContainerModelChanged"
});
var PrintDesignPane = defineClass("PrintDesignPane", LayerElement, {
    init: function (dom) {
        this._super(dom, "designPane");
        this._css.pointerEvents = null;
    },
    designWidth: 0,
    designHeight: 0,
    fill: null,
    _doDraw: function (g, needOaque) {
        var w = this._designWidth,
            h = this._designHeight;
        if (w > 0 && h > 0) {
            g.drawBoundsI(this._fill || new SolidBrush('#20ff0000'), null, 0, 0, w, h);
        }
    },
    _doDrawHtml: function () {
        var elt = this.getChild(0);
        if (elt) {
            this._doDraw(this.$_getGraphics(true, this.getClientRect(), elt._dom));
        }
    }
});
var PrintReportPane = defineClass("PrintReportPane", UIElement, {
    init: function (dom, model) {
        this._super(dom, "reportPane");
        this._model = model;
    },
    model: function () {
        return this._model;
    },
    designModel: function () {
        return this._model;
    },
    _doDraw: function (g, needOaque) {
    },
    _doDrawHtml: function () {
        var elt = this.getChild(0);
        if (elt) {
            this._doDraw(this.$_getGraphics(true, this.getClientRect(), elt._dom));
        }
    }
});
var PrintPagePane = defineClass("PrintPagePane", UIElement, {
    init: function (dom, model) {
        this._super(dom, "pagePane");
        this._model = model;
    },
    model: function () {
        return this._model;
    },
    designModel: function () {
        return this._model;
    },
    _doDraw: function (g, needOaque) {
    },
    _doDrawHtml: function () {
        var elt = this.getChild(0);
        if (elt) {
            this._doDraw(this.$_getGraphics(true, this.getClientRect(), elt._dom));
        }
    }
});
var PrintView = defineClass("PrintView", GridView, {
    init: function (dom, container, readMode, printing) {
        this._super(dom, container, readMode);
        this._productName = "DataLudi Grid v1.4";
        this._scrollBarWidth = 0;
        if (printing) {
            this._scrollBarHeight = 0;
        }
        this.panel().setVisible(false);
        this.rowIndicator().setVisible(false);
        this.rowIndicator().setStateVisible(false);
        this.checkBar().setVisible(false);
    },
    load: function (config) {
        this.container().load(config);
    },
    isDesignMode: function () {
        return !this.container().printing()
    },
    _updateScrollBars: function (lm, r) {
        this._super(lm, r);
    },
    setFocusedIndex: function (value, select, focusing) {
    },
    loadStyles: function (styles) {
        this._super(styles);
        this.$_getModelLines(this, styles.grid);
        this.$_getModelLines(this.header(), styles.header);
        this.$_getModelLines(this.footer(), styles.footer);
    },
    $_getModelLines: function (model, styles) {
        if (styles) {
            model._lineTop = _createStroke(styles.lineTop);
            model._lineLeft = _createStroke(styles.lineLeft);
            model._lineBottom = _createStroke(styles.lineBottom);
            model._lineRight = _createStroke(styles.lineRight);
        }
    }
});
var PrintViewSelectionTool = defineClass("PrintViewSelectionTool", VisualTool, {
    init: function (owner) {
        this._super(owner);
    },
    _doActivate: function () {
        this._super();
    },
    _doDeactivate: function () {
        this._super();
    },
    _doMouseDown: function (x, y, ctrl, shift, button) {
    },
    _doMouseMove: function (x, y) {
    },
    _doMouseUp: function (x, y) {
    },
    _doMouseOutside: function () {
    },
    _doMouseWheel: function (x, y, deltaX, deltaY) {
    },
    _doKeyDown: function (key, ctrl, shift) {
    },
    _doKeyUp: function (key, ctrl, shift) {
    },
    _doClick: function (event) {
    },
    _doDblclick: function (event) {
    },
    mouseEnter: function (event) {
    },
    mouseLeave: function (event) {
    },
    mouseOver: function (event) {
    },
    layoutChanged: function () {
    },
    focusedIndexChanging: function (newIndex) {
    },
    focusedIndexChanged: function (/*oldIndex, newIndex*/) {
    },
    columnHeaderDblClicked: function (column) {
    },
    dataCellClicked: function (index) {
    },
    dataCellDblClicked: function (index) {
    },
    cellButtonClicked: function (index) {
    },
    editButtonClicked: function (index) {
    }
});
/*
var HtmlPrinter = defineClass("HtmlPrinter", null, {
    init : function () {
        this._super();
        this._options = null;
    },
    print: function (grid, options) {
        var iframe = Dom.createElement("iframe");
        iframe.id = "printFrame"
        iframe.onload = function () {
            var div = Dom.createElement("div");
            div.innerHTML = "Hello?";
            iframe.contentDocument.body.appendChild(div);
            iframe.focus();
            iframe.contentWindow.print();
            _doc.body.removeChild(iframe);
        }
        iframe.style.visibility = "hidden";
        _doc.body.appendChild(iframe);
    }
});
*/
var PrintPreviewer = defineClass("PrintPreviewer", PrintContainer, {
    init: function (containerId, paging) {
        this._super(true, containerId, true);
        this._paging = paging;
        this._columnHeaderView = null;
        this._itemViews = null;
        this._mergeCells = null;
        this._reportFooterHeight = NaN;
        this._reportFooterAdded = false;
        this._imagePile = [];
    },
    preview: function (sourceGrid, print, callback) {
        try {
            this.$_preview(sourceGrid, print, callback);
        } finally {
            this.$_clearGrid(this._gridView);
        }
    },
    $_initPageStyles: function (wPage, hPage) {
        var st = this._pageStyles;
        if (!this._pageStyled) {
            var r = this._pageRect = new Rectangle(0, 0, wPage, hPage);
            var b = st.border();
            this._pageBorderLeft = b ? b : st.borderLeft();
            this._pageBorderRight = b ? b : st.borderRight();
            this._pageBorderTop = b ? b : st.borderTop();
            this._pageBorderBottom = b ? b : st.borderBottom();
            this._pageBackground = st.background();
            var paddingLeft = st.paddingLeft();
            var paddingRight = st.paddingRight();
            var paddingTop = st.paddingTop();
            var paddingBottom = st.paddingBottom();
            r.leftBy((this._pageBorderLeft ? this._pageBorderLeft.width() : 0) + (paddingLeft ? paddingLeft : 0));
            r.topBy((this._pageBorderTop ? this._pageBorderTop.width() : 0) + (paddingTop ? paddingTop : 0));
            r.width -= (this._pageBorderRight ? this._pageBorderRight.width() : 0) + (paddingRight ? paddingRight : 0);
            r.height -= (this._pageBorderBottom ? this._pageBorderBottom.width() : 0) + (paddingBottom ? paddingBottom : 0);
        }
        return st;
    },
    $_setPageStyles: function (pageElt) {
        var css = pageElt.style;
        css.borderLeft = this._pageBorderLeft ? this._pageBorderLeft.css() : "";
        css.borderRight = this._pageBorderRight ? this._pageBorderRight.css() : "";
        css.borderTop = this._pageBorderTop ? this._pageBorderTop.css() : "";
        css.borderBottom = this._pageBorderBottom ? this._pageBorderBottom.css() : "";
        css.background = this._pageBackground ? this._pageBackground.css() : "";
    },
    $_pileImage: function (imgElt) {
        this._imagePile.push(imgElt);
    },
    $_openPreview: function () {
        var pile = this._imagePile;
        for (var i = pile.length; i--;) {
            if (pile[i].complete) {
                pile.splice(i, 1);
            }
        }
        if (pile.length < 1 || (_getTimer() - this._imageStarted >= this._printOptions.imageLoadTime)) {
            window.print();
        } else {
            setTimeout(function () {
                this.$_openPreview();
            }.bind(this), 10)
        }
    },
    $_prepareBands: function (dom, pageInfo, wPage) {
        var bandViews, view,
            bands = this._bands = this._model.bands();
        pageInfo.bandCount = bands.count();
        if (pageInfo.bandCount > 0) {
            bandViews = this._bandViews = [];
            for (i = 0; i < pageInfo.bandCount; i++) {
                band = bands.getItem(i);
                if (band instanceof PrintTableBand) {
                    view = new PrintTableBandElement(dom, band, true);
                } else if (band instanceof PrintCrosstabBand) {
                    view = new PrintCrosstabBandElement(dom, band, true);
                } else {
                    view = new PrintDataBandElement(dom, band, true);
                }
                dom && (view.$name = 'bandView_' + i);
                this.addElement(view); // container().delegate가 필요하다.
                bandViews.push(view);
            }
            for (i = 0; i < bandViews.length; i++) {
                bandViews[i].setSummaryRuntime(this._summaryRuntime);
                bandViews[i].measure(wPage, 100000000, true);
            }
            pageInfo.bandIndex = 0;
            pageInfo.bandRow = 0;
        }
    },
    $_preview: function (sourceGrid, print, callback) {
        var r, bands, runtime, itemCount, pageInfo, view, row, nPage, needReportFooter,
            divUI, loop, y, div, divPage, i, elt,
            grid = this._gridView,
            model = this._model,
            dp = this._dataProvider,
            options = this._printOptions,
            totalViews = [],
            wPage =  options.pageWidth(),
            hPage = options.pageHeight(),
            wPaper = options.paperScreenWidth(),
            hPaper = options.paperScreenHeight(),
            printGrid = model.printGrid(),
            gridVis = sourceGrid && printGrid.visible(),
            groupLevels = 0,
            groupIndent = 0;
        dp.setGrid(grid);
        this._summaryRuntime.setReportData(dp);
        this.$_initPageStyles(wPage, hPage);
        r = this._pageRect;
        if (gridVis) {
            this._populating = true;
            this._layoutNeeded = true;
            this.$_copyGrid(model, sourceGrid, grid);
            this.$_setGridOptions(grid);
            this.$$_renderHtml(_getTimer());
            this._populating = false;
            groupLevels = grid.rowGroupLevels();
            groupIndent = groupLevels * grid.rowGroup().levelIndent();
            this._itemViews = this.$_getRowViews(grid.bodyView(), grid.bandedGroupView());
        }
        grid.setVisible(false);
        this._container.style.height = 0;
        runtime = this._valueRuntime;
        itemCount = (gridVis && this._itemViews) ? this._itemViews.length : 0;
        pageInfo = {
            columnMerged: this.$_prepareMergedDataCells(grid.mergeView()._cellLayer),
            pageHeaderVisible: this._pageHeaderView.visible(),
            pageFooterVisible: this._pageFooterView.visible(),
            pageTitleVisible: this._pageTitleView.visible(),
            reportHeaderVisible: this._reportHeaderView.visible(),
            reportFooterVisible: this._reportFooterView.visible(),
            gridVisible: gridVis,
            columnHeaderVisible: gridVis && (this._columnHeaderView = grid.headerView()).visible(),
            columnFooterVisible: gridVis && (this._columnFooterView = grid.footerView()).visible(),
            customHeadersVisible: gridVis && (this._customHeadersView = grid.headerItemsView()).visible(),
            customFootersVisible: gridVis && (this._customFootersView = grid.footerItemsView()).visible(),
            itemCount: itemCount,
            pageWidth: r.width,//wPage,
            pageHeight: r.height,//hPage,
            pageLayout: printGrid.pageLayout(),
            pageColumns: printGrid.pageColumns(),
            pageColumnLayout: printGrid.columnLayout(),
            pageFill: printGrid.pageFill(),
            columnGap: printGrid.columnGap(),
            $_columnWidth: printGrid.$_columnWidth,
            groupLevels: groupLevels,
            groupIndent: groupIndent,
            hBand: 0
        };
        pageInfo.gridInner = pageInfo.gridInnerLeft || pageInfo.gridInnerRight || pageInfo.gridInnerTop || pageInfo.gridInnerBottom;
        this.$_prepareBands(this.$_dom, pageInfo, wPage);
        if (gridVis) {
            view = this._columnHeaderView;
            if (pageInfo.columnHeaderVisible) {
                view.$p_setIndent(groupIndent);
                this._drawElementHtml(view);
            }
            grid.bodyView().clear();
        }
        row = 0;
        nPage = 0;
        needReportFooter = false;
        if (pageInfo.reportFooterVisible) {
            var view = this._reportFooterView;
            var sz = view.measure(wPage, 10000);
            this._reportFooterHeight = sz.height;
            this._reportFooterAdded = false;
            needReportFooter = true;
        } else {
            this._reportFooterAdded = true;
        }
        runtime.setTotalPage(888);
        loop = 0;
        y = 0;
        /*
        if (this._pageContainer) {
            this._containerDiv.removeChild(this._pageContainer);
        }
        this._pageContainer = document.createElement("div");
        this._containerDiv.appendChild(this._pageContainer);
        this._pageContainer.style.position = "relative"; // 이 것 때문에...
        this._pageContainer.style.width = "100%";
        this._pageContainer.style.height = "100%";
        this._pageContainer.style.top = 0;
        this._pageContainer.style.left = 0;
        this._pageContainer.style.borderStyle = "none";
        this._pageContainer.style.borderWidth = "0px";
        */
        this._pageContainer = this._containerDiv;
        while ((itemCount > 0 && row < itemCount) ||
                (needReportFooter && !this._reportFooterAdded) ||
                (pageInfo.columnFooterVisible && !this._columnFooterAdded) ||
                (pageInfo.customFootersVisible && !this._customFootersAdded)) {
            if (this._paging) {
                divUI = Dom.createElement("div", {
                    position: "relative",
                    boxSizing: "border-box",
                    height: hPaper + "px",
                    width: wPaper + "px",
                    pageBreakAfter: "always",
                    breakAfter: "always",
                    overflow: "hidden",
                    background: "#fff",
                    border: "1px solid #aaa",
                    marginTop: "4px",
                    marginBottom: "4px"
                });
                $$_debugPrint && (divUI.id = '$$_dl_report_print_container');
                this._pageContainer.appendChild(divUI);
            }
            div = Dom.createElement("div", {
                boxSizing: "border-box",
                height: hPage + "px",
                width: wPage + "px",
                overflow: "hidden"
            });
            if (this._paging) {
                div.style.position = "absolute";
                div.style.left = _int(options.paperMarginLeft().getSize()) + "px";
                div.style.top = _int(options.paperMarginTop().getSize()) + "px";
                divUI.appendChild(div);
            } else {
                div.style.position = "relative";
                div.style.pageBreakAfter = "always";
                div.style.breakAfter = "always";
                this._pageContainer.appendChild(div);
            }
            $$_debugPrint && (div.id = '$$_dl_report_page_container');
            div.$$_page = true;
            this.$_setPageStyles(div);
            if ($$_debugPrint) {
                var debug = Dom.createElement("div", {
                    position: "absolute",
                    boxSizing: "border-box",
                    left: r.x + "px",
                    top: r.y + "px",
                    width: r.width + "px",
                    height: r.height + "px",
                    overflow: "hidden"
                });
                debug.style.border = $$_debugBorder2;
                div.appendChild(debug);
            }
            divPage = Dom.createElement("div", {
                position: "absolute",
                boxSizing: "border-box",
                left: r.x + "px",
                top: r.y + "px",
                width: r.width + "px",
                height: r.height + "px",
                overflow: "hidden"
            });
            div.appendChild(divPage);
            $$_debugPrint && (div.id = '$$_dl_report_page');
            dp.setPage(nPage);
            runtime.setCurrPage(nPage);
            row = this.$_printPage(pageInfo, y, nPage++, row, divPage, totalViews);
            y = div.offsetTop + div.offsetHeight;
            if (itemCount > 5 && loop++ > itemCount * 2) {
                throw new Error("Printing error: too many null loops!");
            }
        }
        /*
        var pi = pageInfo;
        if (nPage > 0 && pi.pageFill) {
            if (pi.gridElt || pi.gridElt2) {
                if (pi.pReportFooter && pi.pPageFooter && pi.pReportFooter < pi.pPageFooter) {
                    view = pi.reportFooter;
                    view.setY(view.y() + pi.pPageFooter - pi.pReportFooter);
                    view.moveDom();
                }
            }
        }
        */
        runtime.setTotalPage(nPage);
        for (i = totalViews.length; i--;) {
            elt = totalViews[i];
            view = elt.$view;
            view.resetPageValue(nPage, elt.$page);
            view.measure(elt.offsetWidth, elt.offsetHeight, true);
            view.layoutItems(true);
            this._drawElementHtml(view, true);
            this.$_cloneElement3(view, elt.parentElement, elt);
        }
        this._pageHeaderView.setVisible(false);
        this._pageFooterView.setVisible(false);
        callback && callback();
        if (print) {
            this._imageStarted = _getTimer();
            _isChrome && this.$_openPreview();
        }
    },
    _prepareBorder: function () {
    },
    _prepareFeedbackLayer: function () {
    },
    _createGridView: function (dom, container, readMode) {
        return new PrintPreview(container);
    },
    _doLayout: function (bounds) {
        var r = bounds.clone(),
            m = this.model(),
            pgrid = m.printGrid(),
            w = this._pageRect.width,// opts.pageWidth(),
            n = pgrid.pageColumns();
        if (n > 1) {
            w = (w - (n - 1) * pgrid.columnGap()) / n;
            pgrid.$_columnWidth = w;
        }
        r.width = pgrid.pageLayout() == "card" ? 100000000 : w;
        r.height = 2000000000;
        this._super(r);
    },
    $$_renderHtml: function () {
        if (this._populating) {
            this._super();
        }
    },
    $_copyGrid: function (model, src, dst) {
        var i, column, obj, checked,
            columns = src.columns(),
            rowFilter = model.printGrid().rowFilter(),
            cols = [];
        for (i = 0; i < columns.length; i++) {
            column = columns[i];
            obj = column.proxy();
            cols.push(obj);
        }
        dst.setColumns(cols);
        dst.setDataSource(src.dataSource());
        dst.setDisplayOptions(src.displayOptions().proxy());
        dst.setRowGroup(src.rowGroup().proxy());
        dst.setHeaderItems(src.headerItems().proxy());
        dst.setFooterItems(src.footerItems().proxy());
        dst.header().setVisible(src.header().visible());
        dst.footer().setVisible(src.footer().visible());
        checked = [];
        for (i = src.rowCount(); i--;) {
            checked[src.getRow(i).dataIndex()] = src.isChecked(i);
        }
        RowFilterRuntime.$_isChecked = function (row) {
            return checked[row.dataIndex()];
        };
        if (src.rowFilter().canFiltering()) {
        } else if (rowFilter) {
            dst.rowFilter().setExpression(rowFilter);
        }
        dst.$_doApplyFilters();
        obj = src.$_sortRows;
        obj && dst._sortRows(obj.fields, obj.directions, obj.textCases);
        obj = src.rowGroup().$_footerItemsSource;
        obj && dst.rowGroup().setFooterItems(obj);
        obj = src.$_groupBy;
        obj && dst.groupBy(obj.fields, obj.sorting, obj.direction);
        dst.$_headerItemsHeight = src.headerItemsView().height();
        dst.$_footerItemsHeight = src.footerItemsView().height();
        dst._palettes = src._palettes;
    },
    $_clearGrid: function (grid) {
        grid._palettes = null;
        grid.setDataSource(null);
    },
    $_setGridOptions: function (grid) {
        var cg = this._model.grid();
        if (cg) {
            var v;
            (v = cg.footer) && grid.setFooter(v);
            (v = cg.display || cg.displayOptions) && grid.setDisplayOptions(v);
            var st = cg.styles;
            st && grid.loadStyles(st);
        }
    },
    $_getRowViews: function (bodyView, groupView) {
        var i, cnt, view,
            items = bodyView._items,
            map = bodyView._viewMap,
            views = [];
        for (i = 0, cnt = groupView._headerViews.length; i < cnt; i++) {
            views.push(groupView._headerViews[i]);
        }
        for (i = 0, cnt = groupView._footerViews.length; i < cnt; i++) {
            views.push(groupView._footerViews[i]);
        }
        for (i = 0, cnt = groupView._customHeaderViews.length; i < cnt; i++) {
            views.push(groupView._customHeaderViews[i]);
        }
        for (i = 0, cnt = groupView._customFooterViews.length; i < cnt; i++) {
            views.push(groupView._customFooterViews[i]);
        }
        for (i = 0, cnt = items.length; i < cnt; i++) {
            view = map[items[i].dataIndex()];
            views.push(view);
        }
        views.sort(function (v1, v2) {
            return v1.y() - v2.y();
        });
        return views;
    },
    $_cloneElement: function (element) {
        var elt = element._dom.cloneNode(true);
        this._rootElement._dom.appendChild(elt);
        return elt;
    },
    $_cloneElement2: function (element, parentElement) {
        var elt = element._dom.cloneNode(true);
        parentElement.appendChild(elt);
        return elt;
    },
    $_cloneElement3: function (element, parentElement, oldElement) {
        var elt = element._dom.cloneNode(true);
        parentElement.replaceChild(elt, oldElement);
        var snew = elt.style;
        var sold = oldElement.style;
        snew.left = sold.left;
        snew.top = sold.top;
        snew.width = sold.width;
        snew.height = sold.height;
        return elt;
    },
    $_createVLine: function (parent, x, y, w, stroke) {
        var elt = document.createElement("div");
        var css = elt.style;
        css.position = "absolute";
        css.boxSizing = "border-box";
        css.padding = "0px";
        css.margin = "0px";
        css.borderTop = stroke.css();
        parent.appendChild(elt);
        Dom.setBounds(elt, x, y, w, stroke.width());
        return elt;
    },
    $_createElement: function (parent, tag) {
        var elt = document.createElement(tag || "div");
        var css = elt.style;
        parent && parent.appendChild(elt);
        css.position = "absolute";
        css.boxSizing = "border-box";
        css.padding = "0px";
        css.margin = "0px";
        css["-webkit-print-color-adjust"] = "exact"; // for chrome printing
        return elt;
    },
    $_prepareMergedDataCells: function (cells) {
        this._mergeCells = cells.getChildren();
        if (this._mergeCells) {
            this._mergeCells.sort(function (c1, c2) {
                return c1.mergeRoom().headItem() - c2.mergeRoom().headItem();
            });
            return true;
        }
        return false;
    },
    $_getMergedDataCells: function (row1, row2) {
        var cells = this._mergeCells;
        var views = [];
        var view, room, r1, r2;
        for (var i = 0, cnt = cells.length; i < cnt; i++) {
            view = cells[i];
            view.$idx = i;
            room = view.mergeRoom();
            r1 = room.headItem();
            r2 = room.tailItem();
            if (r1 >= row1 && r2 <= row2) {
                views.push(view);
            } else if (row1 >= r1 && row1 <= r2 || row2 >= r1 && row2 <= r2) {
                view.$$_many = true;
                views.push(view);
            }
            if (r1 > row2) {
                break;
            }
        }
        for (i = views.length; i--;) {
            view = views[i];
            if (view.$$_many) {
                if (view.mergeRoom().tailItem() <= row2) {
                    cells.splice(view.$idx, 1);
                }
            } else {
                cells.splice(view.$idx, 1);
            }
        }
        return views;
    },
    $_writeMergedDataCells: function (info, startRow, rows, rows2, gridElt, gridElt2) {
        var cells, i, cell, room, head, tail, y, r, h, row;
        if (info.pageColumns <= 1) {
            cells = this.$_getMergedDataCells(startRow, startRow + rows.length - 1);
            for (i = 0, cnt = cells.length; i < cnt; i++) {
                cell = cells[i];
                room = cell.mergeRoom();
                head = room.headItem();
                row = rows[Math.max(0, head - startRow)];
                y = row.y();
                cell.setY(y);
                if (cell.$$_many) {
                    r = room.tailItem();
                    row = rows[Math.min(rows.length - 1, r - startRow)];
                    h = row.bottom() - y;
                    cell.setHeight(h);
                    this._drawElementHtml(cell, true);
                }
                cell.moveDom();
                if (cell.$$_many) {
                    elt = this.$_cloneElement(cell);
                    gridElt.appendChild(elt);
                } else {
                    gridElt.appendChild(cell._dom);
                }
            }
        } else if (info.pageColumnLayout == PageColumnLayout.ACROSS_THEN_DOWN) {
            cells = this.$_getMergedDataCells(startRow, startRow + rows.length + rows2.length - 1);
            for (i = 0, cnt = cells.length; i < cnt; i++) {
                cell = cells[i];
                room = cell.mergeRoom();
                head = room.headItem();
                tail = room.tailItem();
                row = rows[Math.max(0, Math.ceil((head - startRow) / 2))];
                if (!row) continue;
                y = row.y();
                cell.setY(y);
                    row = rows[Math.max(0, Math.min(rows.length - 1, Math.floor((tail - startRow) / 2)))];
                    if (!row) debugger;
                    h = row.bottom() - y;
                    cell.setHeight(h);
                    this._drawElementHtml(cell, true);
                cell.moveDom();
                    elt = this.$_cloneElement(cell);
                    gridElt.appendChild(elt);
            }
            for (i = 0, cnt = cells.length; i < cnt; i++) {
                cell = cells[i];
                room = cell.mergeRoom();
                head = room.headItem();
                tail = room.tailItem();
                if (tail < startRow + 1) continue;
                row = rows2[Math.max(0, Math.ceil((head - startRow - 1) / 2))];
                if (!row) continue;
                y = row.y();
                cell.setY(y);
                    row = rows2[Math.max(0, Math.min(rows2.length - 1, Math.floor((tail - startRow - 1) / 2)))];
                    if (!row) debugger;
                    h = row.bottom() - y;
                    cell.setHeight(h);
                    this._drawElementHtml(cell, true);
                cell.moveDom();
                    elt = this.$_cloneElement(cell);
                    gridElt2.appendChild(elt);
            }
        } else { // info.pageColumnLayout == PageColumnLayout.DOWN_THEN_ACROSS
            cells = this.$_getMergedDataCells(startRow, startRow + rows.length - 1);
            for (i = 0, cnt = cells.length; i < cnt; i++) {
                cell = cells[i];
                room = cell.mergeRoom();
                head = room.headItem();
                row = rows[Math.max(0, head - startRow)];
                y = row.y();
                cell.setY(y);
                if (cell.$$_many) {
                    r = room.tailItem();
                    row = rows[Math.min(rows.length - 1, r - startRow)];
                    h = row.bottom() - y;
                    cell.setHeight(h);
                    this._drawElementHtml(cell, true);
                }
                cell.moveDom();
                if (cell.$$_many) {
                    elt = this.$_cloneElement(cell);
                    gridElt.appendChild(elt);
                } else {
                    gridElt.appendChild(cell._dom);
                }
            }
            startRow += rows.length;
            cells = this.$_getMergedDataCells(startRow, startRow + rows2.length - 1);
            for (i = 0, cnt = cells.length; i < cnt; i++) {
                cell = cells[i];
                room = cell.mergeRoom();
                head = room.headItem();
                row = rows2[Math.max(0, head - startRow)];
                y = row.y();
                cell.setY(y);
                if (cell.$$_many) {
                    r = room.tailItem();
                    row = rows2[Math.min(rows2.length - 1, r - startRow)];
                    h = row.bottom() - y;
                    cell.setHeight(h);
                    this._drawElementHtml(cell, true);
                }
                cell.moveDom();
                if (cell.$$_many) {
                    elt = this.$_cloneElement(cell);
                    gridElt2.appendChild(elt);
                } else {
                    gridElt2.appendChild(cell._dom);
                }
            }
        }
    },
    $_printPage: function (info, yPage, pageNo, startRow, pageElement, totalViews) {
        console.log('### PAGE: ' + pageNo);
        var view, headers, sz, elt, row, h, h2, w, x, y, i, j, cnt,
            gridElt, gridElt2, pBands, needCustomFooters,
            wPage = info.pageWidth,
            hPage = info.pageHeight,
            indent = info.groupIndent,
            p1 = 0,
            p2 = hPage,
            rPage = new Rectangle(0, 0, wPage, hPage),
            rGrid = rPage.clone(),
            pBody = 0;
        if (info.pageHeaderVisible) {
            view = this._pageHeaderView;
            sz = view.measure(wPage, 10000, true);
            if (sz.height > 0) {
                view.setWidth(wPage);
                view.setHeight(sz.height);
                view.layoutItems(true);
                this._drawElementHtml(view);
                elt = this.$_cloneElement2(view, pageElement);
                Dom.setBounds(elt, rPage.x, p1, rPage.width, sz.height);
                view.moveDom();
                p1 += sz.height;
            }
        }
        if (pageNo == 0 && info.reportHeaderVisible) {
            view = this._reportHeaderView;
            pageElement.appendChild(view._dom);
            sz = view.measure(wPage, 10000, true);
            if (sz.height > 0) {
                view.setBounds(rPage.x, p1, rPage.width, sz.height);
                view.layoutItems(true);
                this._drawElementHtml(view, true);
                p1 += sz.height;
            }
        }
        if (info.pageFooterVisible) {
            view = this._pageFooterView;
            sz = view.measure(wPage, 10000, true);
            if (sz.height > 0) {
                view.setWidth(wPage);
                view.setHeight(sz.height);
                view.layoutItems(true);
                this._drawElementHtml(view);
                elt = this.$_cloneElement2(view, pageElement);
                elt.$view = view;
                elt.$page = pageNo;
                Dom.setBounds(elt, rPage.x, p2 - sz.height, rPage.width, sz.height);
                info.pPageFooter = p2 - sz.height;
                p2 -= sz.height;
                if (view.model().hasPageValue()) {
                    totalViews.push(elt);
                }
            }
        }
        if (info.customHeadersVisible && !this._customHeadersAdded) {
            view = this._customHeadersView;
            h = view.height();
            w = view.width();
            if (pageNo > 0 || p2 - p1 >= h) {
                elt = this.$_cloneElement2(view, pageElement);
                Dom.setBounds(elt, rPage.x, p1, w, h);
                this._customHeadersAdded = true;
                p1 += h;
            } else {
                return 0;
            }
        }
        if (info.pageTitleVisible) {
            view = this._pageTitleView;
            sz = view.measure(wPage, 10000, true);
            if (sz.height > 0) {
                view.setWidth(wPage);
                view.setHeight(sz.height);
                view.layoutItems(true);
                this._drawElementHtml(view);
                elt = this.$_cloneElement2(view, pageElement);
                Dom.setBounds(elt, rPage.x, p1, rPage.width, sz.height);
                view.moveDom();
                p1 += sz.height;
            }
        }
        if (info.gridVisible) {
            switch (info.pageLayout) {
                case "card":
                    i = this.$_printCard(info, pageElement, rGrid, p1, p2, startRow);
                    break;
                default:
                    i = this.$_printGrid(info, pageElement, rGrid, p1, p2, startRow);
                    break;
            }
        } else {
            info.hGrid = 0;
        }
        p1 += info.hGrid;
        if (!info.gridVisible && info.bandCount > 0 && info.bandIndex < info.bandCount) {
            info.hBand = 0;
            this.$_printBands(info, pageElement, rGrid, p1, p2);
            p1 += info.hBand;
        }
        if (!info.columnFooterVisible || this._columnFooterAdded) {
            needCustomFooters = info.customFootersVisible;
            if (needCustomFooters && !this._customFootersAdded) {
                if ((info.itemCount == 0 || i >= info.itemCount) && needCustomFooters) {
                    view = this._customFootersView;
                    h = view.height();
                    w = view.width();
                    if (p2 >= p1 + h) {
                        elt = this.$_cloneElement2(view, pageElement);
                        Dom.setBounds(elt, rGrid.x, p1, w, h);
                        this.$_createVLine(pageElement, rGrid.x, p1 + h, w, SolidPen.GRAY);
                        this._customFootersAdded = true;
                        p1 += h;
                    }
                }
            }
            if (!needCustomFooters || this._customFootersAdded) {
                if ((info.itemCount == 0 || i >= info.itemCount) && info.reportFooterVisible) {
                    view = this._reportFooterView;
                    h = this._reportFooterHeight;
                    if (h > 0) {
                        if (p2 >= p1 + h) {
                            if (info.pageFill) {
                                if (info.pPageFooter) {
                                    p1 = info.pPageFooter - h;
                                } else {
                                    p1 = p2 - h;
                                }
                            }
                            pageElement.appendChild(view._dom);
                            view.setBounds(rGrid.x + indent, p1, wPage, h);
                            view.layoutItems(true);
                            this._reportFooterAdded = true;
                            this._drawElementHtml(view);
                            if (info.pageFill && info.gridElt) {
                                if (info.pGrid + pBands < p1) {
                                    h = p1 - info.pGrid - pBands;
                                    info.gridElt.style.height = (info.pGrid + h) + "px";
                                    if (info.columnFooterElt) {
                                        info.columnFooterElt.style.top = (info.yColumnFooter + h) + "px";
                                    }
                                }
                            }
                            p1 += h;
                        }
                    } else {
                        this._reportFooterAdded = true;
                    }
                }
            }
        }
        return i;
    },
    $_printGrid: function (info, pageElement, rGrid, p1, p2, startRow) {
        var i, w, grldElt, gridElt2, pBody, view, h, x, y,
            elt, headers, row, h2, styles, css, stroke,
            dp = this._dataProvider,
            itemViews = this._itemViews,
            indent = info.groupIndent,
            rows = [],
            rows2 = [],
            wPage = info.pageWidth,
            rGrid2 = info.pageColumns > 1 ? rGrid.clone() : null,
            pGrid = 0,
            pGrid2 = 0;
        w = info.pageColumns > 1 ? info.$_columnWidth : info.pageWidth;
        gridElt = this.$_createElement(pageElement);
        rGrid.y = p1;
        rGrid.height = p2 - p1;
        rGrid.width = w;
        pBody = p1;
        if (info.pageColumns > 1) {
            gridElt2 = this.$_createElement(pageElement);
            rGrid2.y = rGrid.y;
            rGrid2.height = rGrid.height;
            rGrid2.x = rGrid.x + w + (wPage - w * 2);
            rGrid2.width = w;
        }
        if (info.columnHeaderVisible && startRow < info.itemCount) {
            view = this._columnHeaderView;
            h = view.height();
            x = 0;//view.x();
            elt = this.$_cloneElement2(view, gridElt);
            Dom.setBounds(elt, x, pGrid, w, h);
            headers = [elt];
            pGrid += h;
            pBody += h;
            if (info.pageColumns > 1) {
                view = this._columnHeaderView;
                elt = this.$_cloneElement2(view, gridElt2);
                Dom.setBounds(elt, x, pGrid2, w, h);
                headers.push(elt);
                pGrid2 += h;
            }
        }
        if (startRow < info.itemCount) {
            if (info.pageColumns <= 1) {
                y = rGrid.height;
                for (i = startRow; i < info.itemCount; i++) {
                    view = itemViews[i];
                    h = view.height();
                    if (i > startRow && pGrid + h > y) {
                        break;
                    }
                    dp.setRow(view);
                    row = view.item();
                    gridElt.appendChild(view._dom);
                    if (row instanceof DataRow) {
                        view.setX(view.x() + indent);
                    }
                    view.setY(pGrid);
                    view.moveDom();
                    rows.push(view);
                    pGrid += h;
                }
            } else if (info.pageColumnLayout == PageColumnLayout.ACROSS_THEN_DOWN) {
                y = rGrid.height;
                for (i = startRow; i < info.itemCount; i++) {
                    view = itemViews[i];
                    h = view.height();
                    if (i > startRow && pGrid + h > y) {
                        break;
                    }
                    dp.setRow(view);
                    row = view.item();
                    gridElt.appendChild(view._dom);
                    if (row instanceof DataRow) {
                        view.setX(view.x() + indent);
                    }
                    view.setY(pGrid);
                    view.moveDom();
                    rows.push(view);
                    pGrid += h;
                    if (i < info.itemCount - 1) {
                        view = itemViews[++i];
                        h = view.height();
                        dp.setRow(view);
                        row = view.item();
                        gridElt2.appendChild(view._dom);
                        if (row instanceof DataRow) {
                            view.setX(view.x() + indent);
                        }
                        view.setY(pGrid2);
                        view.moveDom();
                        rows2.push(view);
                        pGrid2 += h;
                    }
                }
            } else { // info.pageColumnLayout == PageColumnLayout.DOWN_THEN_ACROSS
                y = rGrid.height;
                for (i = startRow; i < info.itemCount; i++) {
                    view = itemViews[i];
                    h = view.height();
                    if (i > startRow && pGrid + h > y) {
                        view = null;
                        break;
                    }
                    dp.setRow(view);
                    row = view.item();
                    gridElt.appendChild(view._dom);
                    if (row instanceof DataRow) {
                        view.setX(view.x() + indent);
                    }
                    view.setY(pGrid);
                    view.moveDom();
                    rows.push(view);
                    pGrid += h;
                }
                h2 = pGrid2;
                for (j = 0, cnt = rows.length; j < cnt && i < info.itemCount; j++, i++) {
                    view = itemViews[i];
                    h = view.height();
                    dp.setRow(view);
                    row = view.item();
                    gridElt2.appendChild(view._dom);
                    if (row instanceof DataRow) {
                        view.setX(view.x() + indent);
                    }
                    view.setY(pGrid2);
                    view.moveDom();
                    rows2.push(view);
                    pGrid2 += h;
                }
                if (i == info.itemCount && pGrid2 < pGrid) {
                    while (pGrid2 < pGrid && rows.length > 1) {
                        view = rows[rows.length - 1];
                        h = view.height();
                        if (pGrid2 + h <= pGrid - h) {
                            gridElt2.appendChild(view._dom);
                            rows.splice(rows.length - 1, 1);
                            rows2.splice(0, 0, view);
                            pGrid2 += h;
                            pGrid -= h;
                        } else {
                            break;
                        }
                    }
                    y = h2;
                    for (j = 0; j < rows2.length; j++) {
                        view = rows2[j];
                        view.setY(y);
                        view.moveDom();
                        y += view.height();
                    }
                }
            }
        } else {
            i = info.itemCount;
        }
        if (info.columnMerged && info.pageColumns <= 2) {
            this.$_writeMergedDataCells(info, startRow, rows, rows2, gridElt, gridElt2);
        }
        if (info.columnFooterVisible && !this._columnFootersdded) {
            view = this._columnFooterView;
            h = view.height();
            w = view.width();
            x = view.x();
            if (info.pageColumns > 1) {
                if (rGrid2.height >= pGrid2 + h) {
                    elt = this.$_cloneElement2(view, gridElt2);
                    Dom.setBounds(elt, x + indent, pGrid2, w, h);
                    info.columnFooterElt2 = elt;
                    info.yColumnFooter2 = pGrid2;
                    this._columnFooterAdded = true;
                    pGrid2 += h;
                    info.pColumnFooter2 = pGrid2;
                }
            } else {
                if (rGrid.height >= pGrid + h) {
                    elt = this.$_cloneElement2(view, gridElt);
                    Dom.setBounds(elt, x + indent, pGrid, w, h);
                    info.columnFooterElt = elt;
                    info.yColumnFooter = pGrid;
                    this._columnFooterAdded = true;
                    pGrid += h;
                    info.pColumnFooter = pGrid;
                }
            }
        }
        w = rGrid.width > info.pageWidth ? info.pageWidth : info.pageWidth;
        if (gridElt2) {
            w = (info.pageWidth - 10) / 2;
        }
        Dom.setBounds(gridElt, rGrid.x, rGrid.y, w, pGrid);
        styles = this._gridView.styles();
        css = gridElt.style;
        stroke = styles.border();
        if (stroke) {
            css.border = _borderCss(stroke);
        } else {
            css.borderLeft = _borderCss(styles.borderLeft());
            css.borderRight = _borderCss(styles.borderRight());
            css.borderTop = _borderCss(styles.borderTop());
            css.borderBottom = _borderCss(styles.borderBottom());
        }
        css.overflow = "hidden";
        if (gridElt2) {
            x = w + 10;
            Dom.setBounds(gridElt2, x, rGrid2.y, w, pGrid2);
            css = gridElt2.style;
            if (stroke) {
                css.border = _borderCss(stroke);
            } else {
                css.borderLeft = _borderCss(styles.borderLeft());
                css.borderRight = _borderCss(styles.borderRight());
                css.borderTop = _borderCss(styles.borderTop());
                css.borderBottom = _borderCss(styles.borderBottom());
            }
            css.overflow = "hidden";
        }
        info.gridElt = pGrid ? gridElt : null;
        info.gridElt2 = pGrid2 ? gridElt2 : null;
        info.yGrid = rGrid.y;
        info.pGrid = pGrid;
        info.yGrid2 = pGrid2 ? rGrid2.y : 0;
        info.pGrid2 = pGrid2;
        info.hGrid = Math.max(pGrid2, pGrid);
        return i;
    },
    $_printCard: function (info, pageElement, rGrid, p1, p2, startRow) {
        var j, k, x, w, wCol, gridElt, view, views, views2, views3, elt, row, sz,
            dp = this.dataProvider(),
            w = info.pageWidth,
            itemViews = this._itemViews,
            card = this.model().printGrid().card(),
            styles = card.styles(),
            hgap = info.columnGap,
            vgap = card.rowGap(),
            i = startRow,
            pGrid = 0,
            x = 0,
            nCol = info.pageColumns;
        gridElt = this.$_createElement(pageElement);
        rGrid.y = p1;
        rGrid.height = p2 - p1;
        rGrid.width = w;
        styles.deflatePaddings(rGrid);
        if (!card._item) {
            card._item = new DefaultCardItem(card);
        }
        if (nCol <= 1) {
            wCol = rGrid.width;
            while (i < info.itemCount) {
                dp.setRow(itemViews[i]);
                view = new PrintCardElement(true, card, this._printing);
                this.addElement(view);
                sz = view.measure(wCol, rGrid.height, true);
                if (i > startRow && pGrid + sz.height > rGrid.height) {
                    this.removeElement(view);
                    break;
                }
                gridElt.appendChild(view._dom);
                view.setBounds(x, pGrid, wCol, sz.height);
                view.layoutItems();
                this._drawElementHtml(view);
                pGrid += sz.height + vgap;
                i++;
            }
        } else if (info.pageColumnLayout == PageColumnLayout.ACROSS_THEN_DOWN) {
            wCol = Math.floor((rGrid.width - (nCol - 1) * hgap) / nCol);
            while (i < info.itemCount) {
                h = 0;
                x = 0;
                views = [];
                for (j = 0; i < info.itemCount && j < nCol; j++, i++) {
                    dp.setRow(itemViews[i]);
                    view = new PrintCardElement(true, card, this._printing);
                    this.addElement(view);
                    sz = view.measure(wCol, rGrid.height, true);
                    if (i > startRow && pGrid + sz.height > rGrid.height) {
                        this.removeElement(view);
                        for (k = views.length; k--;) {
                            this.removeElement(views[k]);
                            gridElt.removeChild(views[k]._dom);
                        }
                        break;
                    }
                    gridElt.appendChild(view._dom);
                    view.setBounds(x, pGrid, wCol, sz.height);
                    view.layoutItems();
                    this._drawElementHtml(view);
                    h = Math.max(h, sz.height);
                    x += wCol + hgap;
                    views.push(view);
                }
                if (i > startRow && pGrid + sz.height > rGrid.height) {
                    break;
                }
                pGrid += h + vgap;
            }
        } else {
            wCol = Math.floor((rGrid.width - (nCol - 1) * hgap) / nCol);
            y = pGrid;
            views2 = [];
            while (i < info.itemCount) {
                h = 0;
                x = 0;
                views = [];
                for (j = 0; i < info.itemCount && j < nCol; j++, i++) {
                    dp.setRow(itemViews[i]);
                    view = new PrintCardElement(true, card, this._printing);
                    this.addElement(view);
                    sz = view.measure(wCol, rGrid.height, true);
                    if (i > startRow && pGrid + sz.height > rGrid.height) {
                        this.removeElement(view);
                        for (k = views.length; k--;) {
                            this.removeElement(views[k]);
                            gridElt.removeChild(views[k]._dom);
                        }
                        break;
                    }
                    gridElt.appendChild(view._dom);
                    view.setBounds(x, pGrid, wCol, sz.height);
                    view.layoutItems();
                    h = Math.max(h, sz.height);
                    x += wCol + hgap;
                    views.push(view);
                    views2.push(view);
                }
                if (i > startRow && pGrid + sz.height > rGrid.height) {
                    break;
                }
                pGrid += h + vgap;
            }
            pGrid = y;
            k = Math.floor((views2.length + nCol - 1) / nCol);
            while (k > 1) {
                for (j = 0; j < k; j++) {
                    h = 0;
                    for (i = 0; i < nCol; i++) {
                        view = views2[i * k + j * nCol + i];
                        if (view) {
                            h = Math.max(h, view.height());
                        }
                    }
                    if (pGrid + h > rGrid.height) {
                        break;
                    }
                    pGrid += h + vgap;
                }
                if (j == k) {
                    break;
                }
                k--;
            }
            views3 = [];
            pGrid = y;
            for (j = 0; j < k; j++) {
                h = 0;
                x = 0;
                for (i = 0; i < nCol; i++) {
                    view = views2[i * k + j];
                    if (view) {
                        view.setBounds(x, pGrid, wCol, view.height());
                        this._drawElementHtml(view);
                        h = Math.max(h, view.height());
                        views3.push(view);
                    }
                    x += wCol + hgap;
                }
                pGrid += h + vgap;
            }
            i = startRow + Math.min(views3.length, k * nCol);
        }
        if (info.columnFooterVisible && !this._columnFooterAdded) {
            view = this._columnFooterView;
            h = view.height();
            w = view.width();
            x = view.x();
            /*
            if (info.pageColumns > 1) {
                if (rGrid2.height >= pGrid2 + h) {
                    elt = this.$_cloneElement2(view, gridElt2);
                    Dom.setBounds(elt, x + indent, pGrid2, w, h);
                    this._columnFooterAdded = true;
                    pGrid2 += h;
                }
            } else {
                if (rGrid.height >= pGrid + h) {
                    elt = this.$_cloneElement2(view, gridElt);
                    Dom.setBounds(elt, x + indent, pGrid, w, h);
                    this._columnFooterAdded = true;
                    pGrid += h;
                }
            }
            */
            this._columnFooterAdded = true;
        }
        Dom.setBounds(gridElt, rGrid.x, rGrid.y, w, pGrid);
        styles.inflatePaddings(rGrid);
        info.hGrid = pGrid;
        return i;
    },
    $_printBand: function (info, pageElement, bandView, rBand) {
        var elt, view, vFooter, h, y, css, stroke, hasRows,
            hFooter = 0,
            pBand = 0,
            band = bandView.model(),
            styles = band.styles(),
            bandElt = this.$_createElement(pageElement),
            starting = bandView.currentRow() == 0;
        rBand = rBand.clone();
        styles.deflateSpaces(rBand);
        y = rBand.height;
        if (band.header().visible()) {
            view = bandView.headerView();
            h = view._measuredHeight;
            if (!view.$_layouted) {
                view.setBounds(0, pBand, rBand.width, h);
                view._layout = bandView._itemLayout.setContainerView(view);
                view.layoutItems(true);
                this._drawElementHtml(view);
            }
            elt = this.$_cloneElement2(view, bandElt);
            Dom.setBounds(elt, 0, pBand, rBand.width, h);
            pBand += h;
            y -= h;
        }
        while (hasRows = bandView.hasRows()) {
            view = bandView.getNextRow();
            h = view._measuredHeight;
            view.setBounds(0, pBand, rBand.width, h);
            view._layout = bandView._rowLayout.setContainerView(view);
            view.layoutItems(true);
            this._drawElementHtml(view);
            bandElt.appendChild(view._dom);
            pBand += h;
            y -= h;
            if (y < h) {
                break;
            }
        }
        if (!hasRows) {
            if (band.footer().visible()) {
                bandView.$_needFooter = true;
                vFooter = bandView.footerView();
                hFooter = vFooter._measuredHeight;
                if (y >= hFooter) {
                    h = hFooter;
                    view = vFooter;
                    view.setBounds(0, pBand, rBand.width, h);
                    view._layout = bandView._itemLayout.setContainerView(view);
                    view.layoutItems(true);
                    this._drawElementHtml(view);
                    bandElt.appendChild(view._dom);
                    pBand += h;
                    y -= h;
                    bandView.$_needFooter = false;
                    info.bandIndex++;
                }
            } else {
                info.bandIndex++;
            }
        }
        Dom.setBounds(bandElt, rBand.x, rBand.y, rBand.width, pBand + 1);
        y -= 1;
        css = bandElt.style;
        stroke = styles.border();
        if (stroke) {
            css.border = _borderCss(stroke);
        } else {
            css.borderLeft = _borderCss(styles.borderLeft());
            css.borderRight = _borderCss(styles.borderRight());
            css.borderTop = _borderCss(styles.borderTop());
            css.borderBottom = _borderCss(styles.borderBottom());
        }
        css.overflow = "hidden";
        styles.inflateSpaces(rBand);
        return pBand;
    },
    $_printBands: function (info, pageElement, rBand, p1, p2) {
        var view, h, styles,
            rBand = rBand.clone(),
            y = rBand.height = p2 - p1,
            bandIndex = info.bandIndex,
            bandView = this._bandViews[bandIndex],
            band = bandView.model(),
            starting = bandView.currentRow() == 0,
            last = true;
        rBand.y = p1;
        rBand.width = info.pageWidth;
        if (starting && band.sectionHeader().visible()) {
            styles = band.sectionHeader().styles();
            styles.deflateMargins(rBand);
            view = bandView.sectionHeaderView();
            h = view._measuredHeight;
            view.setBounds(rBand.x, rBand.y, rBand.width, h);
            view._layout = bandView._sectionLayout.setContainerView(view);
            view.layoutItems(true);
            this._drawElementHtml(view);
            pageElement.appendChild(view._dom);
            styles.inflateMargins(rBand);
            rBand.topBy(h);
            info.hBand += h;
        }
        h = this.$_printBand(info, pageElement, bandView, rBand);
        rBand.y += h;
        rBand.height -= h;
        info.hBand += h;
        if (last && band.sectionFooter().visible()) {
            styles = band.sectionFooter().styles();
            styles.deflateMargins(rBand);
            view = bandView.sectionFooterView();
            h = view._measuredHeight;
            view.setBounds(rBand.x, rBand.y, rBand.width, h);
            view._layout = bandView._sectionLayout.setContainerView(view);
            view.layoutItems(true);
            this._drawElementHtml(view);
            pageElement.appendChild(view._dom);
            styles.inflateMargins(rBand);
            rBand.topBy(h);
            info.hBand += h;
        }
        if (info.bandIndex > bandIndex && this._bandViews.length > info.bandIndex) {
            p1 += info.hBand;
            this.$_printBands(info, pageElement, rBand, p1, p2);
        }
    }
});
var PrintPreview = defineClass("PrintPreview", PrintView, {
    init: function (container) {
        this._super(container.$_dom, container, true);
    }
});
var BoardTool = defineClass("BoardTool", VisualTool, {
    init: function (owner, name) {
        this._super(owner, name);
        this._board = owner.boardView();
    },
    board: function () {
        return this._board;
    }
});
var BoardSelectionTool = defineClass("BoardSelectionTool", BoardTool, {
    init: function (owner, name) {
        this._super(owner, name);
    }
});
var BoardViewSelectionTool = defineClass("BoardViewSelectionTool", BoardSelectionTool, {
    init: function (owner) {
        this._super(owner, 'boardSelectionTool');
    }
});
var MobileBoardSelectionTool = defineClass("MobileBoardSelectionTool", BoardSelectionTool, {
    init: function (owner) {
        this._super(owner, 'mobileSelectionTool');
    }
});
var DataBoard = defineClass("DataBoard", EventAware, {
    init: function (delegate, config) {
        this._super();
        this._dataProvider = new ReportDataProvider();
        this._delegate = delegate;
        this._styles = new PrintStyles("board");
        this._screens = new DataBoardScreenCollection(this);
        this.setTheme(PrintStyleSheet.Default);
        config && this.loadBoard(config);
    },
    dataProvider: null,
    styles: null,
    screens: null,
    setStyles: function (value) {
        if (value !== this._styles) {
            this._styles.extend(value);
        }
    },
    screens_: function () {
        return this._screens.items();
    },
    setScreens: function (value) {
        this._screens.load(value);
    },
    dataProvider: function () {
        return this._dataProvider;
    },
    screen: function () {
        return this._screens.count() > 0 ? this._screens.getItem(0) : null
    },
    width: function () {
        var scr = this.screen();
        return scr ? scr.width() : 100;
    },
    height: function () {
        var scr = this.screen();
        return scr ? scr.height() : 100;
    },
    loadData: function (value) {
        this._dataProvider.load(value);
    },
    loadBoard: function (source) {
        if (_isObject(source)) {
            source.data && this.loadData(source.data);
            this.assign(source);
        }
    },
    setTheme: function (value) {
        if (value !== this._theme) {
            this._theme = value;
            this._styles.setSysDefault(value.report(), false);
        }
    },
    delegate: function () {
        return this._delegate;
    }
}, {
    LOADED: "onDataBoardLoaded",
    ADDED: "onDataBoardAdded",
    REMOVED: "onDataBoardRemoved"
});
var DataBoardScreen = defineClass("DataBoardScreen", PrintItemContainerImpl, {
    init: function (owner, config) {
        this._super("boardScreen", owner);
        config && this.assign(config);
    },
    title: null,
    width: 400,
    height: 500,
    content: null,
    setContent: function (value) {
        if (value !== this._content) {
            var c = this._owner.delegate().getItem(value, 'canvas');
            if (c) {
                this.$_internalAddItem(c);
                c.assign(value);
            }
            this._content = c;
        }
        return this;
    },
});
var DataBoardScreenCollection = defineClass("DataBoardScreenCollection", null, {
    init: function (owner, config) {
        this._super();
        this._owner = owner;
        this._items = [];
        config && this.load(config);
    },
    count: function () {
        return this._items.length;
    },
    items: function () {
        return this._items.concat();
    },
    load: function (source) {
        this.clear();
        if (_isArray(source)) {
            for (var i = 0; i < source.length; i++) {
                this.add(source[i]);
            }
        } else if (source) {
            this.add(screen);
        }
    },
    clear: function () {
    },
    getItem: function (index) {
        return this._items[index];
    },
    add: function (screen) {
        if (screen instanceof DataBoardScreen) {
            if (this._items.indexOf(screen) >= 0) return this;
        } else if (screen) {
            screen = new DataBoardScreen(this._owner, screen);
        }
        if (screen) {
            this._items.push(screen);
        }
        return this;
    },
    removeAt: function (index) {
    }
});
var BoardScreenView = defineClass("BoardScreenView", PrintItemContainerElement, {
    init: function (dom, model, printing) {
        this._super(dom, 'screenView', model, printing);
        this._addItemView(this._contentView = new PrintCanvasElement(dom));
    },
    setModel: function (value) {
        if (value !== this._model) {
            this._model = value;
            this.$_loadModel(value);
        }
    },
    measure: function () {
        var c = this._contentView;
        if (c) {
            c.measure(this.width(), this.height(), true);
        }
    },
    layoutItems: function (force) {
        this._super(force);
        var c = this._contentView;
        if (c) {
            c.setRect(this.getClientRect());
            c.layoutItems(true);
        }
    },
    $_loadModel: function (model) {
        var c = this._contentView;
        if (c) {
            this.removeChild(c);
            c = null;
        }
        if (model instanceof DataBoardScreen) {
            c = this.container().delegate().getItemView(model.content());
        } else {
            c = new PrintCanvasElement(this._dom);
        }
        this._contentView = c;
        c && this._addItemView(c);
    }
});
var BoardContainer = defineClass("BoardContainer", DataLudi.UIComponent, {
    init: function (dom, containerId, printing, designMode) {
        this._super(dom, containerId, designMode);
        if (!(this._printing = printing)) {
        }
        this._designMode = designMode;
        var pane = this._createBackgroundElements(dom);
        this._delegate = this._createDelegate();
        this._boardView = this._createBoardView(dom);
        pane.addElement(this._boardView);
        this._prepareLayers(dom);
        this._imagePile = [];
        this.setDefaultTool(this._createDefaultTool());
        this._setDomMouse(true);
    },
    delegate: function () {
        return this._delegate;
    },
    boardView: function () {
        return this._boardView;
    },
    getPrintItemView: function (item) {
        var items, view, i;
        if (item === this._model) {
            return this._boardPane;
        } else if (item instanceof PrintItem) {
            items = item.getAncestors();
            view = this._boardView._screenView._contentView;// this["_" + items[0].name() + "View"];
            if (item !== view._model) {
                for (i = 2; i < items.length; i++) {
                    view = view.getItemView(items[i]);
                }
                view = view.getItemView(item);
            }
            return view;
        }
        return null;
    },
    _createBackgroundElements: function (dom) {
        var design = this._designMode;
        if (design) {
            this._designPane = new BoardDesignPane(dom);
            this.addElement(this._designPane);
            this._boardPane = new BoardPane(dom);
            this._designPane.addElement(this._boardPane);
        }
        return design ? this._boardPane : this;
    },
    _createBoardView: function (dom) {
        return new BoardView(dom, this, this._printing);
    },
    _createDefaultTool: function () {
            return new BoardViewSelectionTool(this);
    },
    _prepareLayers: function (dom) {
    },
    _beforeRender: function (bounds) {
        this._boardView._beforeRender(bounds);
    },
    _afterRender: function (bounds) {
        this._boardView._afterRender(bounds);
    },
    _doLayout: function (bounds) {
        var border, w,
            brd = this._boardView,
            r = bounds.clone();
        if (!this.$_dom) {
            border = brd._styles.border();
            if (border) {
                w = border.width();
                w && r.inflate(-w, -w);
            }
        }
        brd.setRect(r);
        r.x = r.y = 0;
        brd._doLayout(r);
    },
    _doDrawBorder: function (g, r) {
        var w, x, y, pen,
            border = this._boardView._styles.border();
        if (border) {
            w = border.width();
            if (w > 0) {
                x = r.x + _int(w / 2);
                y = r.y + _int(w / 2);
                if (!this._invalidated && !border.opaque()) {
                    pen = w > 1 ? new SolidPen(0xffffffff, w) : SolidPen.WHITE;
                    g.drawBoundsI(null, pen, x, y, r.width - w, r.height - w);
                }
                g.drawBoundsI(null, border, x, y, r.width - w, r.height - w);
            }
        }
    },
    _doDrawBorderHtml: function (r) {
        var border = this._boardView._styles.border();
        if (border) {
            this._container.style.border = border.css();// "1px solid #888";
        } else {
            this._container.style.border = '';
            this._container.style.borderStyle = "none";
        }
    },
    _createDelegate: function () {
        return _licmod.indexOf('report') >= 0 ? new PrintDelegate(this) : null;
    },
    $_pileImage: function (imgElt) {
        this._imagePile.push(imgElt);
    }
});
var BoardDesignPane = defineClass("BoardDesignPane", LayerElement, {
    init: function (dom) {
        this._super(dom, "designPane");
        this._css.pointerEvents = null;
    },
    designWidth: 0,
    designHeight: 0,
    fill: null,
    _doDraw: function (g, needOaque) {
        var w = this._designWidth,
            h = this._designHeight;
        if (w > 0 && h > 0) {
            g.drawBoundsI(this._fill || new SolidBrush('#20ff0000'), null, 0, 0, w, h);
        }
    },
    _doDrawHtml: function () {
        var elt = this.getChild(0);
        if (elt) {
            this._doDraw(this.$_getGraphics(true, this.getClientRect(), elt._dom));
        }
    }
});
var BoardPane = defineClass("BoardPane", LayerElement, {
    init: function (dom, model) {
        this._super(dom, "boardPane");
        this._model = model;
    },
    model: function () {
        return this._model;
    },
    _doDraw: function (g, needOaque) {
    },
    _doDrawHtml: function () {
        var elt = this.getChild(0);
        if (elt) {
            this._doDraw(this.$_getGraphics(true, this.getClientRect(), elt._dom));
        }
    }
});
var BoardView = defineClass("BoardView", LayerElement, {
    init: function (dom, container, printing) {
        this._super(dom);
        dom && (this._dom.$_name = 'BoardView');
        this._container = container;
        this._printing = printing;
        this._valueRuntime = new PrintValueRuntime(this);
        this._styles = new PrintStyles(this, "board", {
            background: null,
            border: '#616569'
        });
        this._screenBuff = [];
        this._screenViews = [];
        this._screenView = null;
    },
    onDataBoardLoaded: function (board) {
        this.$_clearScreens();
        this.$_loadScreens();
    },
    onDataBoardAdded: function (board) {
    },
    onDataBoardRemoved: function (board) {
    },
    debugMode: false,
    model: null,
    styles: null,
    setDebugMode: function (value) {
        if (value != this._debugMode) {
            this._debugMode = value;
            this.invalidateLayout();
        }
    },
    setModel: function (value) {
        value = value instanceof DataBoard ? value : _isObject(value) ? new DataBoard(this.delegate(), value) : null;
        if (value !== this._model) {
            value && value.removeListener(this);
            this._model = value;
            value && value.addListener(this);
            this.$_clearScreens();
            value && this.$_loadScreens();
        }
    },
    setStyles: function (value) {
        if (value !== this._styles) {
            this._styles.extend(value);
        }
        return this;
    },
    printing: function () {
        return this._printing;
    },
    delegate: function () {
        return this._container._delegate;
    },
    resetSize: function () {
        this.container().resetSize();
    },
    container: function () {
        return this._container;
    },
    $_clearScreens: function () {
        var views = this._screenViews;
        var i;
        for (i = 0; i < views.length; i++) {
            this.removeChild(views[i]);
        }
        this._screenBuff = this._screenBuff.concat(views);
        this._screenViews = [];
        this._screenView = null;
    },
    $_loadScreens: function () {
        var board = this._model;
        var screens = board.screens();
        var buff = this._screenBuff;
        var i, m, v;
        for (i = screens.length; i--;) {
            m = screens[i];
            v = buff.pop();
            if (!v) {
                v = new BoardScreenView(this._dom, null);
            }
            this.addChild(v);
            v.setModel(m);
            this._screenView = v;
        }
    },
    _beforeRender: function (bounds) {
        this.$_saveDebug = $$_debugPrint;
        $$_debugPrint = this._debugMode;
    },
    _afterRender: function (bounds) {
        $$_debugPrint = this.$_saveDebug;
    },
    _doLayout: function (bounds) {
        var sv = this._screenView;
        if (sv) {
            var r = bounds.getInner();
            sv.setRect(r);
            sv.measure();
            sv.layoutItems(true);
        }
    }
});

    var _preview = function (grid, model, data, options, print, callback) {

        function preview(grid, win, print) {
            if (win.preview) {
                win.preview(grid, model, data, options, print, callback);
            } else {
                setTimeout(function () {
                    preview(grid, win, print);
                }, 0);
            }
        }

        var w, h, x, y, attrs, win,
            po = options;

        if (!(po instanceof PrintOptions)) {
            po = new PrintOptions().assign(po);
        }
        w = po.previewWidth();
        h = po.previewHeight();
        x = (window.screen.availWidth - w) / 2;
        y = (window.screen.availHeight - h) / 2;
        attrs = "toolbar=yes, scrollbars=yes, resizable=yes, "
            + "left=" + x + ", top=" + y + ", width=" + w + ", height=" + h;
        win = window.open(po.previewUrl(), po.previewTitle(), attrs);

        preview(grid, win, print);
    };
    var _createPrintPreviewer = function (containerId, debug, paging) {
        $$_debugPrint = debug;
        return new PrintPreviewer(containerId, paging);
    };
    var _createBoardView = function (containerId, dom, printing) {
        //$$_debugPrint = debug;
        return new BoardContainer(dom, containerId, printing).boardView();
    }

    var _loadLog = "#### LOAD DATALUDI REPORT MODULE in " + getTimer() + ' ms. (v ' + _ver + ')';

	return {
		getVersion: _getVersion,
        createPrintPreviewer: _createPrintPreviewer,
        createBoardView: _createBoardView,
        preview: _preview,
        setHtmlDpi: function (dpi) { PrintDimension.HTMLDPI = dpi || 96; },
        setDebugPrint: function (value) { $$_debugPrint = value; },
        PrintDimension: PrintDimension,
        PaperOrientation: PaperOrientation,
        GridPageLayout: GridPageLayout,
        PageColumnLayout: PageColumnLayout,
        GroupFillMode: GroupFillMode,
        PrintOptions: PrintOptions,
        GridReport: GridReport,
        PrintPage: PrintPage,
        PrintContainer: PrintContainer,
        PrintElement: PrintElement,
        PrintGroupElement: PrintGroupElement,
        PrintCellView: PrintCellView,
        PrintDesignCellView: PrintDesignCellView,
        PrintViewSelectionTool: PrintViewSelectionTool,
        PrintItem: PrintItem,
        PrintGroupItem: PrintGroupItem,
        PrintItemContainer: PrintItemContainer,
        PrintItemElement: PrintItemElement,
        PrintItemContainerElement: PrintItemContainerElement,
        PrintPagePane: PrintPagePane,
        PrintReportPane: PrintReportPane,
        PrintDesignPane: PrintDesignPane,
        PrintList: PrintList,
        PrintTile: PrintTile,
        PrintBand: PrintBand,
        PrintDataBand: PrintDataBand,
        PrintTableBand: PrintTableBand,
        PrintCrosstabBand: PrintCrosstabBand,
        PrintBandCollection: PrintBandCollection,
        DataBoard: DataBoard,
        BoardContainer: BoardContainer
	};
})(this);
var dlreport = DLReport;
